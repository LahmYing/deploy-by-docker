<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>GraphQL</title>
    <url>/2021/09/09/GraphQL/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#ge-duan-zhi-ze-yu-xie-zuo">各端职责与协作</a></li>
<li><a href="#dui-bi-yi-wang-ji-yu-restful-feng-ge-jie-kou-de-xie-zuo">对比以往基于 RESTful 风格接口的协作</a></li>
<li><a href="#xie-fa">写法</a><ul>
<li><a href="#schema">schema</a></li>
<li><a href="#cha-xun-he-response">查询和 response</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->

</div>

<h1><a href="#ge-duan-zhi-ze-yu-xie-zuo" class="header-anchor">#</a><span id="ge-duan-zhi-ze-yu-xie-zuo">各端职责与协作</span></h1><ul>
<li>前后端讨论定义 schema<ul>
<li>schema 里是<strong><em>含类型的业务字段 + 业务字段进一步的聚合</em></strong></li>
</ul>
</li>
<li>后端需要提供 <em><strong>schema 形状的接口</strong></em></li>
<li>前端撰写 <em><strong>schema 查询和解析函数</strong></em></li>
</ul>
<h1><a href="#dui-bi-yi-wang-ji-yu-restful-feng-ge-jie-kou-de-xie-zuo" class="header-anchor">#</a><span id="dui-bi-yi-wang-ji-yu-restful-feng-ge-jie-kou-de-xie-zuo">对比以往基于 RESTful 风格接口的协作</span></h1><p>对于前端，只不过是提前把 <code>业务model</code> 写出来，以前是在得到响应后开始整理 <code>业务model</code>，比如 <code>this.list = res.data.list</code></p>
<p>对于后端，则改动很大</p>
<ul>
<li>写法大变动，要搭建 GraphQL 服务</li>
<li>以前是一个需求 <code>新增一个接口</code>，现在则 <code>新增一个 schema</code>，可能更多的是在原有的 <code>schema</code> 上进行改动（相比新增接口多了点风险，且对业务能力要求更高，但有助于提炼业务）</li>
</ul>
<h1><a href="#xie-fa" class="header-anchor">#</a><span id="xie-fa">写法</span></h1><h2><a href="#schema" class="header-anchor">#</a><span id="schema">schema</span></h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 类型字段，假设位于 a 文件</span></span><br><span class="line"><span class="keyword">type</span> Query &#123;</span><br><span class="line">  me: User</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User &#123;</span><br><span class="line">  id: ID</span><br><span class="line">  name: <span class="built_in">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对应的解析函数，假设位于 b 文件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Query_me</span>(<span class="params">request</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request.auth.user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User_name</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> user.getName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2><a href="#cha-xun-he-response" class="header-anchor">#</a><span id="cha-xun-he-response">查询和 response</span></h2><p>SQL 之类的查询和 response</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询</span></span><br><span class="line">&#123;</span><br><span class="line">  me &#123;</span><br><span class="line">    name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// response</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;me&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Luke Skywalker&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>接口风格</tag>
      </tags>
  </entry>
  <entry>
    <title>SEO</title>
    <url>/2021/09/06/SEO/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#can-kao">参考</a></li>
<li><a href="#sou-suo-yin-qing">搜索引擎</a></li>
<li><a href="#seo-you-hua">SEO 优化</a><ul>
<li><a href="#you-hua-fang-shi">优化方式</a><ul>
<li><a href="#ye-mian-nei-de-jing-tai-nei-rong">页面内的静态内容</a></li>
<li><a href="#robots">robots</a></li>
<li><a href="#ti-gong-wang-zhan-sitemap-yong-gong-ju-sheng-cheng-ji-ke-sou-sheng-cheng-sitemap">提供网站 sitemap，用工具生成即可，搜 “生成 sitemap”</a></li>
<li><a href="#url-gua-dang-shi-yong-nofollow-jian-shao-bu-bi-yao-de-zhua-qu-gong-zuo">URL 适当使用「nofollow」，减少不必要的抓取工作</a></li>
<li><a href="#jin-liang-bu-shi-yong-dan-ye-mian-zeng-jia-ye-mian-dao-hang">尽量不使用单页面，增加页面导航</a></li>
<li><a href="#url-lian-jie-you-hua">URL 链接优化</a></li>
<li><a href="#ti-gao-wang-zhan-da-kai-su-du">提高网站打开速度</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#sou-suo-yin-qing-dui-html-tag-de-ping-fen">搜索引擎对 HTML tag 的评分</a></li>
<li><a href="#cha-kan-zhi-ding-zhan-dian-sou-suo-jie-guo">查看指定站点搜索结果</a></li>
</ul>
<!-- tocstop -->

</div>

<h1><a href="#can-kao" class="header-anchor">#</a><span id="can-kao">参考</span></h1><p><a href="https://futu.im/article/2019-seo/">https://futu.im/article/2019-seo/</a></p>
<h1><a href="#sou-suo-yin-qing" class="header-anchor">#</a><span id="sou-suo-yin-qing">搜索引擎</span></h1><ul>
<li>抓页面的静态内容，抓取不了动态生成的内容<ul>
<li>动态如 <code>&lt;p&gt; &#123;&#123; 变量 &#125;&#125; &lt;p&gt;</code>，前端渲染基本都是动态生成，后端渲染就是完全静态的 html</li>
</ul>
</li>
<li>工作流程<ul>
<li>从网站的 URL 进入页面<ul>
<li>1.抓取页面 HTML 代码进数据库</li>
<li>2.处理页面的数据文字，生成索引</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1><a href="#seo-you-hua" class="header-anchor">#</a><span id="seo-you-hua">SEO 优化</span></h1><ul>
<li>目前，移动优先是 SEO 优化的重点</li>
</ul>
<h2><a href="#you-hua-fang-shi" class="header-anchor">#</a><span id="you-hua-fang-shi">优化方式</span></h2><h3><a href="#ye-mian-nei-de-jing-tai-nei-rong" class="header-anchor">#</a><span id="ye-mian-nei-de-jing-tai-nei-rong">页面内的静态内容</span></h3><ul>
<li>关键字加粗</li>
<li>页面布局结构扁平化</li>
<li>语义化</li>
<li>标题权重划分</li>
</ul>
<h3><a href="#robots" class="header-anchor">#</a><span id="robots">robots</span></h3><h4><a href="#shi-yong-robots-txt" class="header-anchor">#</a><span id="shi-yong-robots-txt">使用 robots.txt</span></h4><ul>
<li>告知搜索引擎“你可以对我这个站点上的哪些 URL 进行跟踪并索引”</li>
<li>所有主要的搜索引擎都能读取并遵守它，一天刷新好几次</li>
<li>存放位置</li>
<li>域名/robots.txt</li>
<li>语法<ul>
<li><a href="https://baijiahao.baidu.com/s?id=1645704782665020815&wfr=spider&for=pc">https://baijiahao.baidu.com/s?id=1645704782665020815&amp;wfr=spider&amp;for=pc</a></li>
</ul>
</li>
<li>用工具生成 robot.txt ，且可在 txt 中添加 sitemap</li>
</ul>
<h4><a href="#lt-meta-name-robots-content-noindex-follow-gt" class="header-anchor">#</a><span id="lt-meta-name-robots-content-noindex-follow-gt"><code>&lt;meta name=’robots’ content=’noindex,follow’ /&gt;</code></span></h4><ul>
<li>该 meta tag 只有少数引擎能识别，尽量使用 robots.txt</li>
<li>允许跟踪页面中的链接继续抓取：是 follow 否 nofollow</li>
<li>允许索引: 是 index 否 noindex</li>
</ul>
<h3><a href="#ti-gong-wang-zhan-sitemap-yong-gong-ju-sheng-cheng-ji-ke-sou-sheng-cheng-sitemap" class="header-anchor">#</a><span id="ti-gong-wang-zhan-sitemap-yong-gong-ju-sheng-cheng-ji-ke-sou-sheng-cheng-sitemap">提供网站 sitemap，用工具生成即可，搜 “生成 sitemap”</span></h3><h3><a href="#url-gua-dang-shi-yong-nofollow-jian-shao-bu-bi-yao-de-zhua-qu-gong-zuo" class="header-anchor">#</a><span id="url-gua-dang-shi-yong-nofollow-jian-shao-bu-bi-yao-de-zhua-qu-gong-zuo">URL 适当使用「nofollow」，减少不必要的抓取工作</span></h3><ul>
<li><code>&lt;a href=&quot;&quot; rel=&quot;nofollow&quot;&gt;</code></li>
</ul>
<h3><a href="#jin-liang-bu-shi-yong-dan-ye-mian-zeng-jia-ye-mian-dao-hang" class="header-anchor">#</a><span id="jin-liang-bu-shi-yong-dan-ye-mian-zeng-jia-ye-mian-dao-hang">尽量不使用单页面，增加页面导航</span></h3><p>可使用预渲染插件</p>
<h3><a href="#url-lian-jie-you-hua" class="header-anchor">#</a><span id="url-lian-jie-you-hua">URL 链接优化</span></h3><h3><a href="#ti-gao-wang-zhan-da-kai-su-du" class="header-anchor">#</a><span id="ti-gao-wang-zhan-da-kai-su-du">提高网站打开速度</span></h3><h1><a href="#sou-suo-yin-qing-dui-html-tag-de-ping-fen" class="header-anchor">#</a><span id="sou-suo-yin-qing-dui-html-tag-de-ping-fen">搜索引擎对 HTML tag 的评分</span></h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">内部链接文字：<span class="number">10</span>分</span><br><span class="line">标题title：<span class="number">10</span>分</span><br><span class="line">域名：<span class="number">7</span>分</span><br><span class="line">H1,H2字号标题：<span class="number">5</span>分</span><br><span class="line">每段首句：<span class="number">5</span>分</span><br><span class="line">路径或文件名：<span class="number">4</span>分</span><br><span class="line">相似度（关键词堆积）：<span class="number">4</span>分</span><br><span class="line">每句开头：<span class="number">1.5</span>分</span><br><span class="line">加粗或斜体：<span class="number">1</span>分</span><br><span class="line">文本用法(内容)：<span class="number">1</span>分</span><br><span class="line">title属性：<span class="number">1</span>分 (注意不是title&gt;, 是title属性, 比如a href=… title=”)</span><br><span class="line">alt标记：<span class="number">0.5</span>分</span><br><span class="line">Meta描述（Description属性）：<span class="number">0.5</span>分</span><br><span class="line">Meta关键词（Keywords属性）：<span class="number">0.05</span>分</span><br></pre></td></tr></table></figure>

<h1><a href="#cha-kan-zhi-ding-zhan-dian-sou-suo-jie-guo" class="header-anchor">#</a><span id="cha-kan-zhi-ding-zhan-dian-sou-suo-jie-guo">查看指定站点搜索结果</span></h1><ul>
<li><code>site:xxx.com</code></li>
</ul>
]]></content>
      <tags>
        <tag>SEO</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue</title>
    <url>/2021/08/26/Vue/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#fu-gai-zu-jian-ku-ivew-yang-shi">覆盖组件库 ivew 样式</a></li>
<li><a href="#vue-cha-jian">vue 插件</a></li>
<li><a href="#yang-shi-fu-gai-vue-de-scoped-he-deep">样式覆盖、Vue 的 scoped 和 /deep/</a></li>
<li><a href="#te-xing">特性</a></li>
<li><a href="#vue-zhong-yi-bu-chuan-props-diu-shi-shu-ju">Vue 中异步传 props 丢失数据</a></li>
<li><a href="#yin-ru-vue-min-js-shi-vue-devtools-hui-shi-xiao">引入 vue.min.js 时 vue-devtools 会失效</a></li>
<li><a href="#vue-router-history-mode">Vue router history mode</a></li>
<li><a href="#vuex">vuex</a></li>
<li><a href="#nexttick">nextTick</a></li>
</ul>
<!-- tocstop -->

</div>

<h1><a href="#fu-gai-zu-jian-ku-ivew-yang-shi" class="header-anchor">#</a><span id="fu-gai-zu-jian-ku-ivew-yang-shi">覆盖组件库 ivew 样式</span></h1><p>main.js 中。 <strong><em>跟 CSS 文件的引用次序有关</em></strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;view-design/dist/styles/iview.css&quot;</span>;</span><br><span class="line"><span class="comment">// 定制主题色</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./assets/customTheme/index.less&quot;</span>;</span><br></pre></td></tr></table></figure>

<h1><a href="#vue-cha-jian" class="header-anchor">#</a><span id="vue-cha-jian">vue 插件</span></h1><p><a href="https://github.com/vuejs/awesome-vue">https://github.com/vuejs/awesome-vue</a></p>
<h1><a href="#yang-shi-fu-gai-vue-de-scoped-he-deep" class="header-anchor">#</a><span id="yang-shi-fu-gai-vue-de-scoped-he-deep">样式覆盖、Vue 的 scoped 和 /deep/</span></h1><img src="/2021/08/26/Vue/Vue%E7%9A%84scoped%E5%92%8Cdeep.png" class width="1000" height="1000" title="image desc">

<h1><a href="#te-xing" class="header-anchor">#</a><span id="te-xing">特性</span></h1><img src="/2021/08/26/Vue/VueFeature.png" class width="1000" height="1000">

<h1><a href="#vue-zhong-yi-bu-chuan-props-diu-shi-shu-ju" class="header-anchor">#</a><span id="vue-zhong-yi-bu-chuan-props-diu-shi-shu-ju">Vue 中异步传 props 丢失数据</span></h1><ul>
<li>子组件加上 v-if, 如</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">v-if</span>=<span class="string">&quot;task.taskType === 21&quot;</span> <span class="attr">:taskDetail</span>=<span class="string">&quot;task&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>子组件中使用 watch</li>
</ul>
<h1><a href="#yin-ru-vue-min-js-shi-vue-devtools-hui-shi-xiao" class="header-anchor">#</a><span id="yin-ru-vue-min-js-shi-vue-devtools-hui-shi-xiao">引入 vue.min.js 时 vue-devtools 会失效</span></h1><h1><a href="#vue-router-history-mode" class="header-anchor">#</a><span id="vue-router-history-mode">Vue router history mode</span></h1><p>需要服务端支持，只需要服务端在遇到任何路由都返回 index.html 即可（前端为单页应用的话）</p>
<h1><a href="#vuex" class="header-anchor">#</a><span id="vuex">vuex</span></h1><p>默认情况下，模块内部的 action、mutation 和 getter 是注册在全局命名空间的——这样使得多个模块能够对同一 mutation 或 action 作出响应</p>
<h1><a href="#nexttick" class="header-anchor">#</a><span id="nexttick">nextTick</span></h1><p>值更新， 值对应的 dom 未更新， 此时你想基于<code>更新后的 dom</code>执行 A 函数，需将 A 函数放于 nextTick 内</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;channel-manage&quot;&gt;</span><br><span class="line">    channel-manage</span><br><span class="line">    &lt;div id&#x3D;&quot;next-tick-html&quot;&gt;&#123;&#123; &quot;showDelModal: &quot; &#125;&#125;&#123;&#123; showDelModal &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123; Vue, Component, Prop, Watch &#125; from &quot;vue-property-decorator&quot;;</span><br><span class="line">import &#123; State, Getter, Action &#125; from &quot;vuex-class&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; required even empty</span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line">export default class ChannelList extends Vue &#123;</span><br><span class="line">  showDelModal &#x3D; false;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; life hook</span><br><span class="line">  created() &#123;</span><br><span class="line">    this.showDelModal &#x3D; true;</span><br><span class="line"></span><br><span class="line">    console.log(&quot;no-next-tick-value&quot;, this.showDelModal);</span><br><span class="line">    console.log(&quot;no-next-tick-dom&quot;, document.getElementById(&quot;next-tick-html&quot;));</span><br><span class="line">    this.$nextTick(() &#x3D;&gt; &#123;</span><br><span class="line">      console.log(&quot;next-tick-value&quot;, this.showDelModal);</span><br><span class="line">      console.log(&quot;next-tick-dom&quot;, document.getElementById(&quot;next-tick-html&quot;));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue响应式及数据更新</title>
    <url>/2021/04/08/Vue%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8F%8A%E6%95%B0%E6%8D%AE%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->



<!-- tocstop -->

</div>

<img src="/2021/04/08/Vue%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8F%8A%E6%95%B0%E6%8D%AE%E6%9B%B4%E6%96%B0/Vue%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8F%8A%E6%95%B0%E6%8D%AE%E6%9B%B4%E6%96%B0.png" class width="800" height="1800" title="Vue响应式及数据更新">
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>cookie-session-token</title>
    <url>/2021/08/27/cookie-session-token/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#cookie-session-token-jwt">Cookie、Session、Token、JWT</a><ul>
<li><a href="#chang-yong-jian-quan-fang-shi">常用鉴权方式</a><ul>
<li><a href="#cookie-he-session">Cookie 和 Session</a></li>
<li><a href="#json-web-token">JSON Web Token</a></li>
</ul>
</li>
<li><a href="#duo-fu-wu-fen-bu-shi-xia-de-session-gong-xiang">多服务、分布式下的 session 共享</a></li>
<li><a href="#guan-bi-liu-lan-qi-session-xiao-shi">关闭浏览器，session 消失？</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->

</div>

<h1><a href="#cookie-session-token-jwt" class="header-anchor">#</a><span id="cookie-session-token-jwt">Cookie、Session、Token、JWT</span></h1><p><a href="https://juejin.cn/post/6844904034181070861">https://juejin.cn/post/6844904034181070861</a></p>
<h2><a href="#chang-yong-jian-quan-fang-shi" class="header-anchor">#</a><span id="chang-yong-jian-quan-fang-shi">常用鉴权方式</span></h2><p>在 web 前后端分离的项目中，基本都是用 token 标识用户</p>
<p>session 这种东西在传统的前后端耦合项目比较很常用</p>
<p>维持 session 会消耗内存</p>
<h3><a href="#cookie-he-session" class="header-anchor">#</a><span id="cookie-he-session">Cookie 和 Session</span></h3><p>Cookie - session_id - Session</p>
<p>服务器（生成） - Cookie - 浏览器（保存）</p>
<h3><a href="#json-web-token" class="header-anchor">#</a><span id="json-web-token">JSON Web Token</span></h3><p>session_id 匹配 user</p>
<h4><a href="#chang-jing" class="header-anchor">#</a><span id="chang-jing">场景</span></h4><p>用户在同一公司下的站点 A 登录后，可免登录该公司的其他站点</p>
<h4><a href="#chong-dian" class="header-anchor">#</a><span id="chong-dian">重点</span></h4><p><img src="https://33e9-dev-upload.oss-cn-beijing.aliyuncs.com/executeTask/image/f5/f52c465456ed411547aadfa8c2bbc3a9.jpg" alt="jwt"></p>
<!--<img src="https://33e9-dev-upload.oss-cn-beijing.aliyuncs.com/executeTask/image/f5/f52c465456ed411547aadfa8c2bbc3a9.jpg">-->

<h2><a href="#duo-fu-wu-fen-bu-shi-xia-de-session-gong-xiang" class="header-anchor">#</a><span id="duo-fu-wu-fen-bu-shi-xia-de-session-gong-xiang">多服务、分布式下的 session 共享</span></h2><p>有以下方案</p>
<p><code>login_session 放在各服务</code> 变动时广播复制到其他服务</p>
<p><code>login_session 放在某个服务</code> 在 A 服务登录，A 中生成 login_session，请求其他服务时先去 A 服务验证登录状态</p>
<p><code>所有 session 放缓存区</code> 将所有服务的 session 缓存在 Redis 集群</p>
<p><code>session 放数据库</code></p>
<h2><a href="#guan-bi-liu-lan-qi-session-xiao-shi" class="header-anchor">#</a><span id="guan-bi-liu-lan-qi-session-xiao-shi">关闭浏览器，session 消失？</span></h2><p>关闭浏览器 - cookie 丢失（看有效期） - session id 丢失 - 匹配不了服务器上对应的 session</p>
]]></content>
      <tags>
        <tag>网络运维</tag>
        <tag>cookie</tag>
      </tags>
  </entry>
  <entry>
    <title>dll</title>
    <url>/2021/09/04/dll/</url>
    <content><![CDATA[<p>加快本地构建打包速度</p>
]]></content>
      <tags>
        <tag>构建打包</tag>
      </tags>
  </entry>
  <entry>
    <title>echarts</title>
    <url>/2021/03/16/echarts/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#myecharts-js">myEcharts.js</a></li>
<li><a href="#main-js">main.js</a></li>
<li><a href="#zu-jian-zhong-shi-yong">组件中使用</a></li>
</ul>
<!-- tocstop -->

</div>

<h1><a href="#myecharts-js" class="header-anchor">#</a><span id="myecharts-js">myEcharts.js</span></h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> echarts <span class="keyword">from</span> <span class="string">&quot;echarts&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> install = <span class="function"><span class="keyword">function</span> (<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperties(Vue.prototype, &#123;</span><br><span class="line">    $chart: &#123;</span><br><span class="line">      <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="comment">// 柱状图</span></span><br><span class="line">          bar: <span class="function"><span class="keyword">function</span> (<span class="params">id, title, xAxis, yAxis, dataList</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.chart = echarts.init(<span class="built_in">document</span>.getElementById(id));</span><br><span class="line">            <span class="built_in">this</span>.chart.clear();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> optionData = &#123;</span><br><span class="line">              <span class="comment">// 直角坐标系内绘图网格，单个 grid 内最多可以放置上下两个 X 轴，左右两个 Y 轴。可以在网格上绘制折线图，柱状图，散点图（气泡图）。</span></span><br><span class="line">              <span class="comment">// 在 ECharts 2.x 里单个 echarts 实例中最多只能存在一个 grid 组件，在 ECharts 3 中可以存在任意个 grid 组件</span></span><br><span class="line">              grid: &#123;</span><br><span class="line">                <span class="comment">// width: 280,</span></span><br><span class="line">                <span class="comment">// left: &#x27;center&#x27;,</span></span><br><span class="line">              &#125;,</span><br><span class="line">              title: &#123;</span><br><span class="line">                text: title,</span><br><span class="line">                left: <span class="string">&quot;center&quot;</span>,</span><br><span class="line">                textStyle: &#123;</span><br><span class="line">                  fontSize: <span class="string">&quot;17px&quot;</span>,</span><br><span class="line">                  fontFamily: <span class="string">&quot;Microsoft YaHei&quot;</span>,</span><br><span class="line">                  fontWeight: <span class="number">400</span>,</span><br><span class="line">                  color: <span class="string">&quot;#333333&quot;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">              &#125;,</span><br><span class="line">              tooltip: &#123;</span><br><span class="line">                <span class="function"><span class="title">formatter</span>(<span class="params">params</span>)</span> &#123;</span><br><span class="line">                  <span class="keyword">return</span> params.name + <span class="string">&quot;&lt;br/&gt;值：&quot;</span> + params.value;</span><br><span class="line">                &#125;,</span><br><span class="line">                triggerOn: <span class="string">&quot;mousemove&quot;</span>,</span><br><span class="line">                extraCssText: <span class="string">&quot;text-align: left;&quot;</span>,</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="comment">// 缩放、滑动</span></span><br><span class="line">              dataZoom: [</span><br><span class="line">                &#123;</span><br><span class="line">                  type: <span class="string">&quot;slider&quot;</span>,</span><br><span class="line">                  start: <span class="number">0</span>,</span><br><span class="line">                  end: <span class="number">50</span>,</span><br><span class="line">                  show: <span class="literal">true</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  start: <span class="number">0</span>,</span><br><span class="line">                  end: <span class="number">50</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">              ],</span><br><span class="line">              xAxis: xAxis,</span><br><span class="line">              yAxis: yAxis,</span><br><span class="line">              series: [</span><br><span class="line">                &#123;</span><br><span class="line">                  data: dataList,</span><br><span class="line">                  type: <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">                  itemStyle: &#123;</span><br><span class="line">                    color: <span class="string">&quot;#2E6CFB&quot;</span>,</span><br><span class="line">                    barBorderRadius: [<span class="number">5</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">                  &#125;,</span><br><span class="line">                  <span class="comment">// 柱标签</span></span><br><span class="line">                  label: &#123;</span><br><span class="line">                    show: <span class="literal">true</span>,</span><br><span class="line">                    position: <span class="string">&quot;top&quot;</span>,</span><br><span class="line">                  &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">              ],</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">this</span>.chart.setOption(optionData);</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="comment">// 2折线图</span></span><br><span class="line">          mutiLine: <span class="function"><span class="keyword">function</span> (<span class="params">id, title, lineNames, xAxis, yAxis, series</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.chart = echarts.init(<span class="built_in">document</span>.getElementById(id));</span><br><span class="line">            <span class="built_in">this</span>.chart.clear();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> optionData = &#123;</span><br><span class="line">              backgroundColor: <span class="string">&quot;#fff&quot;</span>,</span><br><span class="line">              grid: &#123;</span><br><span class="line">                left: <span class="string">&quot;25&quot;</span>,</span><br><span class="line">                right: <span class="string">&quot;25&quot;</span>,</span><br><span class="line">                bottom: <span class="string">&quot;24&quot;</span>,</span><br><span class="line">                top: <span class="string">&quot;75&quot;</span>,</span><br><span class="line">                containLabel: <span class="literal">true</span>,</span><br><span class="line">              &#125;,</span><br><span class="line">              legend: &#123;</span><br><span class="line">                data: lineNames,</span><br><span class="line">                orient: <span class="string">&quot;horizontal&quot;</span>,</span><br><span class="line">                icon: <span class="string">&quot;rect&quot;</span>,</span><br><span class="line">                show: <span class="literal">true</span>,</span><br><span class="line">                left: <span class="number">20</span>,</span><br><span class="line">                top: <span class="number">25</span>,</span><br><span class="line">              &#125;,</span><br><span class="line">              title: &#123;</span><br><span class="line">                text: title || <span class="string">&quot;&quot;</span>,</span><br><span class="line">                left: <span class="string">&quot;18px&quot;</span>,</span><br><span class="line">                top: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">                textStyle: &#123;</span><br><span class="line">                  color: <span class="string">&quot;#999&quot;</span>,</span><br><span class="line">                  fontSize: <span class="number">12</span>,</span><br><span class="line">                  fontWeight: <span class="string">&quot;400&quot;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">              &#125;,</span><br><span class="line">              color: [<span class="string">&quot;#73A0FA&quot;</span>, <span class="string">&quot;#FFB761&quot;</span>],</span><br><span class="line">              tooltip: &#123;</span><br><span class="line">                trigger: <span class="string">&quot;axis&quot;</span>,</span><br><span class="line">                axisPointer: &#123;</span><br><span class="line">                  type: <span class="string">&quot;cross&quot;</span>,</span><br><span class="line">                  crossStyle: &#123;</span><br><span class="line">                    color: <span class="string">&quot;#999&quot;</span>,</span><br><span class="line">                  &#125;,</span><br><span class="line">                  lineStyle: &#123;</span><br><span class="line">                    type: <span class="string">&quot;dashed&quot;</span>,</span><br><span class="line">                  &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">              &#125;,</span><br><span class="line">              dataZoom: &#123;</span><br><span class="line">                start: <span class="number">0</span>,</span><br><span class="line">                type: <span class="string">&quot;inside&quot;</span>,</span><br><span class="line">              &#125;,</span><br><span class="line">              xAxis: xAxis,</span><br><span class="line">              yAxis: yAxis,</span><br><span class="line">              series: series,</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">this</span>.chart.setOption(optionData);</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  install,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1><a href="#main-js" class="header-anchor">#</a><span id="main-js">main.js</span></h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> myCharts <span class="keyword">from</span> <span class="string">&quot;./common/myCharts&quot;</span>;</span><br><span class="line">Vue.use(myCharts);</span><br></pre></td></tr></table></figure>

<h1><a href="#zu-jian-zhong-shi-yong" class="header-anchor">#</a><span id="zu-jian-zhong-shi-yong">组件中使用</span></h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$chart.mutiLine(<span class="string">&quot;line1&quot;</span>, <span class="string">&quot;&quot;</span>, [<span class="string">&quot;扫码次数&quot;</span>, <span class="string">&quot;留资人数&quot;</span>], xAxis, yAxis, [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">&quot;扫码次数&quot;</span>,</span><br><span class="line">    type: <span class="string">&quot;line&quot;</span>,</span><br><span class="line">    <span class="comment">// stack: &#x27;总量&#x27;,</span></span><br><span class="line">    data: <span class="built_in">this</span>.scanQrcodeData,</span><br><span class="line">    smooth: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">&quot;留资人数&quot;</span>,</span><br><span class="line">    type: <span class="string">&quot;line&quot;</span>,</span><br><span class="line">    <span class="comment">// 设置折线图不堆叠只需要将每一个stack的值设置为不一样的名称或者将stack属性删除即可</span></span><br><span class="line">    <span class="comment">// stack: &#x27;总量&#x27;,</span></span><br><span class="line">    data: <span class="built_in">this</span>.leaveCapitaData,</span><br><span class="line">    smooth: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>echarts</tag>
      </tags>
  </entry>
  <entry>
    <title>git</title>
    <url>/2021/08/27/git/</url>
    <content><![CDATA[<h1><a href="#can-kao" class="header-anchor">#</a><span id="can-kao">参考</span></h1><p><a href="https://backlog.com/git-tutorial/cn/intro/intro1_1.html">https://backlog.com/git-tutorial/cn/intro/intro1_1.html</a></p>
<p><a href="https://www.liaoxuefeng.com/wiki/896043488029600">https://www.liaoxuefeng.com/wiki/896043488029600</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// git clone</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看远程库的信息</span></span><br><span class="line"><span class="comment">// 远程仓库的默认名称是origin</span></span><br><span class="line"><span class="comment">// git remote</span></span><br><span class="line"><span class="comment">// git remote -v</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看分支情况</span></span><br><span class="line"><span class="comment">// git branch -a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 切换到分支</span></span><br><span class="line"><span class="comment">// git checkout 分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前状态</span></span><br><span class="line"><span class="comment">// git status</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 提交记录</span></span><br><span class="line"><span class="comment">// git log</span></span><br><span class="line"><span class="comment">// git log --pretty=oneline</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**************** 新增功能，创建 feature 分支 ********************/</span></span><br><span class="line"><span class="comment">// 新建并切换到分支 branch_name，新建的分支还没有关联到指定的远程分支的</span></span><br><span class="line"><span class="comment">// git checkout -b branch_name</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加进缓存</span></span><br><span class="line"><span class="comment">// git add .</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 提交</span></span><br><span class="line"><span class="comment">// git commit -m &quot;fix(price_manage):修正price_manage目录下的&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将分支推到远程</span></span><br><span class="line"><span class="comment">// git push origin branch_name</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*************** dev 合共 feature 分支 *********************/</span></span><br><span class="line"><span class="comment">// 切换到 dev 分支 （已关联到远程 dev）</span></span><br><span class="line"><span class="comment">// git checkout dev</span></span><br><span class="line"><span class="comment">// git pull</span></span><br><span class="line"><span class="comment">// 在当前分支即本地 dev 分支上，合并 branch_name 分支</span></span><br><span class="line"><span class="comment">// git merge branch_name</span></span><br><span class="line"><span class="comment">// git push</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**************** 修复 BUG ********************/</span></span><br><span class="line"><span class="comment">//  确定好在哪个分支上修复 bug,比如 dev,切换到 dev，从 dev 上创建临时分支 issue-xxx</span></span><br><span class="line"><span class="comment">//  修复完成，切换到 dev ，在 dev 上合并 issue-xxx 并删除该临时分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*************** 删除分支 *********************/</span></span><br><span class="line"><span class="comment">// 删除本地分支 new_store</span></span><br><span class="line"><span class="comment">// git branch -d new_store</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除远程分支 new_store</span></span><br><span class="line"><span class="comment">// git push origin --delete new_store</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/************** 修改用户信息 **********************/</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改 user.name</span></span><br><span class="line"><span class="comment"> * git config  --global user.name huanglanying</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 修改 user.email</span></span><br><span class="line"><span class="comment"> * git config  --global user.email huanglanying<span class="doctag">@hitour</span>.cc</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 查看</span></span><br><span class="line"><span class="comment"> * git config user.name</span></span><br><span class="line"><span class="comment"> * git config user.email</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/************* 工作栈 ***********************/</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 暂存工作到 stash 栈</span></span><br><span class="line"><span class="comment"> * git stash</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * stash 栈中只有一个工作时，从栈中恢复该工作到分支中，并从栈中删除之</span></span><br><span class="line"><span class="comment"> * git stash pop</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 查看栈中的所有工作</span></span><br><span class="line"><span class="comment"> * git stash list</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 恢复指定工作</span></span><br><span class="line"><span class="comment"> * git stash apply stash@&#123;0&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/************* 合并 ***********************/</span></span><br><span class="line"><span class="comment">// git merge --abort   //中止合并</span></span><br><span class="line"><span class="comment">// git reset --merge   //撤销合并</span></span><br><span class="line"><span class="comment">// git pull</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/************* 版本回退 ***********************/</span></span><br><span class="line"><span class="comment">// git reset --hard 3e744</span></span><br><span class="line"><span class="comment">// 3e744 为版本号前几位</span></span><br></pre></td></tr></table></figure>

<h2><a href="#cha-kan-yuan-cheng-yu-ben-di-fen-zhi-dui-ying-guan-xi" class="header-anchor">#</a><span id="cha-kan-yuan-cheng-yu-ben-di-fen-zhi-dui-ying-guan-xi">查看远程与本地分支对应关系</span></h2><p><code>git remote show origin</code><br>再运行一次 <code>git branch -a</code> 就能看到变化了</p>
<h2><a href="#shua-xin-yuan-cheng-fen-zhi-you-de-yuan-cheng-fen-zhi-yi-shan-chu-dan-ben-di-reng-xian-shi" class="header-anchor">#</a><span id="shua-xin-yuan-cheng-fen-zhi-you-de-yuan-cheng-fen-zhi-yi-shan-chu-dan-ben-di-reng-xian-shi">刷新远程分支（有的远程分支已删除但本地仍显示）</span></h2><p><code>git remote prune origin</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">lanying@lanyingdeMacBook-Pro some-project % git remote prune origin</span><br><span class="line">Pruning origin</span><br><span class="line">URL: git@xxx/some-project.git</span><br><span class="line"> * [pruned] origin/dev</span><br><span class="line"> * [pruned] origin/feat-0910</span><br><span class="line"> * [pruned] origin/<span class="built_in">test</span></span><br><span class="line">lanying@lanyingdeMacBook-Pro some-project %</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>html</title>
    <url>/2021/08/26/html/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#qing-qiu-tou-bu-fa-song-referer">请求头不发送 Referer</a></li>
<li><a href="#template-bu-yu-shu-ju-jie-gou-ou-he">template 不与数据结构耦合</a></li>
<li><a href="#bom-browser-object-model">BOM(browser object model)</a></li>
<li><a href="#liu-lan-qi-xuan-ran-liu-cheng">浏览器渲染流程</a></li>
<li><a href="#pre-biao-qian">pre 标签</a></li>
<li><a href="#html5-zhi-chi-mathml">HTML5 支持 MathML</a></li>
<li><a href="#html5-tuo-fang">HTML5 拖放</a></li>
<li><a href="#huo-qu-di-li-wei-zhi">获取地理位置</a></li>
<li><a href="#svg">SVG</a></li>
<li><a href="#embed-biao-qian">embed 标签</a></li>
</ul>
<!-- tocstop -->

</div>

<h1><a href="#qing-qiu-tou-bu-fa-song-referer" class="header-anchor">#</a><span id="qing-qiu-tou-bu-fa-song-referer">请求头不发送 Referer</span></h1><p><a href="https://segmentfault.com/q/1010000000123441">https://segmentfault.com/q/1010000000123441</a><br><a href="https://blog.csdn.net/qq_37236241/article/details/119330230">https://blog.csdn.net/qq_37236241/article/details/119330230</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">openWithoutReferer</span>(<span class="params">url</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.open(</span><br><span class="line">      <span class="string">&quot;javascript:window.name;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&lt;script&gt;location.replace(&#x27;&quot;</span> + url + <span class="string">&quot;&#x27;)&lt;/scr&quot;</span> + <span class="string">&quot;ipt&gt;&quot;</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1><a href="#template-bu-yu-shu-ju-jie-gou-ou-he" class="header-anchor">#</a><span id="template-bu-yu-shu-ju-jie-gou-ou-he">template 不与数据结构耦合</span></h1><p>除非动态生成的&amp;有较强一致性的如表格，一般建议平铺，嫌重复代码多的话就将其塞入小组件，外面引用小组件看起来就清爽些了</p>
<h1><a href="#bom-browser-object-model" class="header-anchor">#</a><span id="bom-browser-object-model">BOM(browser object model)</span></h1><p>BOM 包含 5 个东西</p>
<ul>
<li>location 管理 URL</li>
<li>navigator 管理浏览器</li>
<li>history 管理历史记录</li>
<li>screen 管理屏幕</li>
<li>window 管理浏览器所有的东西</li>
</ul>
<h1><a href="#liu-lan-qi-xuan-ran-liu-cheng" class="header-anchor">#</a><span id="liu-lan-qi-xuan-ran-liu-cheng">浏览器渲染流程</span></h1><img src="/2021/08/26/html/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B.png" class width="800" height="600" title="浏览器渲染流程">

<ul>
<li>CSS 解析不会影响 HTML 解析，但会阻塞 js 的加载（即要等前面的 CSS 加载完）</li>
<li>js 会阻塞 HTML 和 CSS 的解析</li>
</ul>
<p><a href="https://segmentfault.com/a/1190000010298038">https://segmentfault.com/a/1190000010298038</a></p>
<p><a href="https://blog.csdn.net/lucaslow/article/details/78307396">https://blog.csdn.net/lucaslow/article/details/78307396</a></p>
<h1><a href="#pre-biao-qian" class="header-anchor">#</a><span id="pre-biao-qian">pre 标签</span></h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;pre</span><br><span class="line">  style=&quot;</span><br><span class="line">                    text-align: left;</span><br><span class="line">                    appearance: none;</span><br><span class="line">                    white-space: pre-wrap;</span><br><span class="line">                    width: 100%;</span><br><span class="line">                    letter-spacing: normal;</span><br><span class="line">                    tab-size: 2;</span><br><span class="line">                    font-size: 14px;</span><br><span class="line">                    font-family: &#x27;Microsoft YaHei&#x27;;</span><br><span class="line">                    line-height: 1.5;</span><br><span class="line">                    word-break: break-all;</span><br><span class="line">                    &quot;</span><br><span class="line">&gt;</span><br><span class="line">营销内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1><a href="#html5-zhi-chi-mathml" class="header-anchor">#</a><span id="html5-zhi-chi-mathml">HTML5 支持 MathML</span></h1><h1><a href="#html5-tuo-fang" class="header-anchor">#</a><span id="html5-tuo-fang">HTML5 拖放</span></h1><p>拖放是 HTML5 标准的组成部分</p>
<h1><a href="#huo-qu-di-li-wei-zhi" class="header-anchor">#</a><span id="huo-qu-di-li-wei-zhi">获取地理位置</span></h1><p><code>navigator.geolocation.getCurrentPosition(successFuc, errorFuc, options)</code></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Geolocation/getCurrentPosition">https://developer.mozilla.org/zh-CN/docs/Web/API/Geolocation/getCurrentPosition</a></p>
<p>在桌面浏览器使用 geolocation 会遇到网络阻塞问题 （国内政策）, 在移动端是完全可以的</p>
<h1><a href="#svg" class="header-anchor">#</a><span id="svg">SVG</span></h1><p>用网页打开</p>
<h1><a href="#embed-biao-qian" class="header-anchor">#</a><span id="embed-biao-qian">embed 标签</span></h1><p><code>&lt;embed src=&quot;https://33e9-dev-upload.oss-cn-beijing.aliyuncs.com/executeTask/image/b9/b967216c5ca077f307785cdf8b817fd4.jpg&quot; width=&quot;640&quot; height=&quot;480&quot;&gt;</code></p>
<p>embed 标签只支持 PC 端，移动端无效？</p>
]]></content>
      <tags>
        <tag>html</tag>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>js</title>
    <url>/2021/04/22/js/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#string">String</a></li>
<li><a href="#nan">NaN</a></li>
<li><a href="#this">this</a></li>
<li><a href="#arguments">arguments</a></li>
<li><a href="#fa-bu-ding-yue">发布订阅</a></li>
<li><a href="#array">Array</a><ul>
<li><a href="#array-map-shi-fou-gai-bian-yuan-shu-zu">array.map 是否改变原数组</a></li>
<li><a href="#array-of">Array.of</a></li>
<li><a href="#find">find</a></li>
<li><a href="#findindex">findIndex</a></li>
<li><a href="#fill">fill</a></li>
<li><a href="#zhuan-cheng-yi-wei-shu-zu">转成一维数组</a></li>
<li><a href="#pai-xu">排序</a></li>
<li><a href="#qi-ta">其他</a></li>
</ul>
</li>
<li><a href="#object">Object</a><ul>
<li><a href="#object-is-yu">Object.is 与 ===</a></li>
<li><a href="#qian-kao-bei">浅拷贝</a></li>
<li><a href="#proto"><strong><em>proto</em></strong></a></li>
<li><a href="#fan-hui-dui-xiang-zi-shen-shu-xing-fei-ji-cheng">返回对象自身属性（非继承）</a></li>
<li><a href="#bian-li">遍历</a></li>
<li><a href="#dong-jie">冻结</a></li>
<li><a href="#object-values-keys-entries">Object.values/keys/entries</a></li>
</ul>
</li>
<li><a href="#rest-yun-suan-fu">rest 运算符</a></li>
<li><a href="#li-ji-zhi-xing-han-shu">立即执行函数</a></li>
<li><a href="#bi-bao">闭包</a></li>
<li><a href="#ding-yi-chu-shi-hua-fu-zhi">定义+初始化+赋值</a></li>
<li><a href="#new-chuang-jian-shi-li">new（创建实例）</a><ul>
<li><a href="#shi-li-huo-qu-yuan-xing-shu-xing-fang-fa">实例获取原型属性/方法</a></li>
<li><a href="#shi-li-huo-qu-shi-li-shu-xing-fang-fa">实例获取实例属性/方法</a></li>
</ul>
</li>
<li><a href="#li-ji-zhi-xing-han-shu-1">立即执行函数</a></li>
<li><a href="#shen-qian-kao-bei">深浅拷贝</a></li>
<li><a href="#yuan-xing">原型</a></li>
<li><a href="#dui-zhan">堆栈</a></li>
<li><a href="#apply-call-bind">apply-call-bind</a></li>
</ul>
<!-- tocstop -->

</div>

<h1><a href="#string" class="header-anchor">#</a><span id="string">String</span></h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字符串可看作数组的一种进行操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 替换</span></span><br><span class="line">replaceStr(<span class="string">&quot;.1.2.3&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;**&quot;</span>); <span class="comment">// &#x27;.1.2.3&#x27; → &quot;**1**2**3&quot;</span></span><br><span class="line"><span class="keyword">let</span> replaceStr = <span class="function"><span class="keyword">function</span> (<span class="params">str, before, after</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> str == <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> afterReplace = str.split(before).join(after);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;ERROR: 要替换的第一个参数不是字符串&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> afterReplace;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析 \</span></span><br><span class="line"><span class="built_in">String</span>.raw<span class="string">`Hi\n<span class="subst">$&#123;<span class="number">2</span> + <span class="number">3</span>&#125;</span>!`</span>;</span><br><span class="line"><span class="comment">// 返回 &quot;Hi\\n5!&quot;</span></span><br><span class="line"><span class="built_in">String</span>.raw<span class="string">`Hi\\n`</span>;</span><br><span class="line"><span class="comment">// 返回 &quot;Hi\\\\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="string">&quot;Hello world!&quot;</span>;</span><br><span class="line">s.startsWith(<span class="string">&quot;world&quot;</span>, <span class="number">6</span>); <span class="comment">// true</span></span><br><span class="line">s.endsWith(<span class="string">&quot;Hello&quot;</span>, <span class="number">5</span>); <span class="comment">// true</span></span><br><span class="line">s.includes(<span class="string">&quot;Hello&quot;</span>, <span class="number">6</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重复</span></span><br><span class="line"><span class="string">&quot;na&quot;</span>.repeat(<span class="number">2.9</span>); <span class="comment">// &quot;nana&quot;</span></span><br><span class="line"><span class="string">&quot;x&quot;</span>.repeat(<span class="number">3</span>); <span class="comment">// &quot;xxx&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 头尾补全</span></span><br><span class="line"><span class="string">&quot;x&quot;</span>.padStart(<span class="number">5</span>, <span class="string">&quot;ab&quot;</span>); <span class="comment">// &#x27;ababx&#x27;</span></span><br><span class="line"><span class="string">&quot;x&quot;</span>.padStart(<span class="number">4</span>, <span class="string">&quot;ab&quot;</span>); <span class="comment">// &#x27;abax&#x27;</span></span><br><span class="line"><span class="string">&quot;x&quot;</span>.padEnd(<span class="number">5</span>, <span class="string">&quot;ab&quot;</span>); <span class="comment">// &#x27;xabab&#x27;</span></span><br><span class="line"><span class="string">&quot;x&quot;</span>.padEnd(<span class="number">4</span>, <span class="string">&quot;ab&quot;</span>); <span class="comment">// &#x27;xaba&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 消除空格</span></span><br><span class="line"><span class="keyword">const</span> s = <span class="string">&quot;  abc  &quot;</span>;</span><br><span class="line">s.trim(); <span class="comment">// &quot;abc&quot;</span></span><br><span class="line">s.trimStart(); <span class="comment">// &quot;abc  &quot;</span></span><br><span class="line">s.trimEnd(); <span class="comment">// &quot;  abc&quot;</span></span><br></pre></td></tr></table></figure>

<h1><a href="#nan" class="header-anchor">#</a><span id="nan">NaN</span></h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// NaN === NaN // false</span></span><br><span class="line"><span class="comment">// isNaN(NaN) // true</span></span><br><span class="line"><span class="comment">// 该函数接收一个参数，这个参数可以是任何类型，</span></span><br><span class="line"><span class="comment">// 如果接收的参数是数字类型，返回false;</span></span><br><span class="line"><span class="comment">// 如果是其他类型（除了数字的任何其他类型），则返回true</span></span><br><span class="line"><span class="comment">// isNaN(&#x27;xyz&#x27;) // true</span></span><br></pre></td></tr></table></figure>

<h1><a href="#this" class="header-anchor">#</a><span id="this">this</span></h1><p>非箭头函数：会变动，运行时确定，可用 call() 改写后确定</p>
<p>箭头函数：定义时确定，本身没绑定 this，取父级的 context，最近的 {} 即为父级</p>
<h1><a href="#arguments" class="header-anchor">#</a><span id="arguments">arguments</span></h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> publish = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">arguments</span>)); <span class="comment">// [object Arguments]</span></span><br><span class="line">  <span class="comment">// 将 arguments 对象转换为真正的数组</span></span><br><span class="line">  <span class="keyword">let</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">publish();</span><br></pre></td></tr></table></figure>

<h1><a href="#fa-bu-ding-yue" class="header-anchor">#</a><span id="fa-bu-ding-yue">发布订阅</span></h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> PubSub = &#123;</span><br><span class="line">  subscribe: <span class="function"><span class="keyword">function</span> (<span class="params">ev, callback</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 创建 _callbacks 对象，除非它已经存在了</span></span><br><span class="line">    <span class="keyword">let</span> calls = <span class="built_in">this</span>._callbacks || (<span class="built_in">this</span>._callbacks = &#123;&#125;);</span><br><span class="line">    <span class="comment">// 针对给定的事件 key 创建一个数组，除非这个数组已经存在</span></span><br><span class="line">    <span class="comment">// 然后将回调函数追加到这个数组中</span></span><br><span class="line">    (<span class="built_in">this</span>._callbacks[ev] || (<span class="built_in">this</span>._callbacks[ev] = [])).push(callback);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  publish: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 将 arguments 对象转换为真正的数组</span></span><br><span class="line">    <span class="keyword">let</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 拿出第 1 个参数，即事件名称</span></span><br><span class="line">    <span class="keyword">let</span> ev = args.shift();</span><br><span class="line">    <span class="comment">// 如果不存在 _callbacks 对象，则返回</span></span><br><span class="line">    <span class="comment">// 或者如果不包含给定事件对应的数组</span></span><br><span class="line">    <span class="keyword">let</span> list, calls, i, l;</span><br><span class="line">    <span class="keyword">if</span> (!(calls = <span class="built_in">this</span>._callbacks)) <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">if</span> (!(list = <span class="built_in">this</span>._callbacks[ev])) <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    <span class="comment">// 触发回调</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, l = list.length; i &lt; l; i++) list[i].apply(<span class="built_in">this</span>, args);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">PubSub.subscribe(<span class="string">&quot;wem&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;Wem!&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">PubSub.publish(<span class="string">&quot;wem&quot;</span>);</span><br></pre></td></tr></table></figure>

<h1><a href="#array" class="header-anchor">#</a><span id="array">Array</span></h1><h2><a href="#array-map-shi-fou-gai-bian-yuan-shu-zu" class="header-anchor">#</a><span id="array-map-shi-fou-gai-bian-yuan-shu-zu">array.map 是否改变原数组</span></h2><p>map 不修改调用它的原数组本身（当然可以在 callback 执行时改变原数组）</p>
<h2><a href="#array-of" class="header-anchor">#</a><span id="array-of">Array.of</span></h2><p><code>Array.of()</code>基本上可以用来替代<code>Array()</code>或<code>new Array()</code>，并且不存在由于参数不同而导致的重载。它的行为非常统一</p>
<h2><a href="#find" class="header-anchor">#</a><span id="find">find</span></h2><p>返回第一个符合条件的数组成员</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">4</span>, -<span class="number">5</span>, <span class="number">10</span>].find(<span class="function">(<span class="params">n</span>) =&gt;</span> n &lt; <span class="number">0</span>);</span><br><span class="line"><span class="comment">// -5</span></span><br></pre></td></tr></table></figure>

<h2><a href="#findindex" class="header-anchor">#</a><span id="findindex">findIndex</span></h2><p>返回第一个符合条件的数组成员的位置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>].findIndex(<span class="function"><span class="keyword">function</span> (<span class="params">value, index, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">9</span>;</span><br><span class="line">&#125;); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<h2><a href="#fill" class="header-anchor">#</a><span id="fill">fill</span></h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>].fill(<span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>); <span class="comment">// [&#x27;a&#x27;, 7, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure>

<h2><a href="#zhuan-cheng-yi-wei-shu-zu" class="header-anchor">#</a><span id="zhuan-cheng-yi-wei-shu-zu">转成一维数组</span></h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回一个新数组</span></span><br><span class="line"><span class="comment">// 如果不管有多少层嵌套，都要转成一维数组，可以用Infinity关键字作为参数</span></span><br><span class="line">[<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, [<span class="number">5</span>]]]]].flat(<span class="literal">Infinity</span>);</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>

<h2><a href="#pai-xu" class="header-anchor">#</a><span id="pai-xu">排序</span></h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&quot;peach&quot;</span>, <span class="string">&quot;straw&quot;</span>, <span class="string">&quot;apple&quot;</span>, <span class="string">&quot;spork&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stableSorting = <span class="function">(<span class="params">s1, s2</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (s1[<span class="number">0</span>] &lt; s2[<span class="number">0</span>]) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">arr.sort(stableSorting);</span><br><span class="line"><span class="comment">// [&quot;apple&quot;, &quot;peach&quot;, &quot;straw&quot;, &quot;spork&quot;]</span></span><br></pre></td></tr></table></figure>

<h2><a href="#qi-ta" class="header-anchor">#</a><span id="qi-ta">其他</span></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 首操作 shift unshift</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 尾操作 pop push</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序 sort</span></span><br><span class="line"><span class="comment">// sort 可以接收一个比较函数来实现自定义的排序</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">11</span>, <span class="number">20</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">30</span>];</span><br><span class="line"><span class="comment">// 大到小</span></span><br><span class="line">arr.sort(<span class="function">(<span class="params">x, y</span>) =&gt;</span> y - x); <span class="comment">// &gt;&gt; Array(6) [ 30, 20, 11, 5, 3, 1 ]</span></span><br><span class="line"><span class="comment">// 小到大</span></span><br><span class="line">arr.sort(<span class="function">(<span class="params">x, y</span>) =&gt;</span> x - y); <span class="comment">// &gt;&gt; Array(6) [ 1, 3, 5, 11, 20, 30 ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 翻转 reserve</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接 concat</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> newArr = arr.concat([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入</span></span><br><span class="line">splice(<span class="number">2</span>, <span class="number">0</span>, <span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>); <span class="comment">// 会从当前数组的位置2开始插入字符串&quot;red&quot;和&quot;green&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 切片</span></span><br><span class="line"><span class="comment">// s.slice(开始下标, 结束下标)</span></span><br><span class="line">s.slice(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">s.slice(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// 省略下标参数意思是取到底</span></span><br><span class="line">s.slice(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成</span></span><br><span class="line"><span class="comment">// 只要一个对象有length，Array.from就能把它变成一个数组，返回新的数组</span></span><br><span class="line"><span class="comment">// 对 String，Set，Map 也可以</span></span><br><span class="line"><span class="keyword">let</span> likeArr = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">&quot;a&quot;</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">&quot;b&quot;</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">&quot;c&quot;</span>,</span><br><span class="line">  length: <span class="number">3</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成</span></span><br><span class="line"><span class="comment">// Array.of 总是返回参数值组成的数组</span></span><br><span class="line"><span class="built_in">Array</span>.of(); <span class="comment">// []</span></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="literal">undefined</span>); <span class="comment">// [undefined]</span></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="number">3</span>); <span class="comment">// [3]</span></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>); <span class="comment">// [3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 复制</span></span><br><span class="line"><span class="comment">// Array.copyWithin(target, start = 0, end = this.length)</span></span><br><span class="line"><span class="comment">// 将指定位置的数组项复制到其他位置，会覆盖原数组项，然后返回当前数组。使用该方法会修改当前数组</span></span><br><span class="line"><span class="comment">// （1）target（必需）：从该位置开始替换数据。如果为负值，表示倒数。</span></span><br><span class="line"><span class="comment">// （2）start（可选）：从该位置开始读取数据，默认为 0。如果为负值，表示倒数。</span></span><br><span class="line"><span class="comment">// （3）end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示倒数。</span></span><br><span class="line"><span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;, &#x27;g&#x27;].copyWithin(0, 3) //  [&quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 填充</span></span><br><span class="line"><span class="comment">// [1,2,3,4,5].fill(&#x27;a&#x27;); // [&quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;]</span></span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5].fill(&#x27;a&#x27;, 2, 4); // [1, 2, &quot;a&quot;, &quot;a&quot;, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 序号</span></span><br><span class="line"><span class="comment">// [1, 4, -5, 10].find((n) =&gt; n &lt; 0) // -5</span></span><br><span class="line"><span class="comment">// [1, 4, -5, 10].find((n) =&gt; n &lt; -10) // undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 序号</span></span><br><span class="line"><span class="comment">// findIndex</span></span><br><span class="line"><span class="comment">// 返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回 - 1</span></span><br><span class="line"><span class="comment">// findIndex 可借助 Object.is 识别 NaN, indexOf 不可以</span></span><br><span class="line"><span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, NaN, &#x27;c&#x27;].findIndex(y =&gt; Object.is(NaN, y)) // 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含</span></span><br><span class="line"><span class="comment">// includes</span></span><br><span class="line"><span class="comment">// [NaN].includes(NaN) // true</span></span><br><span class="line"><span class="comment">// [NaN].indexOf(NaN)  // -1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// map</span></span><br><span class="line"><span class="comment">// 创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果</span></span><br><span class="line"><span class="keyword">const</span> new_array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function">(<span class="params">x</span>) =&gt;</span> x * x);</span><br><span class="line"><span class="comment">// Array(3)[1, 4, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// filter</span></span><br><span class="line"><span class="comment">// 创建一个新数组, 其包含通过所提供函数实现的测试的所有元素</span></span><br><span class="line"><span class="keyword">const</span> new_array2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].filter(<span class="function">(<span class="params">x</span>) =&gt;</span> x &gt; <span class="number">1</span>);</span><br><span class="line"><span class="comment">// Array [ 2, 3 ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// reduce</span></span><br><span class="line"><span class="comment">// reduce() 方法对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值</span></span><br><span class="line"><span class="keyword">const</span> array1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">accumulator, currentValue</span>) =&gt;</span> accumulator + currentValue;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 + 2 + 3 + 4</span></span><br><span class="line"><span class="built_in">console</span>.log(array1.reduce(reducer));</span><br><span class="line"><span class="comment">// expected output: 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5 + 1 + 2 + 3 + 4</span></span><br><span class="line"><span class="built_in">console</span>.log(array1.reduce(reducer, <span class="number">5</span>));</span><br><span class="line"><span class="comment">// expected output: 15</span></span><br></pre></td></tr></table></figure>

<h1><a href="#object" class="header-anchor">#</a><span id="object">Object</span></h1><h2><a href="#object-is-yu" class="header-anchor">#</a><span id="object-is-yu">Object.is 与 ===</span></h2><p>不同之处只有两个：</p>
<ul>
<li>+0 不等于-0</li>
<li>NaN 等于自身</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.is(<span class="string">&quot;xixi&quot;</span>, <span class="string">&quot;xixi&quot;</span>); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">Object</span>.is(&#123;&#125;, &#123;&#125;) + <span class="comment">//false</span></span><br><span class="line">  <span class="number">0</span> ===</span><br><span class="line">  -<span class="number">0</span>; <span class="comment">//true</span></span><br><span class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span>; <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.is(+<span class="number">0</span>, -<span class="number">0</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2><a href="#qian-kao-bei" class="header-anchor">#</a><span id="qian-kao-bei">浅拷贝</span></h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 浅拷贝</span></span><br><span class="line"><span class="built_in">Object</span>.assign(target, ...sources);</span><br></pre></td></tr></table></figure>

<h2><a href="#proto" class="header-anchor">#</a><span id="proto"><strong><em>proto</em></strong></span></h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// __proto__ 建议换成</span></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(); <span class="comment">// （写操作）</span></span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(); <span class="comment">// （读操作）</span></span><br><span class="line"><span class="built_in">Object</span>.create(); <span class="comment">// （生成操作）</span></span><br></pre></td></tr></table></figure>

<h2><a href="#fan-hui-dui-xiang-zi-shen-shu-xing-fei-ji-cheng" class="header-anchor">#</a><span id="fan-hui-dui-xiang-zi-shen-shu-xing-fei-ji-cheng">返回对象自身属性（非继承）</span></h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回指定对象所有自身属性（非继承属性）的描述对象</span></span><br><span class="line"><span class="comment">// 自身属性、静态属性应该是一个意思</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor();</span><br></pre></td></tr></table></figure>

<h2><a href="#bian-li" class="header-anchor">#</a><span id="bian-li">遍历</span></h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 遍历 keys（不含继承的）</span></span><br><span class="line"><span class="comment">// Object.keys()</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">foo</span>: <span class="string">&quot;bar&quot;</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.keys(obj); <span class="comment">// [&quot;foo&quot;, &quot;baz&quot;]</span></span><br><span class="line"><span class="comment">// 遍历 values（不含继承的）</span></span><br><span class="line"><span class="built_in">Object</span>.values(obj);</span><br><span class="line"><span class="comment">// 遍历 entries（不含继承的）</span></span><br><span class="line"><span class="built_in">Object</span>.entries(obj); <span class="comment">// [[&quot;foo&quot;, &quot;baz&quot;], [ &quot;baz&quot;, 42 ]]</span></span><br></pre></td></tr></table></figure>

<h2><a href="#dong-jie" class="header-anchor">#</a><span id="dong-jie">冻结</span></h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 冻结</span></span><br><span class="line"><span class="built_in">Object</span>.freeze(obj);</span><br><span class="line"><span class="comment">// 作为参数传递的对象与返回的对象都被冻结</span></span><br><span class="line"><span class="comment">// 所以不必保存返回的对象（因为两个对象全等）</span></span><br><span class="line"><span class="keyword">var</span> o = <span class="built_in">Object</span>.freeze(obj);</span><br><span class="line">o === obj; <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.isFrozen(obj); <span class="comment">// === true</span></span><br></pre></td></tr></table></figure>

<h2><a href="#object-values-keys-entries" class="header-anchor">#</a><span id="object-values-keys-entries">Object.values/keys/entries</span></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.values(&#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">4</span> &#125;);</span><br><span class="line"><span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"><span class="built_in">JSON</span>.stringify(<span class="built_in">Object</span>.entries(&#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">4</span> &#125;));</span><br><span class="line"><span class="comment">// &quot;[[\&quot;x\&quot;,1],[\&quot;y\&quot;,2],[\&quot;a\&quot;,3],[\&quot;b\&quot;,4]]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.keys(&#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">4</span> &#125;);</span><br><span class="line"><span class="comment">// [&quot;x&quot;, &quot;y&quot;, &quot;a&quot;, &quot;b&quot;]</span></span><br></pre></td></tr></table></figure>

<h1><a href="#rest-yun-suan-fu" class="header-anchor">#</a><span id="rest-yun-suan-fu">rest 运算符</span></h1><p>与扩展符都是 <code>...</code> ，作用相反，用于代替 arguments 变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">bar = <span class="function"><span class="keyword">function</span> (<span class="params">a, ...args</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="built_in">console</span>.log(args);</span><br><span class="line">&#125;;</span><br><span class="line">bar(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//[ 2, 3, 4 ]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;Li&quot;</span>, <span class="attr">age</span>: <span class="number">10</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;Hu&quot;</span>, <span class="attr">age</span>: <span class="number">12</span> &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> arr1 = arr.map(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  item.age = item.age + <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">return</span> item;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(arr));</span><br><span class="line"><span class="comment">// &quot;[&#123;\&quot;name\&quot;:\&quot;Li\&quot;,\&quot;age\&quot;:12&#125;,&#123;\&quot;name\&quot;:\&quot;Hu\&quot;,\&quot;age\&quot;:14&#125;]&quot;</span></span><br></pre></td></tr></table></figure>

<h1><a href="#li-ji-zhi-xing-han-shu" class="header-anchor">#</a><span id="li-ji-zhi-xing-han-shu">立即执行函数</span></h1><p>立即执行函数其实就是一个语句</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 变量可以这样传递</span></span><br><span class="line"><span class="comment">// 引入全局变量</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">3</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log($);</span><br><span class="line">&#125;)(a); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出为全局变量，直接挂在 window 下</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">$, <span class="built_in">exports</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">exports</span>.Foo = <span class="string">&quot;wem&quot;</span>;</span><br><span class="line">&#125;)(jQuery, <span class="built_in">window</span>);</span><br></pre></td></tr></table></figure>

<h1><a href="#bi-bao" class="header-anchor">#</a><span id="bi-bao">闭包</span></h1><ul>
<li>函数 A 有（或返回）内部函数 B，函数 B 中使用了函数 A 的变量 a，这种情况成为闭包</li>
<li>注意不同的闭包实例 a 变量的值</li>
<li>执行的函数或实例被回收后，a 变量才会被回收</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&quot;Mozilla&quot;</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">displayName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(name);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 执行的函数</span></span><br><span class="line">  displayName();</span><br><span class="line">&#125;</span><br><span class="line">init();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意不同的闭包实例 a 变量的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">1</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(count);</span><br><span class="line">    count = count + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> display;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> myFunc = makeFunc(); <span class="comment">// 实例</span></span><br><span class="line">myFunc(); <span class="comment">// 1</span></span><br><span class="line">myFunc(); <span class="comment">// 2</span></span><br><span class="line">myFunc(); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeAdder</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> add5 = makeAdder(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">var</span> add10 = makeAdder(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(add5(<span class="number">2</span>)); <span class="comment">// 7</span></span><br><span class="line"><span class="built_in">console</span>.log(add10(<span class="number">2</span>)); <span class="comment">// 12</span></span><br></pre></td></tr></table></figure>

<h1><a href="#ding-yi-chu-shi-hua-fu-zhi" class="header-anchor">#</a><span id="ding-yi-chu-shi-hua-fu-zhi">定义+初始化+赋值</span></h1><ul>
<li>与通过 var 声明的有初始化值 undefined 的变量不同，通过 let 声明的变量直到它们的定义被执行时才初始化</li>
<li>const 没有赋值这一过程</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(z); <span class="comment">// undefined,即 z 被初始化为 undefined</span></span><br><span class="line"><span class="keyword">var</span> z = <span class="string">&quot;z&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(z); <span class="comment">// z</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>; <span class="comment">// 不会报 “重复定义” 的错</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认为通过 var 定义，挂在 global 下</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> undeclaredVariable); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<h1><a href="#new-chuang-jian-shi-li" class="header-anchor">#</a><span id="new-chuang-jian-shi-li">new（创建实例）</span></h1><p>比如 <code>let newObj = new Shape()</code><br>以下是 new 的目的所在</p>
<h2><a href="#shi-li-huo-qu-yuan-xing-shu-xing-fang-fa" class="header-anchor">#</a><span id="shi-li-huo-qu-yuan-xing-shu-xing-fang-fa">实例获取原型属性/方法</span></h2><p><code>emptyObj.__proto__ = Shape.prototype</code></p>
<h2><a href="#shi-li-huo-qu-shi-li-shu-xing-fang-fa" class="header-anchor">#</a><span id="shi-li-huo-qu-shi-li-shu-xing-fang-fa">实例获取实例属性/方法</span></h2><p>临时空对象 emptyObj， <code>替换 this</code> ，返回 emptyObj</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Shape</span>(<span class="params">inst_name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">  <span class="built_in">this</span>.x = <span class="string">&quot;x,实例属性&quot;</span>;</span><br><span class="line">  <span class="built_in">this</span>.inst_name = <span class="built_in">String</span>(inst_name);</span><br><span class="line">  <span class="comment">// 执行时，work.call(this) 换成 work.call(emptyObj)</span></span><br><span class="line">  <span class="built_in">this</span>.work = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;work,实例方法&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1><a href="#li-ji-zhi-xing-han-shu" class="header-anchor">#</a><span id="li-ji-zhi-xing-han-shu">立即执行函数</span></h1><p>优点：独立的作用域，不会污染全局变量（第一个括号内）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> age = <span class="number">12</span>;</span><br><span class="line">  <span class="keyword">var</span> name = &#123;</span><br><span class="line">    first: <span class="string">&quot;Barry&quot;</span>,</span><br><span class="line">    last: <span class="string">&quot;King&quot;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    name,</span><br><span class="line">    age,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值（执行后的返回）</span></span><br><span class="line"><span class="keyword">let</span> r = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> age = <span class="number">12</span>;</span><br><span class="line">  <span class="keyword">var</span> name = &#123;</span><br><span class="line">    first: <span class="string">&quot;Barry&quot;</span>,</span><br><span class="line">    last: <span class="string">&quot;King&quot;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    name,</span><br><span class="line">    age,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<h1><a href="#shen-qian-kao-bei" class="header-anchor">#</a><span id="shen-qian-kao-bei">深浅拷贝</span></h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 浅拷贝</span></span><br><span class="line"><span class="comment">// 1.Object.clone</span></span><br><span class="line"><span class="comment">// 2.Object.assign</span></span><br><span class="line"><span class="comment">// 3.扩展符号，比如 let b = [...a],就拷贝了 a 给 b</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 深拷贝</span></span><br><span class="line"><span class="comment">// 1.JSON.parse(JSON.stringify(object))</span></span><br><span class="line"><span class="comment">//    stringify 后对象转为字符串，为基本类型，此时再 parse 成新对象时，就不会与老对象共用指针了</span></span><br><span class="line"><span class="comment">// 缺点：</span></span><br><span class="line"><span class="comment">//    会忽略 undefined</span></span><br><span class="line"><span class="comment">//    不能序列化函数</span></span><br><span class="line"><span class="comment">//    不能解决循环引用的对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.如果确定没有 循环引用，那就用这个吧</span></span><br><span class="line"><span class="comment">//deep copy深拷贝</span></span><br><span class="line"><span class="keyword">var</span> deepCopy = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(obj); <span class="comment">//得到obj里所有的keys</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> newObject = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = keys[i];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[key] === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">      newObject[key] = deepCopy(obj[key]); <span class="comment">// 此处递归</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      newObject[key] = obj[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newObject;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.最通用的，但对性能有影响，用</span></span><br><span class="line"><span class="comment">// lodash 的 _.cloneDeep(value) 函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.如果不想引入 lodash 库，那就用下面这个吧，</span></span><br><span class="line"><span class="comment">// 保持引用关系</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cloneForce</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// =============</span></span><br><span class="line">  <span class="keyword">const</span> uniqueList = []; <span class="comment">// 用来去重</span></span><br><span class="line">  <span class="comment">// =============</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> root = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 循环数组</span></span><br><span class="line">  <span class="keyword">const</span> loopList = [</span><br><span class="line">    &#123;</span><br><span class="line">      parent: root,</span><br><span class="line">      key: <span class="literal">undefined</span>,</span><br><span class="line">      data: x,</span><br><span class="line">    &#125;,</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (loopList.length) &#123;</span><br><span class="line">    <span class="comment">// 深度优先</span></span><br><span class="line">    <span class="keyword">const</span> node = loopList.pop();</span><br><span class="line">    <span class="keyword">const</span> parent = node.parent;</span><br><span class="line">    <span class="keyword">const</span> key = node.key;</span><br><span class="line">    <span class="keyword">const</span> data = node.data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化赋值目标，key为undefined则拷贝到父元素，否则拷贝到子元素</span></span><br><span class="line">    <span class="keyword">let</span> res = parent;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> key !== <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">      res = parent[key] = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// =============</span></span><br><span class="line">    <span class="comment">// 数据已经存在</span></span><br><span class="line">    <span class="keyword">let</span> uniqueData = find(uniqueList, data);</span><br><span class="line">    <span class="keyword">if</span> (uniqueData) &#123;</span><br><span class="line">      parent[key] = uniqueData.target;</span><br><span class="line">      <span class="keyword">continue</span>; <span class="comment">// 中断本次循环</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据不存在</span></span><br><span class="line">    <span class="comment">// 保存源数据，在拷贝数据中对应的引用</span></span><br><span class="line">    uniqueList.push(&#123;</span><br><span class="line">      source: data,</span><br><span class="line">      target: res,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// =============</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> data) &#123;</span><br><span class="line">      <span class="keyword">if</span> (data.hasOwnProperty(k)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> data[k] === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">          <span class="comment">// 下一次循环</span></span><br><span class="line">          loopList.push(&#123;</span><br><span class="line">            parent: res,</span><br><span class="line">            key: k,</span><br><span class="line">            data: data[k],</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          res[k] = data[k];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">find</span>(<span class="params">arr, item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i].source === item) &#123;</span><br><span class="line">      <span class="keyword">return</span> arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1><a href="#yuan-xing" class="header-anchor">#</a><span id="yuan-xing">原型</span></h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">每个函数</span></span><br><span class="line"><span class="comment">都有 prototype 属性，除了 Function.prototype.bind() ，该属性指向原型。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">每个对象</span></span><br><span class="line"><span class="comment">都有 __proto__ 属性，指向了创建该对象的构造函数的原型。</span></span><br><span class="line"><span class="comment">其实这个属性指向了[[prototype]]，但是[[prototype]] 是内部属性，我们并不能访问到，所以使用 _proto_ 来访问。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">原型链</span></span><br><span class="line"><span class="comment">对象可以通过 __proto__ 来寻找不属于该对象的属性，__proto__ 将对象连接起来组成了原型链</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Object 是所有对象的爸爸，所有对象都可以通过 __proto__ 找到它</span></span><br><span class="line"><span class="comment">Function 是所有函数的爸爸，所有函数都可以通过 __proto__ 找到它</span></span><br><span class="line"><span class="comment">Function.prototype 和 Object.prototype 是两个特殊的对象，他们由引擎来创建</span></span><br><span class="line"><span class="comment">除了以上两个特殊对象，其他对象都是通过构造器 new 出来的</span></span><br><span class="line"><span class="comment">函数的 prototype 是一个对象，也就是原型</span></span><br><span class="line"><span class="comment">对象的 __proto__ 指向原型， __proto__ 将对象和原型连接起来组成了原型链</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Object.prototype 的 __proto__  属性是一个访问器属性（一个getter函数和一个setter函数）</span></span><br><span class="line"><span class="comment"> 暴露了通过它访问的对象的内部[[Prototype]] (一个对象或 null)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Shape</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">  <span class="built_in">this</span>.x = <span class="number">999</span>;</span><br><span class="line">  <span class="built_in">this</span>.y = <span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newObj = <span class="keyword">new</span> Shape();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数的构造函数往上找</span></span><br><span class="line">newObj.constructor; <span class="comment">// function Shape()</span></span><br><span class="line">Shape.constructor; <span class="comment">// function Function()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数的原型的构造函数是函数自己</span></span><br><span class="line">Shape.prototype.constructor; <span class="comment">// function Shape()</span></span><br><span class="line">newObj.__proto__.constructor; <span class="comment">// function Shape()</span></span><br></pre></td></tr></table></figure>

<h1><a href="#dui-zhan" class="header-anchor">#</a><span id="dui-zhan">堆栈</span></h1><img src="/2021/04/22/js/%E6%A0%88%E5%92%8C%E5%A0%86.png" class width="800" height="800">

<h1><a href="#apply-call-bind" class="header-anchor">#</a><span id="apply-call-bind">apply-call-bind</span></h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 后面参数形式不一样而已</span></span><br><span class="line">someFunc.apply(context, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]);</span><br><span class="line">someFunc.call(context, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bind 返回一个原函数的拷贝，并拥有指定的 this 值和初始参数</span></span><br><span class="line"><span class="comment">// function.bind(thisArg[, arg1[, arg2[, ...]]])</span></span><br><span class="line">someFunc.bind(context, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>class</title>
    <url>/2021/04/08/js%E7%B1%BB/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#es6">es6</a></li>
<li><a href="#es5">es5</a></li>
</ul>
<!-- tocstop -->

</div>

<h1><a href="#es6" class="header-anchor">#</a><span id="es6">es6</span></h1><img src="/2021/04/08/js%E7%B1%BB/class_es6.png" class width="1000" height="1000">
<p>class 内部都挂在 prototype 上，方便继承</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 实例属性方法新写法，无需放在 constructor 内</span></span><br><span class="line">  <span class="comment">// [methodName]() &#123;&#125; // methodName 可采用表达式</span></span><br><span class="line">  <span class="comment">// toString() &#123; // === Father.prototype.toString</span></span><br><span class="line">  <span class="comment">//   return &quot;(&quot; + this.x + &quot;, &quot; + this.y + &quot;)&quot;;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 内部都挂在 prototype 上</span></span><br><span class="line">  <span class="comment">// === Father.prototype.constructor</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">x, y</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;new.target&quot;</span>, <span class="keyword">new</span>.target);</span><br><span class="line">    <span class="comment">// new.target 指向 当前的类</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">new</span>.target === Father) &#123;</span><br><span class="line">      <span class="built_in">this</span>.x = x; <span class="comment">// 实例属性</span></span><br><span class="line">      <span class="built_in">this</span>.y = y;</span><br><span class="line">      <span class="comment">// this.#x = x; // 私有属性</span></span><br><span class="line">      <span class="comment">// this.#y = y;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">new</span>.target !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;必须使用 new 命令生成实例&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// reset 属性的存取行为</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title">prop</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;getter&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title">prop</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;setter: &quot;</span> + value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 静态属性</span></span><br><span class="line">  <span class="keyword">static</span> staticProp = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// 静态方法</span></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">classMethod</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 这里的 this 指向 class</span></span><br><span class="line">    <span class="comment">// 实例属性、方法内的 this 指向实例</span></span><br><span class="line">    <span class="built_in">this</span>.staticProp = <span class="built_in">this</span>.staticProp + <span class="string">&quot;staticProp&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 私有方法</span></span><br><span class="line">  <span class="comment">// #sum() &#123;</span></span><br><span class="line">  <span class="comment">//   return this.#x + this.#y;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> Father(<span class="string">&quot;X&quot;</span>, <span class="string">&quot;Y&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(f);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Father === Father.prototype.constructor); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;f.prop ===&quot;</span>, f.prop);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">x, y</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 调用父类的 constructor(x, y)</span></span><br><span class="line">    <span class="comment">// super 作为函数 super() 只能在子类构造函数中使用</span></span><br><span class="line">    <span class="built_in">super</span>(x, y);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;new.target&quot;</span>, <span class="keyword">new</span>.target);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">superToString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 在实例方法中，super 指向 Father.prototype</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.toString();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">classMethod</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 静态方法中，super 指向 Father</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.classMethod() + <span class="string">&quot;, 从super对象上调用父类静态方法&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1><a href="#es5" class="header-anchor">#</a><span id="es5">es5</span></h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 内部变量，内部可访问</span></span><br><span class="line">  insideProperty = <span class="string">&quot;insideProperty&quot;</span>;</span><br><span class="line">  <span class="comment">// 实例属性</span></span><br><span class="line">  <span class="built_in">this</span>.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">  <span class="built_in">this</span>.age = <span class="number">20</span>;</span><br><span class="line">  <span class="comment">// 实例方法</span></span><br><span class="line">  <span class="built_in">this</span>.run = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&quot;在运动&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 原型属性，实例可使用</span></span><br><span class="line">Person.prototype.sex = <span class="string">&quot;男&quot;</span>;</span><br><span class="line"><span class="comment">// 原型方法，实例可使用</span></span><br><span class="line">Person.prototype.work = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&quot;在工作&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 静态方法，类独享</span></span><br><span class="line">Person.getInfo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;静态方法，类独享&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(Person.getInfo());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;p.name&quot;</span>, p.name);</span><br><span class="line">p2.name = <span class="string">&quot;p2-name&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;p.name 是否被 p2 影响&quot;</span>, p.name === p2.name, p.name);</span><br><span class="line">p.run();</span><br><span class="line">p.work();</span><br><span class="line">Person.insideProperty; <span class="comment">// undefined</span></span><br><span class="line">p.insideProperty; <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx.conf</title>
    <url>/2021/02/26/nginx.conf/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->



<!-- tocstop -->

</div>

<p>nginx 配置</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义Nginx运行的用户和用户组</span></span><br><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#nginx进程数，建议设置为等于CPU总核心数。</span></span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#进程文件</span></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="comment">#单个进程最大连接数（最大连接数=连接数*进程数）</span></span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types; <span class="comment">#文件扩展名与文件类型映射表</span></span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">    <span class="comment">#                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">    <span class="comment">#                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/access.log  main;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，</span></span><br><span class="line">    <span class="comment"># 对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，</span></span><br><span class="line">    <span class="comment"># 以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</span></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#tcp_nopush     on; #防止网络阻塞</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">60</span>; <span class="comment">#长连接超时时间，单位是秒</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">root</span>   /data/app/nginx/html/dist;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">error_page</span> <span class="number">405</span> =<span class="number">200</span> $uri;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="comment"># 尝试读取 root + index，即 /data/app/nginx/html/dist/index.html</span></span><br><span class="line">            <span class="attribute">index</span>  index.html;</span><br><span class="line"></span><br><span class="line">            <span class="comment"># $uri  这个是nginx的一个变量，存放着用户访问的地址,</span></span><br><span class="line">            <span class="comment"># 比如：http://www.xxx.com/index.html, 那么$uri就是 /index.html</span></span><br><span class="line">            <span class="comment"># $uri/ 代表访问的是一个目录，比如：http://www.xxx.com/hello/test/    ，</span></span><br><span class="line">            <span class="comment"># 那么 $uri/ 就是 /hello/test/</span></span><br><span class="line">            <span class="comment"># 都不行则尝试第三个量 /index.html</span></span><br><span class="line">            <span class="attribute">try_files</span> $uri $uri/ /index.html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>网络运维</tag>
      </tags>
  </entry>
  <entry>
    <title>npm</title>
    <url>/2021/08/26/npm/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#npm-install-ban-ben-hao">npm install 版本号</a></li>
<li><a href="#qie-huan-node-ban-ben">切换 Node 版本</a><ul>
<li><a href="#n">n</a><ul>
<li><a href="#an-zhuang-zhi-ding-ban-ben-node">安装指定版本 node</a></li>
</ul>
</li>
<li><a href="#nvm">nvm</a></li>
<li><a href="#guan-li-node-ban-ben-xuan-ze-nvm-huan-shi-n">管理 node 版本，选择 nvm 还是 n？</a></li>
</ul>
</li>
<li><a href="#cha-kan-dang-qian-xiang-mu-de-suo-you-npm-jiao-ben-ming-ling">查看当前项目的所有 npm 脚本命令</a></li>
<li><a href="#gou-zi">钩子</a></li>
<li><a href="#zhi-xing-shun-xu">执行顺序</a></li>
<li><a href="#npm-qie-huan-ban-ben">npm 切换版本</a></li>
</ul>
<!-- tocstop -->

</div>

<h1><a href="#npm-install-ban-ben-hao" class="header-anchor">#</a><span id="npm-install-ban-ben-hao">npm install 版本号</span></h1><p><code>^15.2.1</code> match <code>^15.x.x</code></p>
<p><code>~15.2.1</code> match <code>^15.2.x</code></p>
<p><code>^0.2.1</code> match <code>^0.2.x</code></p>
<p>从左边非 0 版本号开始</p>
<h1><a href="#qie-huan-node-ban-ben" class="header-anchor">#</a><span id="qie-huan-node-ban-ben">切换 Node 版本</span></h1><h2><a href="#n" class="header-anchor">#</a><span id="n">n</span></h2><p>n 是一个 npm 包，n 依赖于 node 环境<br>安装 n<br><code>sudo npm install n -g</code></p>
<h3><a href="#an-zhuang-zhi-ding-ban-ben-node" class="header-anchor">#</a><span id="an-zhuang-zhi-ding-ban-ben-node">安装指定版本 node</span></h3><p>安装稳定版<br><code>sudo n stable</code></p>
<p>安装最新版<br><code>sudo n latest</code></p>
<p>安装指定版本<br><code>sudo n 10.16.3</code></p>
<p>选择版本或升降级<br><code>sudo n 版本号</code></p>
<p>删除某个版本<br><code>sudo n rm 12.15.3</code></p>
<p>以指定的版本来执行脚本<br><code>n use 10.13.0 test.js</code></p>
<p>查看帮助命令<br><code>n help</code></p>
<h2><a href="#nvm" class="header-anchor">#</a><span id="nvm">nvm</span></h2><p>nvm 是一个独立软件，不依赖于 node 环境。如果不会频繁切换 node 版本，还是推荐 n，所以此处不再赘述</p>
<h2><a href="#guan-li-node-ban-ben-xuan-ze-nvm-huan-shi-n" class="header-anchor">#</a><span id="guan-li-node-ban-ben-xuan-ze-nvm-huan-shi-n">管理 node 版本，选择 nvm 还是 n？</span></h2><p><a href="https://www.cnblogs.com/shengulong/p/9343172.html">管理 node 版本，选择 nvm 还是 n？</a></p>
<h1><a href="#cha-kan-dang-qian-xiang-mu-de-suo-you-npm-jiao-ben-ming-ling" class="header-anchor">#</a><span id="cha-kan-dang-qian-xiang-mu-de-suo-you-npm-jiao-ben-ming-ling">查看当前项目的所有 npm 脚本命令</span></h1><p><code>npm run</code></p>
<p>npm 脚本就是 Shell 脚本，因为可以使用 Shell 通配符</p>
<h1><a href="#gou-zi" class="header-anchor">#</a><span id="gou-zi">钩子</span></h1><p>npm 脚本有 pre 和 post 两个钩子。举例来说，build 脚本命令的钩子就是 prebuild 和 postbuild</p>
<p>执行 <code>npm run build</code> 时即执行 <code>npm run prebuild &amp;&amp; npm run build &amp;&amp; npm run postbuild</code></p>
<h1><a href="#zhi-xing-shun-xu" class="header-anchor">#</a><span id="zhi-xing-shun-xu">执行顺序</span></h1><ul>
<li>并行 &amp;</li>
<li>串行 &amp;&amp;</li>
</ul>
<h1><a href="#npm-qie-huan-ban-ben" class="header-anchor">#</a><span id="npm-qie-huan-ban-ben">npm 切换版本</span></h1><p><code>npm install -g npm@版本号</code></p>
]]></content>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>ts</title>
    <url>/2021/09/10/ts/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#zhong-duan-yun-xing-ts-wen-jian">终端运行 TS 文件</a><ul>
<li><a href="#wen-jian-jie-gou">文件结构</a><ul>
<li><a href="#test-ts">test.ts</a></li>
<li><a href="#tsconfig-json">tsconfig.json</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#lei-xing">类型</a><ul>
<li><a href="#hui-gu-js-shu-ju-lei-xing">回顾 js 数据类型</a></li>
<li><a href="#void">void</a></li>
<li><a href="#undefined-he-null-shi-suo-you-lei-xing-de-zi-lei-xing">undefined 和 null 是所有类型的子类型</a></li>
<li><a href="#any">any</a><ul>
<li><a href="#ying-yong-yu-vue-ts">应用于 Vue+ts</a></li>
</ul>
</li>
<li><a href="#lian-he-lei-xing">联合类型</a><ul>
<li><a href="#zhi-neng-fang-wen-gong-you-de-shu-xing-huo-fang-fa">只能访问共有的属性或方法</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#jie-kou">接口</a><ul>
<li><a href="#ke-xuan-zhi-du-ren-yi-shu-xing">可选、只读、任意属性</a></li>
<li><a href="#ts-ru-he-pan-duan-shi-li-shi-fou-shi-xian-liao-jie-kou">ts 如何判断实例是否实现了接口</a></li>
</ul>
</li>
<li><a href="#shu-zu">数组</a></li>
<li><a href="#lei-xing-duan-yan">类型断言</a><ul>
<li><a href="#duan-yan-de-xian-zhi-tiao-jian">断言的限制条件</a></li>
<li><a href="#jiang-zi-lei-shi-li-ke-fu-gei-fu-lei-bian-liang">将子类实例可赋给父类变量</a></li>
<li><a href="#fu-zhi-shi-jin-liang-bi-mian-yong-lei-xing-duan-yan">赋值时尽量避免用类型断言</a></li>
</ul>
</li>
<li><a href="#sheng-ming-wen-jian">声明文件</a><ul>
<li><a href="#guan-li-xia-zai-di-san-fang-ku-sheng-ming-wen-jian">管理、下载第三方库声明文件</a></li>
<li><a href="#shu-xie-fa-bu-sheng-ming-wen-jian">书写、发布声明文件</a></li>
</ul>
</li>
<li><a href="#nei-zhi-dui-xiang">内置对象</a><ul>
<li><a href="#ts-bao-han-js-dom-bom-de-nei-zhi-dui-xiang">ts 包含 js、DOM、BOM 的内置对象</a></li>
<li><a href="#ts-bu-bao-han-node-js-de-nei-zhi-dui-xiang">ts 不包含 Node.js 的内置对象</a></li>
<li><a href="#typescript-he-xin-ku-de-ding-yi-wen-jian">TypeScript 核心库的定义文件</a></li>
</ul>
</li>
<li><a href="#lei-xing-bie-ming">类型别名</a></li>
<li><a href="#zi-fu-chuan-zi-mian-liang-lei-xing">字符串字面量类型</a></li>
<li><a href="#yuan-zu">元组</a></li>
<li><a href="#mei-ju">枚举</a><ul>
<li><a href="#shou-dong-fu-zhi-bu-tui-jian">手动赋值（不推荐）</a></li>
<li><a href="#chang-shu-mei-ju-const-enum">常数枚举 const enum</a></li>
<li><a href="#wai-bu-mei-ju-declare-enum">外部枚举 declare enum</a></li>
</ul>
</li>
<li><a href="#lei">类</a><ul>
<li><a href="#xiang-guan-gai-nian">相关概念</a></li>
<li><a href="#yong-fa">用法</a><ul>
<li><a href="#es6">ES6</a></li>
</ul>
</li>
<li><a href="#fang-wen-xiu-shi-fu">访问修饰符</a><ul>
<li><a href="#public-private-protected">public private protected</a></li>
<li><a href="#readonly">readonly</a></li>
</ul>
</li>
<li><a href="#chou-xiang-lei">抽象类</a></li>
</ul>
</li>
<li><a href="#lei-yu-jie-kou">类与接口</a><ul>
<li><a href="#lei-shi-xian-jie-kou">类实现接口</a></li>
<li><a href="#jie-kou-ji-cheng-jie-kou">接口继承接口</a></li>
<li><a href="#jie-kou-ji-cheng-lei">接口继承类</a></li>
</ul>
</li>
<li><a href="#fan-xing">泛型</a><ul>
<li><a href="#duo-ge-lei-xing-can-shu">多个类型参数</a></li>
</ul>
</li>
<li><a href="#sheng-ming-he-bing">声明合并</a></li>
<li><a href="#kuo-zhan-yue-du">扩展阅读</a></li>
</ul>
<!-- tocstop -->

</div>

<h1><a href="#zhong-duan-yun-xing-ts-wen-jian" class="header-anchor">#</a><span id="zhong-duan-yun-xing-ts-wen-jian">终端运行 TS 文件</span></h1><p><code>yarn global add typescript</code><br><code>yarn global add ts-node</code></p>
<h2><a href="#wen-jian-jie-gou" class="header-anchor">#</a><span id="wen-jian-jie-gou">文件结构</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">run-ts</span><br><span class="line">- test.ts</span><br><span class="line">- tsconfig.json</span><br></pre></td></tr></table></figure>

<h3><a href="#test-ts" class="header-anchor">#</a><span id="test-ts">test.ts</span></h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> anyThing: <span class="built_in">any</span> = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;anyThing.myName: &quot;</span>, anyThing.myName); <span class="comment">// console 需 dom lib, 见 tsconfig.json</span></span><br></pre></td></tr></table></figure>

<h3><a href="#tsconfig-json" class="header-anchor">#</a><span id="tsconfig-json">tsconfig.json</span></h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;lib&quot;</span>: [<span class="string">&quot;esnext&quot;</span>, <span class="string">&quot;dom&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;esnext&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span>: <span class="string">&quot;node&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;noEmit&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;pretty&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;resolveJsonModule&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;esnext&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;include&quot;</span>: [<span class="string">&quot;./*.ts&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1><a href="#lei-xing" class="header-anchor">#</a><span id="lei-xing">类型</span></h1><h2><a href="#hui-gu-js-shu-ju-lei-xing" class="header-anchor">#</a><span id="hui-gu-js-shu-ju-lei-xing">回顾 js 数据类型</span></h2><ul>
<li>对象类型</li>
<li>原始数据类型：布尔值，数字，字符串，null，undefined，symbol</li>
</ul>
<h2><a href="#void" class="header-anchor">#</a><span id="void">void</span></h2><ul>
<li>没有返回值的函数</li>
<li>声明一个 <code>void</code> 类型的变量没有什么用，因为你只能将它赋值为 <code>undefined</code> 和 <code>null</code><ul>
<li><code>let unusable: void = undefined;</code></li>
</ul>
</li>
</ul>
<h2><a href="#undefined-he-null-shi-suo-you-lei-xing-de-zi-lei-xing" class="header-anchor">#</a><span id="undefined-he-null-shi-suo-you-lei-xing-de-zi-lei-xing">undefined 和 null 是所有类型的子类型</span></h2><p>可以赋值给任意类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num: <span class="built_in">number</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> a: <span class="built_in">void</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">num = a; <span class="comment">// Type &#x27;void&#x27; is not assignable to type &#x27;number&#x27;</span></span><br></pre></td></tr></table></figure>

<h2><a href="#any" class="header-anchor">#</a><span id="any">any</span></h2><p>在任意值上可以访问任何属性</p>
<p>也允许调用任何方法（存疑，见代码）</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> anyThing: <span class="built_in">any</span> = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(anyThing.myName); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> anyOne: <span class="built_in">any</span> = <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(anyOne.sayHello()); <span class="comment">// TypeError: anyOne.sayHello is not a function</span></span><br></pre></td></tr></table></figure>

<h3><a href="#ying-yong-yu-vue-ts" class="header-anchor">#</a><span id="ying-yong-yu-vue-ts">应用于 Vue+ts</span></h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$refs[<span class="string">&quot;adSpace&quot;</span>].validate(); <span class="comment">// Property &#x27;validate&#x27; does not exist on type &#x27;Vue | Element | (Vue | Element)[]&#x27;.</span></span><br><span class="line"></span><br><span class="line">(<span class="built_in">this</span>.$refs[<span class="string">&quot;adSpace&quot;</span>] <span class="keyword">as</span> <span class="built_in">any</span>).validate();</span><br></pre></td></tr></table></figure>

<h2><a href="#lian-he-lei-xing" class="header-anchor">#</a><span id="lian-he-lei-xing">联合类型</span></h2><p>eg: <code>let myFavoriteNumber: string | number</code></p>
<h3><a href="#zhi-neng-fang-wen-gong-you-de-shu-xing-huo-fang-fa" class="header-anchor">#</a><span id="zhi-neng-fang-wen-gong-you-de-shu-xing-huo-fang-fa">只能访问共有的属性或方法</span></h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>(<span class="params">something: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> something.length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// test.ts:2:20 - error TS2339: Property &#x27;length&#x27; does not exist on type &#x27;string | number&#x27;.</span></span><br><span class="line"><span class="comment">//  Property &#x27;length&#x27; does not exist on type &#x27;number&#x27;.</span></span><br></pre></td></tr></table></figure>

<h1><a href="#jie-kou" class="header-anchor">#</a><span id="jie-kou">接口</span></h1><h2><a href="#ke-xuan-zhi-du-ren-yi-shu-xing" class="header-anchor">#</a><span id="ke-xuan-zhi-du-ren-yi-shu-xing">可选、只读、任意属性</span></h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">  <span class="comment">// 只读</span></span><br><span class="line">  <span class="keyword">readonly</span> id: <span class="built_in">number</span>;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="comment">// 可选</span></span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">  <span class="comment">// 任意属性</span></span><br><span class="line">  <span class="comment">// 注：一旦定义了任意属性，那么确定属性和可选属性的类型都必须是任意属性类型(比如下面的 any)的子类；</span></span><br><span class="line">  [propName: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">  <span class="comment">// [propName: string]: number | string;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2><a href="#ts-ru-he-pan-duan-shi-li-shi-fou-shi-xian-liao-jie-kou" class="header-anchor">#</a><span id="ts-ru-he-pan-duan-shi-li-shi-fou-shi-xian-liao-jie-kou">ts 如何判断实例是否实现了接口</span></h2><p>不能用 instanceof，因为运行时是不存在 Interface，只能基于接口形状进行判断</p>
<h1><a href="#shu-zu" class="header-anchor">#</a><span id="shu-zu">数组</span></h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a: [<span class="built_in">number</span>, <span class="built_in">string</span>, <span class="built_in">any</span>] = [<span class="number">3</span>, <span class="string">&quot;7&quot;</span>, <span class="literal">undefined</span>];</span><br><span class="line"><span class="keyword">let</span> b: <span class="built_in">number</span>[] = [<span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> c: <span class="built_in">any</span>[] = [<span class="number">4</span>, <span class="string">&quot;5&quot;</span>, <span class="literal">null</span>, <span class="literal">undefined</span>];</span><br></pre></td></tr></table></figure>

<h1><a href="#lei-xing-duan-yan" class="header-anchor">#</a><span id="lei-xing-duan-yan">类型断言</span></h1><p>手动指定一个值的类型, <code>&lt;type&gt;value</code> 或 <code>value as type</code><br>tsx 中只能用 <code>value as type</code>，建议统一用 <code>value as type</code></p>
<ul>
<li>将一个联合类型断言为其中一个类型</li>
<li>将一个父类断言为更加具体的子类</li>
<li>将一个子类断言为父类</li>
<li>将任何一个类型断言为 any</li>
<li>将 any 断言为一个具体的类型</li>
</ul>
<h2><a href="#duan-yan-de-xian-zhi-tiao-jian" class="header-anchor">#</a><span id="duan-yan-de-xian-zhi-tiao-jian">断言的限制条件</span></h2><p>我们注意到，父子类可以互相断言，any 和其他类型可以互相断言</p>
<p>在 typescript 中，父类<code>兼容</code>子类，比如 <code>Cat extends Animal</code> 即 <code>Animal 兼容 Cat</code></p>
<p><strong><em>A 和 B 互相断言的前提：A 兼容 B 或者 B 兼容 A</em></strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将一个联合类型断言为其中一个类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>(<span class="params">something: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ((&lt;<span class="built_in">string</span>&gt;something).length) &#123;</span><br><span class="line">    <span class="keyword">return</span> (&lt;<span class="built_in">string</span>&gt;something).length;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> something.toString().length;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2><a href="#jiang-zi-lei-shi-li-ke-fu-gei-fu-lei-bian-liang" class="header-anchor">#</a><span id="jiang-zi-lei-shi-li-ke-fu-gei-fu-lei-bian-liang">将子类实例可赋给父类变量</span></h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Animal &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Cat &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  run(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom: Cat = &#123;</span><br><span class="line">  name: <span class="string">&quot;Tom&quot;</span>,</span><br><span class="line">  run: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;run&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> animal: Animal = tom;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;将子类实例赋给父类变量&quot;</span>, animal);</span><br></pre></td></tr></table></figure>

<h2><a href="#fu-zhi-shi-jin-liang-bi-mian-yong-lei-xing-duan-yan" class="header-anchor">#</a><span id="fu-zhi-shi-jin-liang-bi-mian-yong-lei-xing-duan-yan">赋值时尽量避免用类型断言</span></h2><p>我们通过断言 <code>animal as Cat</code> 成功赋值给变量 cat，使 cat 在后续中被当为 Cat 类型，但很明显此时的 cat 是不完整的</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Animal, Cat &#125; <span class="keyword">from</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> animal: Animal = &#123; <span class="attr">name</span>: <span class="string">&quot;father-class-instance&quot;</span> &#125;;</span><br><span class="line"><span class="comment">// let cat: Cat = animal; // Property &#x27;run&#x27; is missing in type &#x27;Animal&#x27; but required in type &#x27;Cat&#x27;.</span></span><br><span class="line"><span class="keyword">let</span> cat = animal <span class="keyword">as</span> Cat; <span class="comment">// 不会报错</span></span><br><span class="line"><span class="built_in">console</span>.log(cat); <span class="comment">// &#123; name: &#x27;father-class-instance&#x27; &#125;</span></span><br></pre></td></tr></table></figure>

<h1><a href="#sheng-ming-wen-jian" class="header-anchor">#</a><span id="sheng-ming-wen-jian">声明文件</span></h1><p>引用第三方库时，比如 jQuery，由于 ts 无法识别 <code>$(&#39;#foo&#39;) 或 jQuery(&#39;#foo&#39;)</code>，此时需要对 $ 或 jQuery 这两个全局变量进行声明，书写声明文件（<code>.d.ts</code> 为后缀）</p>
<h2><a href="#guan-li-xia-zai-di-san-fang-ku-sheng-ming-wen-jian" class="header-anchor">#</a><span id="guan-li-xia-zai-di-san-fang-ku-sheng-ming-wen-jian">管理、下载第三方库声明文件</span></h2><ul>
<li>使用 <code>@types</code> 统一管理第三方库的声明文件</li>
<li>下载 <a href="#">@types</a> 管理下的 jQuery 声明文件 ：<code>npm install @types/jquery --save-dev</code><ul>
<li>其他第三方库声明文件 <a href="https://www.npmjs.com/search?q=@types">https://www.npmjs.com/search?q=@types</a></li>
<li>当一个第三方库没有提供声明文件时，我们就需要自己书写声明文件了</li>
</ul>
</li>
</ul>
<h2><a href="#shu-xie-fa-bu-sheng-ming-wen-jian" class="header-anchor">#</a><span id="shu-xie-fa-bu-sheng-ming-wen-jian">书写、发布声明文件</span></h2><p><a href="https://ts.xcatliu.com/basics/declaration-files">https://ts.xcatliu.com/basics/declaration-files</a></p>
<h1><a href="#nei-zhi-dui-xiang" class="header-anchor">#</a><span id="nei-zhi-dui-xiang">内置对象</span></h1><h3><a href="#ts-bao-han-js-dom-bom-de-nei-zhi-dui-xiang" class="header-anchor">#</a><span id="ts-bao-han-js-dom-bom-de-nei-zhi-dui-xiang">ts 包含 js、DOM、BOM 的内置对象</span></h3><p>很多 js、DOM、BOM 的内置对象，ts 已经在其核心库中定义了，我们可以直接在 ts 中使用这些类型如 <code>Document</code>、<code>HTMLElement</code>、<code>Event</code>、<code>NodeList</code>、<code>Boolean</code>、<code>Error</code>、<code>Date</code>、<code>RegExp</code> 等</p>
<h3><a href="#ts-bu-bao-han-node-js-de-nei-zhi-dui-xiang" class="header-anchor">#</a><span id="ts-bu-bao-han-node-js-de-nei-zhi-dui-xiang">ts 不包含 Node.js 的内置对象</span></h3><p>如果想用 TypeScript 写 Node.js，则需要引入第三方声明文件：<br><code>npm install @types/node --save-dev</code></p>
<h3><a href="#typescript-he-xin-ku-de-ding-yi-wen-jian" class="header-anchor">#</a><span id="typescript-he-xin-ku-de-ding-yi-wen-jian">TypeScript 核心库的定义文件</span></h3><p><a href="https://github.com/Microsoft/TypeScript/tree/master/src/lib">https://github.com/Microsoft/TypeScript/tree/master/src/lib</a></p>
<h1><a href="#lei-xing-bie-ming" class="header-anchor">#</a><span id="lei-xing-bie-ming">类型别名</span></h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Name = <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">type</span> NameResolver = <span class="function">() =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">type</span> NameOrResolver = Name | NameResolver;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params">n: NameOrResolver</span>): <span class="title">Name</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> n === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> n();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1><a href="#zi-fu-chuan-zi-mian-liang-lei-xing" class="header-anchor">#</a><span id="zi-fu-chuan-zi-mian-liang-lei-xing">字符串字面量类型</span></h1><p>用来约束变量的取值只能是几个字符串之一，也用 <code>type</code> 来定义</p>
<p><code>type EventNames = &#39;click&#39; | &#39;scroll&#39; | &#39;mousemove&#39;</code></p>
<h1><a href="#yuan-zu" class="header-anchor">#</a><span id="yuan-zu">元组</span></h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> tom: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line">tom = [<span class="string">&quot;Tom&quot;</span>, <span class="number">25</span>];</span><br><span class="line">tom.push(<span class="string">&quot;male&quot;</span>);</span><br><span class="line">tom.push(<span class="literal">true</span>); <span class="comment">// push tom 中未定义的元素，会报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Argument of type &#x27;true&#x27; is not assignable to parameter of type &#x27;string | number&#x27;.</span></span><br></pre></td></tr></table></figure>

<h1><a href="#mei-ju" class="header-anchor">#</a><span id="mei-ju">枚举</span></h1><p>枚举（Enum）类型用于取值被限定在一定范围内的场景，比如一周只能有七天，颜色限定为红绿蓝等</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enum</span> Days &#123;</span><br><span class="line">  Sun,</span><br><span class="line">  Mon,</span><br><span class="line">  Tue,</span><br><span class="line">  Wed,</span><br><span class="line">  Thu,</span><br><span class="line">  Fri,</span><br><span class="line">  Sat,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="string">&quot;Sun&quot;</span>] === <span class="number">0</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="number">0</span>] === <span class="string">&quot;Sun&quot;</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2><a href="#shou-dong-fu-zhi-bu-tui-jian" class="header-anchor">#</a><span id="shou-dong-fu-zhi-bu-tui-jian">手动赋值（不推荐）</span></h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 未手动赋值的，序号递增，步长为1</span></span><br><span class="line"><span class="built_in">enum</span> Days &#123;</span><br><span class="line">  Sun = <span class="number">7</span>,</span><br><span class="line">  Mon = <span class="number">1.5</span>,</span><br><span class="line">  Tue,</span><br><span class="line">  Wed,</span><br><span class="line">  Thu,</span><br><span class="line">  Fri,</span><br><span class="line">  Sat,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="string">&quot;Sun&quot;</span>] === <span class="number">7</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="string">&quot;Mon&quot;</span>] === <span class="number">1.5</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="string">&quot;Tue&quot;</span>] === <span class="number">2.5</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="string">&quot;Sat&quot;</span>] === <span class="number">6.5</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果紧接在计算所得项(Red)后面的是未手动赋值的项(Green, Blue)</span></span><br><span class="line"><span class="comment">// 那么它就会因为无法获得初始值而报错</span></span><br><span class="line"><span class="built_in">enum</span> Color &#123;</span><br><span class="line">  Red = <span class="string">&quot;red&quot;</span>.length,</span><br><span class="line">  Green,</span><br><span class="line">  Blue,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// index.ts(1,33): error TS1061: Enum member must have initializer.</span></span><br><span class="line"><span class="comment">// index.ts(1,40): error TS1061: Enum member must have initializer.</span></span><br></pre></td></tr></table></figure>

<h2><a href="#chang-shu-mei-ju-const-enum" class="header-anchor">#</a><span id="chang-shu-mei-ju-const-enum">常数枚举 const enum</span></h2><p>常数枚举是使用 <code>const enum</code> 定义的枚举类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常数枚举不允许有计算成员</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">enum</span> Color &#123;</span><br><span class="line">  Red,</span><br><span class="line">  Green,</span><br><span class="line">  Blue = <span class="string">&quot;blue&quot;</span>.length,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// index.ts(1,38): error TS2474: In &#x27;const&#x27; enum declarations member initializer must be constant expression.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 常数枚举的类型如 Directions 会在编译阶段被删除</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">enum</span> Directions &#123;</span><br><span class="line">  Up,</span><br><span class="line">  Down,</span><br><span class="line">  Left,</span><br><span class="line">  Right,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> directions = [</span><br><span class="line">  Directions.Up,</span><br><span class="line">  Directions.Down,</span><br><span class="line">  Directions.Left,</span><br><span class="line">  Directions.Right,</span><br><span class="line">];</span><br><span class="line"><span class="comment">// 编译结果</span></span><br><span class="line"><span class="keyword">var</span> directions = [<span class="number">0</span> <span class="comment">/* Up */</span>, <span class="number">1</span> <span class="comment">/* Down */</span>, <span class="number">2</span> <span class="comment">/* Left */</span>, <span class="number">3</span> <span class="comment">/* Right */</span>];</span><br></pre></td></tr></table></figure>

<h2><a href="#wai-bu-mei-ju-declare-enum" class="header-anchor">#</a><span id="wai-bu-mei-ju-declare-enum">外部枚举 declare enum</span></h2><p>常用于声明文件，在编译结果中也会被删除（节省空间吧）</p>
<h1><a href="#lei" class="header-anchor">#</a><span id="lei">类</span></h1><h2><a href="#xiang-guan-gai-nian" class="header-anchor">#</a><span id="xiang-guan-gai-nian">相关概念</span></h2><ul>
<li>抽象类（Abstract Class）：抽象类是供其他类继承的基类，抽象类不允许被实例化。抽象类中的抽象方法必须在子类中被实现</li>
</ul>
<h2><a href="#yong-fa" class="header-anchor">#</a><span id="yong-fa">用法</span></h2><h3><a href="#es6" class="header-anchor">#</a><span id="es6">ES6</span></h3><h4><a href="#ji-cheng" class="header-anchor">#</a><span id="ji-cheng">继承</span></h4><p>super 关键字调用父类的构造函数和方法</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(name); <span class="comment">// 调用父类的 constructor(name)</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Meow, &quot;</span> + <span class="built_in">super</span>.sayHi(); <span class="comment">// 调用父类的 sayHi()</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> Cat(<span class="string">&quot;Tom&quot;</span>); <span class="comment">// Tom</span></span><br><span class="line"><span class="built_in">console</span>.log(c.sayHi()); <span class="comment">// Meow, My name is Tom</span></span><br></pre></td></tr></table></figure>

<h4><a href="#getter-setter" class="header-anchor">#</a><span id="getter-setter">getter setter</span></h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title">name</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Jack&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title">name</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;setter: &quot;</span> + value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> Animal(<span class="string">&quot;Kitty&quot;</span>); <span class="comment">// setter: Kitty</span></span><br><span class="line">a.name = <span class="string">&quot;Tom&quot;</span>; <span class="comment">// setter: Tom</span></span><br><span class="line"><span class="built_in">console</span>.log(a.name); <span class="comment">// Jack</span></span><br></pre></td></tr></table></figure>

<h4><a href="#jing-tai-fang-fa-static" class="header-anchor">#</a><span id="jing-tai-fang-fa-static">静态方法 static</span></h4><p>直接通过类名来调用</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">isAnimal</span>(<span class="params">a</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a <span class="keyword">instanceof</span> Animal;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> Animal(<span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">Animal.isAnimal(a); <span class="comment">// true</span></span><br><span class="line">a.isAnimal(a); <span class="comment">// TypeError: a.isAnimal is not a function</span></span><br></pre></td></tr></table></figure>

<h2><a href="#fang-wen-xiu-shi-fu" class="header-anchor">#</a><span id="fang-wen-xiu-shi-fu">访问修饰符</span></h2><h3><a href="#public-private-protected" class="header-anchor">#</a><span id="public-private-protected">public private protected</span></h3><ul>
<li><p>访问修饰符，决定了属性、方法能否被访问，分三种 <em>**公有、私有、子类中可访问 **</em></p>
<ul>
<li>public 到处都可访问。属性、方法默认为 public</li>
<li>private 私有，不能在 <em><strong>声明它的类</strong></em> 的外部访问</li>
<li>protected 可以在子类中访问</li>
</ul>
</li>
<li><p>修饰构造函数</p>
<ul>
<li>private constructor 不允许继承和实例化</li>
<li>protected constructor 只允许继承</li>
</ul>
</li>
<li><p>修饰构造函数参数</p>
</li>
</ul>
<p>相当于 <em><strong>定义且赋值参数</strong></em></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="comment">// public name: string;</span></span><br><span class="line">  <span class="comment">// 不限制类型，这里的 string 只是举例，下面实例化给了数字 3</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">public</span> name</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// this.name = name;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> Animal(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a.name);</span><br></pre></td></tr></table></figure>

<h3><a href="#readonly" class="header-anchor">#</a><span id="readonly">readonly</span></h3><p>readonly 也是访问修饰符，跟 public 三者在一起时要放后面，如 <code>public ``readonly</code></p>
<h2><a href="#chou-xiang-lei" class="header-anchor">#</a><span id="chou-xiang-lei">抽象类</span></h2><ul>
<li>abstract class 用于继承，且子类必须实现 abstract class 中的 abstract function</li>
</ul>
<h1><a href="#lei-yu-jie-kou" class="header-anchor">#</a><span id="lei-yu-jie-kou">类与接口</span></h1><h2><a href="#lei-shi-xian-jie-kou" class="header-anchor">#</a><span id="lei-shi-xian-jie-kou">类实现接口</span></h2><p>类的一些共同特性可抽出来作为接口，让所有类来 implement (实现)，一个类可实现多个接口</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Alarm &#123;</span><br><span class="line">  alert(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Light &#123;</span><br><span class="line">  lightOn(): <span class="built_in">void</span>;</span><br><span class="line">  lightOff(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Door</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecurityDoor</span> <span class="keyword">extends</span> <span class="title">Door</span> <span class="title">implements</span> <span class="title">Alarm</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">alert</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;SecurityDoor alert&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="title">implements</span> <span class="title">Alarm</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">alert</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Car alert&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">lightOn</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Car light on&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">lightOff</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Car light off&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2><a href="#jie-kou-ji-cheng-jie-kou" class="header-anchor">#</a><span id="jie-kou-ji-cheng-jie-kou">接口继承接口</span></h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Alarm &#123;</span><br><span class="line">  alert(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> LightableAlarm <span class="keyword">extends</span> Alarm &#123;</span><br><span class="line">  lightOn(): <span class="built_in">void</span>;</span><br><span class="line">  lightOff(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2><a href="#jie-kou-ji-cheng-lei" class="header-anchor">#</a><span id="jie-kou-ji-cheng-lei">接口继承类</span></h2><p>不常用，此处不赘述</p>
<h1><a href="#fan-xing" class="header-anchor">#</a><span id="fan-xing">泛型</span></h1><p>定义函数、接口、类的时候，不预先指定类型，使用时再指定类型的一种特性</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createArray</span>&lt;<span class="title">T</span>&gt;(<span class="params">length: <span class="built_in">number</span>, value: T</span>): <span class="title">Array</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result: T[] = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    result[i] = value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定 T 为 string</span></span><br><span class="line">createArray&lt;<span class="built_in">string</span>&gt;(<span class="number">3</span>, <span class="string">&quot;x&quot;</span>); <span class="comment">// [&#x27;x&#x27;, &#x27;x&#x27;, &#x27;x&#x27;]</span></span><br><span class="line"><span class="comment">// 不指定 T，由 ts 自己推出来</span></span><br><span class="line">createArray(<span class="number">3</span>, <span class="string">&quot;x&quot;</span>); <span class="comment">// [&#x27;x&#x27;, &#x27;x&#x27;, &#x27;x&#x27;]</span></span><br></pre></td></tr></table></figure>

<h2><a href="#duo-ge-lei-xing-can-shu" class="header-anchor">#</a><span id="duo-ge-lei-xing-can-shu">多个类型参数</span></h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>&lt;<span class="title">T</span>, <span class="title">U</span>&gt;(<span class="params">tuple: [T, U]</span>): [<span class="title">U</span>, <span class="title">T</span>] </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [tuple[<span class="number">1</span>], tuple[<span class="number">0</span>]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">swap([<span class="number">7</span>, <span class="string">&quot;seven&quot;</span>]); <span class="comment">// [&#x27;seven&#x27;, 7]</span></span><br></pre></td></tr></table></figure>

<h1><a href="#sheng-ming-he-bing" class="header-anchor">#</a><span id="sheng-ming-he-bing">声明合并</span></h1><h1><a href="#kuo-zhan-yue-du" class="header-anchor">#</a><span id="kuo-zhan-yue-du">扩展阅读</span></h1>]]></content>
      <tags>
        <tag>Typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-cli项目生成githook钩子</title>
    <url>/2021/08/26/vue-cli%E9%A1%B9%E7%9B%AE%E7%94%9F%E6%88%90githook%E9%92%A9%E5%AD%90/</url>
    <content><![CDATA[<ul>
<li>vue create demo</li>
<li>删除依赖</li>
<li><code>git init</code>, 确保生成 .git 文件夹，mac 查看隐藏文件 <code>shift+command+.</code></li>
<li>重装依赖即可</li>
</ul>
]]></content>
      <tags>
        <tag>vue</tag>
        <tag>githook</tag>
      </tags>
  </entry>
  <entry>
    <title>vue+ts</title>
    <url>/2021/09/01/vue-ts/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#vue-error-in-nexttick-rangeerror-maximum-call-stack-size-exceeded">Vue Error in nextTick: “RangeError: Maximum call stack size exceeded”</a><ul>
<li><a href="#chang-jing">场景</a></li>
</ul>
</li>
<li><a href="#the-property-x-does-not-exist-on-value-of-type-y">The property ‘x’ does not exist on value of type ‘y’</a></li>
</ul>
<!-- tocstop -->

</div>

<h1><a href="#vue-error-in-nexttick-rangeerror-maximum-call-stack-size-exceeded" class="header-anchor">#</a><span id="vue-error-in-nexttick-rangeerror-maximum-call-stack-size-exceeded">Vue Error in nextTick: “RangeError: Maximum call stack size exceeded”</span></h1><p>两个组件的 name 重复了，跪了…</p>
<h2><a href="#chang-jing" class="header-anchor">#</a><span id="chang-jing">场景</span></h2><p><code>export default class Layout extends Vue &#123;&#125;</code> 引入的组件库已有 Layout 组件</p>
<h1><a href="#the-property-x-does-not-exist-on-value-of-type-y" class="header-anchor">#</a><span id="the-property-x-does-not-exist-on-value-of-type-y">The property ‘x’ does not exist on value of type ‘y’</span></h1><p><a href="https://stackoverflow.com/questions/18083389/ignore-typescript-errors-property-does-not-exist-on-value-of-type#">https://stackoverflow.com/questions/18083389/ignore-typescript-errors-property-does-not-exist-on-value-of-type#</a></p>
]]></content>
      <tags>
        <tag>vue+Typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>vue公共组件</title>
    <url>/2021/09/08/vue%E5%85%AC%E5%85%B1%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#can-kao-xie-fa">参考写法</a><ul>
<li><a href="#chong-dian">重点</a></li>
<li><a href="#wen-jian-jie-gou">文件结构</a><ul>
<li><a href="#index-ts">index.ts</a></li>
<li><a href="#message-vue">Message.vue</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<!-- tocstop -->

</div>

<h1><a href="#can-kao-xie-fa" class="header-anchor">#</a><span id="can-kao-xie-fa">参考写法</span></h1><h2><a href="#chong-dian" class="header-anchor">#</a><span id="chong-dian">重点</span></h2><p>在单例上进行扩展和处理</p>
<h2><a href="#wen-jian-jie-gou" class="header-anchor">#</a><span id="wen-jian-jie-gou">文件结构</span></h2><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">message</span><br><span class="line">- index.ts</span><br><span class="line">- Message.vue</span><br></pre></td></tr></table></figure>

<h3><a href="#index-ts" class="header-anchor">#</a><span id="index-ts">index.ts</span></h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Message <span class="keyword">from</span> <span class="string">&quot;./Message.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> MessageType = <span class="string">&quot;default&quot;</span> | <span class="string">&quot;success&quot;</span> | <span class="string">&quot;error&quot;</span> | <span class="string">&quot;warning&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> MessageOptions &#123;</span><br><span class="line">  <span class="keyword">type</span>?: MessageType;</span><br><span class="line">  time?: <span class="built_in">number</span>;</span><br><span class="line">  callback?: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  单例模式</span></span><br><span class="line"><span class="keyword">let</span> vm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> install = <span class="function">(<span class="params">Vue</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> Component = Vue.extend(Message);</span><br><span class="line"></span><br><span class="line">  Vue.prototype.$message = (</span><br><span class="line">    content: <span class="built_in">String</span>,</span><br><span class="line">    options?: MessageType | MessageOptions</span><br><span class="line">  ) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> data = &#123;</span><br><span class="line">      content,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (vm) &#123;</span><br><span class="line">      vm.$destroy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> options === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">      data[<span class="string">&quot;type&quot;</span>] = options;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">Object</span>.assign(data, options);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> instance = <span class="keyword">new</span> Component(&#123;</span><br><span class="line">      data,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    vm = instance.$mount();</span><br><span class="line">    vm.show = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    vm.$on(<span class="string">&quot;destroyed&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      vm = <span class="literal">null</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> vm;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  install,</span><br><span class="line">  Message,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3><a href="#message-vue" class="header-anchor">#</a><span id="message-vue">Message.vue</span></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;transition name&#x3D;&quot;slide&quot; @after-leave&#x3D;&quot;afterLeave&quot;&gt;</span><br><span class="line">    &lt;div v-if&#x3D;&quot;show&quot; :class&#x3D;&quot;component_class&quot; @click&#x3D;&quot;show &#x3D; false&quot;&gt;</span><br><span class="line">      &#123;&#123; content &#125;&#125;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;transition&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang&#x3D;&quot;less&quot; scoped&gt;</span><br><span class="line">.message &#123;</span><br><span class="line">  position: fixed;</span><br><span class="line">  bottom: 60px;</span><br><span class="line">  left: 50%;</span><br><span class="line">  font-size: 14px;</span><br><span class="line">  color: #333;</span><br><span class="line">  padding: 5px 10px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  opacity: 0.9;</span><br><span class="line">  border-radius: 4px;</span><br><span class="line">  min-width: 60px;</span><br><span class="line">  max-width: 60%;</span><br><span class="line">  word-break: break-all;</span><br><span class="line">  box-shadow: 1px 1px 2px 1px rgba(0, 0, 0, 0.16);</span><br><span class="line">  transform: translate(-50%, 0);</span><br><span class="line">  z-index: 10001;</span><br><span class="line"></span><br><span class="line">  &amp;.default &#123;</span><br><span class="line">    color: #fff;</span><br><span class="line">    background-color: #333;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &amp;.success &#123;</span><br><span class="line">    color: #fff;</span><br><span class="line">    background-color: @success;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &amp;.warning &#123;</span><br><span class="line">    color: #fff;</span><br><span class="line">    background-color: @warning;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &amp;.error &#123;</span><br><span class="line">    color: #fff;</span><br><span class="line">    background-color: @error;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.slide-enter-active,</span><br><span class="line">.slide-leave-active &#123;</span><br><span class="line">  transition: all 0.3s;</span><br><span class="line">&#125;</span><br><span class="line">.slide-enter,</span><br><span class="line">.slide-leave-to &#123;</span><br><span class="line">  transform: translate(-50%, 10px);</span><br><span class="line">  opacity: 0;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123; Vue, Component &#125; from &quot;vue-property-decorator&quot;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line">export default class Toast extends Vue &#123;</span><br><span class="line">  show &#x3D; false;</span><br><span class="line">  content &#x3D; &quot;&quot;;</span><br><span class="line">  time &#x3D; 2000;</span><br><span class="line">  type &#x3D; &quot;default&quot;;</span><br><span class="line">  callback &#x3D; null;</span><br><span class="line"></span><br><span class="line">  get component_class() &#123;</span><br><span class="line">    return [&quot;message&quot;, &#96;$&#123;this.type&#125;&#96;];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  mounted() &#123;</span><br><span class="line">    document.body.appendChild(this.$el);</span><br><span class="line">    this.time &amp;&amp; setTimeout(this.close, this.time);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  beforeDestroy() &#123;</span><br><span class="line">    document.body.removeChild(this.$el);</span><br><span class="line">    this.callback &amp;&amp;</span><br><span class="line">      this.$nextTick(() &#x3D;&gt; &#123;</span><br><span class="line">        this.callback();</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  destroyed() &#123;</span><br><span class="line">    this.$emit(&quot;destroyed&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  close() &#123;</span><br><span class="line">    this.show &#x3D; false;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  afterLeave() &#123;</span><br><span class="line">    this.$destroy();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>yarn</title>
    <url>/2021/08/27/yarn/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#jing-xiang">镜像</a></li>
<li><a href="#tian-jia-bao">添加包</a><ul>
<li><a href="#quan-ju-tian-jia">全局添加</a></li>
<li><a href="#tian-jia-dao-devdependencies-peerdependencies-he-optionaldependencies-lei-bie">添加到 devDependencies、peerDependencies 和 optionalDependencies 类别</a></li>
</ul>
</li>
<li><a href="#sheng-ji-bao">升级包</a></li>
<li><a href="#yi-chu-bao">移除包</a></li>
<li><a href="#an-zhuang-bao">安装包</a></li>
<li><a href="#lie-chu-yi-an-zhuang-de-bao">列出已安装的包</a><ul>
<li><a href="#xian-zhi-bao-de-shen-du">限制包的深度</a></li>
<li><a href="#zhi-ding-zi-yan">指定字眼</a></li>
</ul>
</li>
<li><a href="#xian-shi-bao-xin-xi">显示包信息</a></li>
<li><a href="#yun-xing">运行</a></li>
<li><a href="#lie-chu-yun-xing-shi-ke-yong-de-huan-jing-bian-liang">列出运行时可用的环境变量</a></li>
<li><a href="#yarn-sheng-ji">yarn 升级</a></li>
</ul>
<!-- tocstop -->

</div>

<h1><a href="#jing-xiang" class="header-anchor">#</a><span id="jing-xiang">镜像</span></h1><p>查询当前<br><code>yarn config get registry</code><br>设为淘宝镜像<br><code>yarn config set registry </code><a href="http://registry.npm.taobao.org/"><code>http://registry.npm.taobao.org/</code></a><br>设为默认的官方镜像<br><code>yarn config set registry </code><a href="https://registry.yarnpkg.com/"><code>https://registry.yarnpkg.com</code></a></p>
<h1><a href="#tian-jia-bao" class="header-anchor">#</a><span id="tian-jia-bao">添加包</span></h1><p><code>yarn add [package]</code><br><code>yarn add [package]@[version]</code><br><code>yarn add [package]@[tag]</code></p>
<h3><a href="#quan-ju-tian-jia" class="header-anchor">#</a><span id="quan-ju-tian-jia">全局添加</span></h3><p><code>yarn global &lt;add/bin/list/remove/upgrade&gt;</code><br>global 是一个必须跟在 yarn 后面的命令。输入 <code>yarn add global package-name</code> 会把名为 global 和 package-name 的包添加到本地，而非全局添加 package-name</p>
<h3><a href="#tian-jia-dao-devdependencies-peerdependencies-he-optionaldependencies-lei-bie" class="header-anchor">#</a><span id="tian-jia-dao-devdependencies-peerdependencies-he-optionaldependencies-lei-bie">添加到 devDependencies、peerDependencies 和 optionalDependencies 类别</span></h3><p><code>yarn add [package] --dev</code><br><code>yarn add [package] --peer</code><br><code>yarn add [package] --optional</code></p>
<h1><a href="#sheng-ji-bao" class="header-anchor">#</a><span id="sheng-ji-bao">升级包</span></h1><p>指定包名称升级指定包<br>不指定包名称升级所有包<br><code>yarn upgrade [package]</code><br><code>yarn upgrade [package]@[version]</code><br><code>yarn upgrade [package]@[tag]</code></p>
<h1><a href="#yi-chu-bao" class="header-anchor">#</a><span id="yi-chu-bao">移除包</span></h1><p><code>yarn remove [package]</code></p>
<h1><a href="#an-zhuang-bao" class="header-anchor">#</a><span id="an-zhuang-bao">安装包</span></h1><p><code>yarn</code><br><code>yarn install</code></p>
<h1><a href="#lie-chu-yi-an-zhuang-de-bao" class="header-anchor">#</a><span id="lie-chu-yi-an-zhuang-de-bao">列出已安装的包</span></h1><p>默认情况下，所有的包及其所依赖的包，都会被显示</p>
<h3><a href="#xian-zhi-bao-de-shen-du" class="header-anchor">#</a><span id="xian-zhi-bao-de-shen-du">限制包的深度</span></h3><p><code>yarn list</code><br><code>yarn list --depth=0</code></p>
<h3><a href="#zhi-ding-zi-yan" class="header-anchor">#</a><span id="zhi-ding-zi-yan">指定字眼</span></h3><p><code>yarn list --pattern</code><br><code>yarn list --pattern gulp</code><br><code>yarn list --pattern &quot;gulp|grunt&quot; --depth=1</code></p>
<h1><a href="#xian-shi-bao-xin-xi" class="header-anchor">#</a><span id="xian-shi-bao-xin-xi">显示包信息</span></h1><p>某版本的包的信息<br><code>yarn info [package]@[version]</code><br>项目中某包的版本<br><code>yarn info [package] version</code></p>
<h1><a href="#yun-xing" class="header-anchor">#</a><span id="yun-xing">运行</span></h1><p><code>yarn run [script] [脚本参数]</code><br><code>yarn run test</code><br><code>yarn run test -o --watch</code><br>如果你不指定一个脚本给 yarn run 命令，run 命令会列出包里所有可运行的脚本<br><code>yarn run</code></p>
<h1><a href="#lie-chu-yun-xing-shi-ke-yong-de-huan-jing-bian-liang" class="header-anchor">#</a><span id="lie-chu-yun-xing-shi-ke-yong-de-huan-jing-bian-liang">列出运行时可用的环境变量</span></h1><p><code>yarn run env</code><br>如果想覆盖此命令，可以在 package.json 中定义自己的 “env” 脚本</p>
<h1><a href="#yarn-sheng-ji" class="header-anchor">#</a><span id="yarn-sheng-ji">yarn 升级</span></h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -s <span class="comment"># mac 进入管理员模式</span></span><br><span class="line"></span><br><span class="line">npm uninstall -g yarn <span class="comment"># 先卸载</span></span><br><span class="line"></span><br><span class="line">npm install yarn@1.3.2 -g <span class="comment"># 安装指定版本</span></span><br><span class="line"></span><br><span class="line">npm install yarn@latest -g <span class="comment"># 安装最新版本</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>yarn</tag>
      </tags>
  </entry>
  <entry>
    <title>一主机多子域名多应用</title>
    <url>/2021/08/26/%E4%B8%80%E4%B8%BB%E6%9C%BA%E5%A4%9A%E5%AD%90%E5%9F%9F%E5%90%8D%E5%A4%9A%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#shi-yong-nginx-shi-xian-yi-ge-zhu-ji-bu-shu-duo-yu-ming-zhi-xiang-bu-tong-docker-xiang-mu">使用 nginx 实现一个主机部署多域名指向不同 docker 项目</a></li>
<li><a href="#docker-pei-zhi-nginx-zhi-chi-duo-ge-zi-yu-ming-dui-ying-bu-tong-de-xiang-mu-mu-lu">docker 配置 nginx 支持多个子域名对应不同的项目目录</a></li>
</ul>
<!-- tocstop -->

</div>

<h2><a href="#shi-yong-nginx-shi-xian-yi-ge-zhu-ji-bu-shu-duo-yu-ming-zhi-xiang-bu-tong-docker-xiang-mu" class="header-anchor">#</a><span id="shi-yong-nginx-shi-xian-yi-ge-zhu-ji-bu-shu-duo-yu-ming-zhi-xiang-bu-tong-docker-xiang-mu">使用 nginx 实现一个主机部署多域名指向不同 docker 项目</span></h2><p><a href="https://www.cnblogs.com/ejiyuan/p/10316298.html">https://www.cnblogs.com/ejiyuan/p/10316298.html</a></p>
<h2><a href="#docker-pei-zhi-nginx-zhi-chi-duo-ge-zi-yu-ming-dui-ying-bu-tong-de-xiang-mu-mu-lu" class="header-anchor">#</a><span id="docker-pei-zhi-nginx-zhi-chi-duo-ge-zi-yu-ming-dui-ying-bu-tong-de-xiang-mu-mu-lu">docker 配置 nginx 支持多个子域名对应不同的项目目录</span></h2><p><a href="https://blog.csdn.net/weixin_39218464/article/details/109555147">https://blog.csdn.net/weixin_39218464/article/details/109555147</a></p>
]]></content>
      <tags>
        <tag>网络运维</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>个人建站相关</title>
    <url>/2021/09/17/%E4%B8%AA%E4%BA%BA%E5%BB%BA%E7%AB%99%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#ssh-yuan-cheng-lian-jie-fu-wu-qi">ssh 远程连接服务器</a></li>
<li><a href="#shang-chuan-yuan-ma-wen-jian-dao-fu-wu-qi">上传源码/文件到服务器</a><ul>
<li><a href="#zhi-jie-shang-chuan-dao-fu-wu-qi">直接上传到服务器</a></li>
<li><a href="#zai-fu-wu-qi-shang-da-jian-yi-ge-git-scp-fu-wu-jin-xing-tong-bu">在服务器上搭建一个 git/scp 服务进行同步</a><ul>
<li><a href="#da-jian-git-si-fu">搭建 git 私服</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#chi-xu-yun-xing-fu-wu-node-js-huan-jing">持续运行服务(node.js 环境)</a></li>
<li><a href="#fang-huo-qiang">防火墙</a></li>
<li><a href="#docker-xiang-guan">docker 相关</a><ul>
<li><a href="#ji-ben-gai-nian">基本概念</a></li>
<li><a href="#chuang-jian-docker-huan-jing">创建 docker 环境</a></li>
<li><a href="#ru-he-shi-yong-docker-bu-shu-ying-yong">如何使用 docker 部署应用</a><ul>
<li><a href="#rong-qi-guan-li-gong-ju-tui-jian">容器管理工具(推荐)</a></li>
<li><a href="#ding-zhi-jing-xiang">定制镜像</a></li>
<li><a href="#gou-jian-jing-xiang-bing-qi-dong-rong-qi">构建镜像并启动容器</a></li>
<li><a href="#jing-xiang-cao-zuo">镜像操作</a></li>
<li><a href="#rong-qi-cao-zuo">容器操作</a></li>
</ul>
</li>
<li><a href="#jie-he-a-li-yun-fei-liu-yi-jian-bu-shu">结合阿里云飞流一键部署</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->

</div>

<h1><a href="#ssh-yuan-cheng-lian-jie-fu-wu-qi" class="header-anchor">#</a><span id="ssh-yuan-cheng-lian-jie-fu-wu-qi">ssh 远程连接服务器</span></h1><p>使用 item-2，通过密钥连接，操作如下</p>
<p>1.在阿里云上生成密钥并重启服务器</p>
<p>2.<code>cd ~/.ssh</code>, 在该目录下新建 config 文件（无后缀名）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># host_name</span><br><span class="line">Host aliyun-lite</span><br><span class="line">    HostName xxx.xxx</span><br><span class="line">    User root</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    # 密钥文件路径</span><br><span class="line">    IdentityFile &#123;src_to_identity_file&#125;</span><br></pre></td></tr></table></figure>

<p>3.连接指定 host<br><code>ssh aliyun-lite</code> 即 <code>ssh &#123;host_name&#125;</code></p>
<h1><a href="#shang-chuan-yuan-ma-wen-jian-dao-fu-wu-qi" class="header-anchor">#</a><span id="shang-chuan-yuan-ma-wen-jian-dao-fu-wu-qi">上传源码/文件到服务器</span></h1><h2><a href="#zhi-jie-shang-chuan-dao-fu-wu-qi" class="header-anchor">#</a><span id="zhi-jie-shang-chuan-dao-fu-wu-qi">直接上传到服务器</span></h2><p>ftp（文件传输协议）方式，ftp 允许用户以文件操作的方式（如文件的增、删、改、查、传送等）与另一主机相互通信</p>
<p>五个最佳 FTP 客户端工具： <a href="https://blog.csdn.net/yissan/article/details/51675651">https://blog.csdn.net/yissan/article/details/51675651</a></p>
<h2><a href="#zai-fu-wu-qi-shang-da-jian-yi-ge-git-scp-fu-wu-jin-xing-tong-bu" class="header-anchor">#</a><span id="zai-fu-wu-qi-shang-da-jian-yi-ge-git-scp-fu-wu-jin-xing-tong-bu">在服务器上搭建一个 git/scp 服务进行同步</span></h2><h3><a href="#da-jian-git-si-fu" class="header-anchor">#</a><span id="da-jian-git-si-fu">搭建 git 私服</span></h3><p><a href="https://segmentfault.com/a/1190000013999832">https://segmentfault.com/a/1190000013999832</a></p>
<h1><a href="#chi-xu-yun-xing-fu-wu-node-js-huan-jing" class="header-anchor">#</a><span id="chi-xu-yun-xing-fu-wu-node-js-huan-jing">持续运行服务(node.js 环境)</span></h1><p>安装 pm2 依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pm2 start example.js  &#x2F;&#x2F;启动服务</span><br><span class="line">pm2 list &#x2F;&#x2F;查看启动的应用</span><br><span class="line">pm2 show example.js &#x2F;&#x2F;查看详细信息</span><br><span class="line">pm2 logs &#x2F;&#x2F;查看当前信息</span><br><span class="line">pm2 stop example.js &#x2F;&#x2F;停止example</span><br><span class="line">pm2 delete example.js &#x2F;&#x2F;删除example</span><br></pre></td></tr></table></figure>

<h1><a href="#fang-huo-qiang" class="header-anchor">#</a><span id="fang-huo-qiang">防火墙</span></h1><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 状态</span></span><br><span class="line">firewall-cmd --state</span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="comment"># 开启</span></span><br><span class="line">systemctl start firewalld</span><br></pre></td></tr></table></figure>

<h1><a href="#docker-xiang-guan" class="header-anchor">#</a><span id="docker-xiang-guan">docker 相关</span></h1><h2><a href="#ji-ben-gai-nian" class="header-anchor">#</a><span id="ji-ben-gai-nian">基本概念</span></h2><ul>
<li>镜像<br>操作系统分内核和用户空间<br>对于 Linux 而言，内核启动后，会挂载<code>root 文件系统</code>为其提供用户空间支持, Docker 镜像是一个特殊的 root 文件系统，挂载后能提供一些额外功能<br>docker 镜像是分层存储的架构，即由一组文件系统组成</li>
<li>容器<br>镜像=类，容器=实例，容器也是分层的<br>容器写数据到<code>数据卷</code>，读取<code>容器存储层</code>或<code>数据卷</code>的数据，具体数据流后续再详谈。 容器消亡时，容器存储层消亡，<code>数据卷</code>不会消亡</li>
<li>仓库<br>一个 Docker Registry 中可以包含多个仓库（Repository），每个仓库可以包含多个标签（Tag），每个标签对应一个镜像，通常，一个仓库会包含同一个软件不同版本的镜像</li>
</ul>
<h2><a href="#chuang-jian-docker-huan-jing" class="header-anchor">#</a><span id="chuang-jian-docker-huan-jing">创建 docker 环境</span></h2><p>阿里云购买服务器时可选择 docker 镜像并一键部署</p>
<h2><a href="#ru-he-shi-yong-docker-bu-shu-ying-yong" class="header-anchor">#</a><span id="ru-he-shi-yong-docker-bu-shu-ying-yong">如何使用 docker 部署应用</span></h2><ul>
<li>定制镜像</li>
<li>构建镜像</li>
<li>启动容器</li>
</ul>
<h3><a href="#rong-qi-guan-li-gong-ju-tui-jian" class="header-anchor">#</a><span id="rong-qi-guan-li-gong-ju-tui-jian">容器管理工具(推荐)</span></h3><p>portainer.io<br><a href="https://documentation.portainer.io/v2.0/deploy/ceinstalldocker/">https://documentation.portainer.io/v2.0/deploy/ceinstalldocker/</a><br><a href="https://www.cnblogs.com/ExMan/p/11657069.html">https://www.cnblogs.com/ExMan/p/11657069.html</a></p>
<h3><a href="#ding-zhi-jing-xiang" class="header-anchor">#</a><span id="ding-zhi-jing-xiang">定制镜像</span></h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> NODE_ENV=production</span><br><span class="line"><span class="keyword">ENV</span> NODE_VERSION <span class="number">14.17</span>.<span class="number">3</span></span><br><span class="line"><span class="keyword">ENV</span> YARN_VERSION <span class="number">1.22</span>.<span class="number">11</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> WORK_DIR=/usr/app/blog</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行命令，创建文件夹</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p <span class="variable">$&#123;WORK_DIR&#125;</span></span></span><br><span class="line"><span class="comment"># 修改文件夹权限</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod -R 777 <span class="variable">$&#123;WORK_DIR&#125;</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p <span class="variable">$&#123;WORK_DIR&#125;</span>/logs</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod -R 777 <span class="variable">$&#123;WORK_DIR&#125;</span>/logs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set working directory</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$&#123;WORK_DIR&#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> node --version &amp;&amp; npm --version &amp;&amp; yarn --version</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> [<span class="string">&quot;package.json&quot;</span>, <span class="string">&quot;package-lock.json*&quot;</span>, <span class="string">&quot;./&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install PM2 globally</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yarn global add pm2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install dependencies</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yarn</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 校正时间</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Copy all files</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./ ./</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有文件和文件夹，包括隐藏目录</span></span><br><span class="line"><span class="comment"># cntofu.com/book/139/index.html</span></span><br><span class="line"><span class="comment"># https://zhuanlan.zhihu.com/p/57390458</span></span><br><span class="line"><span class="comment"># 等同 RUN ls -a -l -R -I &quot;node_modules*&quot;</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ls -alR -I <span class="string">&quot;node_modules*&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;pm2-runtime&quot;</span>, <span class="string">&quot;start&quot;</span>, <span class="string">&quot;--raw&quot;</span>, <span class="string">&quot;app.js&quot;</span>, <span class="string">&quot;--env&quot;</span>, <span class="string">&quot;production&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<h3><a href="#gou-jian-jing-xiang-bing-qi-dong-rong-qi" class="header-anchor">#</a><span id="gou-jian-jing-xiang-bing-qi-dong-rong-qi">构建镜像并启动容器</span></h3><p>cd 至项目在主机上的目录，执行 build.sh</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./build.sh <span class="comment"># 提示没有权限</span></span><br><span class="line">chmod 777 ./build.sh <span class="comment"># 修改该文件的权限</span></span><br><span class="line">./build.sh <span class="comment"># 再次执行</span></span><br></pre></td></tr></table></figure>

<p>项目结构参考：<a href="https://github.com/LahmYing/deploy-by-docker">https://github.com/LahmYing/deploy-by-docker</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ./build.sh</span></span><br><span class="line"><span class="comment"># 只需修改版本号，即新建对应版本的镜像和容器</span></span><br><span class="line"><span class="comment"># 暂不指定端口，方便在 portainer 处理版本和端口</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># command result to var &#x27;tag&#x27;</span></span><br><span class="line">tag=$(date +%Y_%m_%d_%H_%M_%S)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建镜像</span></span><br><span class="line">docker build -t blog:<span class="variable">$&#123;tag&#125;</span> .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">docker run \</span><br><span class="line">    -itd \</span><br><span class="line">    --name blog_<span class="variable">$&#123;tag&#125;</span> \</span><br><span class="line">    --restart always \</span><br><span class="line">    blog:<span class="variable">$&#123;tag&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line"><span class="comment"># docker exec -i -t blog /bin/bash</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3><a href="#jing-xiang-cao-zuo" class="header-anchor">#</a><span id="jing-xiang-cao-zuo">镜像操作</span></h3><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从 Docker Hub 网站搜索镜像</span></span><br><span class="line">docker search &#123;image&#125;</span><br><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">docker pull &#123;image&#125;</span><br><span class="line"><span class="comment"># 本地主机上的镜像</span></span><br><span class="line">docker images</span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">docker rmi &#123;image&#125;</span><br></pre></td></tr></table></figure>

<h3><a href="#rong-qi-cao-zuo" class="header-anchor">#</a><span id="rong-qi-cao-zuo">容器操作</span></h3><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基于镜像新建并启动容器</span></span><br><span class="line">docker run &#123;OPTIONS&#125; &#123;image&#125;</span><br><span class="line"><span class="comment"># OPTIONS 见 https://www.runoob.com/docker/docker-run-command.html</span></span><br><span class="line"><span class="comment"># -d: 后台运行容器，并返回容器ID, --name=&quot;nginx-lb&quot;: 为容器指定一个名称</span></span><br><span class="line">docker run -d --name=<span class="string">&quot;nginx-lb&quot;</span> &#123;主机端口&#125;:&#123;容器端口&#125; &#123;image&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出运行中的容器</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="comment"># 列出所有容器</span></span><br><span class="line">docker ps -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动/停止</span></span><br><span class="line">docker start/stop &#123;容器ID&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制删除容器</span></span><br><span class="line">docker rm -f &#123;容器A的ID&#125; &#123;容器B的ID&#125;</span><br></pre></td></tr></table></figure>

<h2><a href="#jie-he-a-li-yun-fei-liu-yi-jian-bu-shu" class="header-anchor">#</a><span id="jie-he-a-li-yun-fei-liu-yi-jian-bu-shu">结合阿里云飞流一键部署</span></h2><p>阿里云飞流 <a href="https://flow.teambition.com/">https://flow.teambition.com/</a><br>步骤如下：</p>
<ul>
<li>代码源： 授权使用 github</li>
<li>node.js 构建命令： <code>yarn</code></li>
<li>构建镜像并推到阿里云镜像仓库<br>需要新建一个<a href="https://cr.console.aliyun.com/cn-shenzhen/instances">阿里云镜像仓库</a>（公开，有时要在 portainer.io 修改容器与主机端口并新建容器，portainer 只能 pull 公开的镜像）</li>
<li>启动容器</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># $myimage 是变量，是上一步飞流构建的镜像</span></span><br><span class="line"><span class="built_in">export</span> myimage=$(<span class="built_in">echo</span> <span class="variable">$myimage</span> | base64 -d)</span><br><span class="line">tag=$(date +%Y_%m_%d_%H_%M_%S)</span><br><span class="line">docker run \</span><br><span class="line">    -itd \</span><br><span class="line">    -p 80:80  \</span><br><span class="line">    --name blog_<span class="variable">$tag</span> \</span><br><span class="line">    --restart always \</span><br><span class="line">    <span class="variable">$myimage</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>网络运维</tag>
        <tag>docker</tag>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>事件与监听</title>
    <url>/2021/04/22/%E4%BA%8B%E4%BB%B6%E4%B8%8E%E7%9B%91%E5%90%AC/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#xie-zai-unload-wen-dang-zhi-qian-xiang-web-fu-wu-qi-fa-song-shu-ju-mai-dian">卸载（unload）文档之前向 web 服务器发送数据（埋点）</a></li>
<li><a href="#pagehide-event">pagehide event</a></li>
<li><a href="#document-readystate">document.readyState</a></li>
<li><a href="#shang-xia-wen-qie-huan">上下文切换</a></li>
<li><a href="#usecapture">useCapture</a></li>
<li><a href="#zhi-xing-shun-xu">执行顺序</a></li>
<li><a href="#currenttarget-he-target">currentTarget 和 target</a></li>
<li><a href="#zuo-biao-xiang-guan">坐标相关</a></li>
</ul>
<!-- tocstop -->

</div>

<h1><a href="#xie-zai-unload-wen-dang-zhi-qian-xiang-web-fu-wu-qi-fa-song-shu-ju-mai-dian" class="header-anchor">#</a><span id="xie-zai-unload-wen-dang-zhi-qian-xiang-web-fu-wu-qi-fa-song-shu-ju-mai-dian">卸载（unload）文档之前向 web 服务器发送数据（埋点）</span></h1><p>Navigator.sendBeacon()</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// onunload 特性(乃至 unload 事件本身) 并非使用 sendBeacon()的正确途径，</span></span><br><span class="line"><span class="comment">// 要调用 sendBeacon() 接口，应当使用 visibilitychange 和 pagehide 事件</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;unload&quot;</span>, logData, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> apiUrl = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  navigator.sendBeacon(apiUrl, analyticsData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1><a href="#pagehide-event" class="header-anchor">#</a><span id="pagehide-event">pagehide event</span></h1><p>当浏览器在显示与会话历史记录不同的页面的过程中隐藏当前页面时，<strong><em>正常跳转、点击浏览器前进后退都会触发</em></strong>，离开页面不建议使用 unload beforeunload event</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;pagehide&quot;</span>, hide);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hide</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">debugger</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1><a href="#document-readystate" class="header-anchor">#</a><span id="document-readystate">document.readyState</span></h1><ul>
<li>loading（正在加载）</li>
<li>interactive（可交互）<br>文档已被解析，”正在加载”状态结束，但是诸如图像，样式表和框架之类的子资源仍在加载</li>
<li>complete（完成）<br>文档和所有子资源已完成加载</li>
</ul>
<h1><a href="#shang-xia-wen-qie-huan" class="header-anchor">#</a><span id="shang-xia-wen-qie-huan">上下文切换</span></h1><p>当使用 浏览器内置的 addEventListener() 时，上下文切换为目标 HTML 元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.appName = <span class="string">&quot;wem&quot;</span>;</span><br><span class="line">  <span class="built_in">document</span>.body.addEventListener(</span><br><span class="line">    <span class="string">&quot;click&quot;</span>,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 上下文发生改变，因此 appName 是 undefined</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.appName);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="literal">false</span></span><br><span class="line">  );</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<h1><a href="#usecapture" class="header-anchor">#</a><span id="usecapture">useCapture</span></h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// useCapture: 是否使用捕获模式</span></span><br><span class="line">div.addEventListener(</span><br><span class="line">  <span class="string">&quot;blur&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;,</span><br><span class="line">  useCapture</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h1><a href="#zhi-xing-shun-xu" class="header-anchor">#</a><span id="zhi-xing-shun-xu">执行顺序</span></h1><p>一直捕获（触发所有父级别的捕获类型的事件），直到所触发的子元素，后冒泡。若该子元素上同时绑定了 捕获事件 A 和 冒泡事件 B，AB 的执行顺序同脚本中的顺序</p>
<p>阻止冒泡 e.stopPropagation()<br>阻止默认行为 e.preventDefault()</p>
<h1><a href="#currenttarget-he-target" class="header-anchor">#</a><span id="currenttarget-he-target">currentTarget 和 target</span></h1><p>currentTarget 总是指向事件绑定的元素，而 Event.target 则是事件触发的元素</p>
<h1><a href="#zuo-biao-xiang-guan" class="header-anchor">#</a><span id="zuo-biao-xiang-guan">坐标相关</span></h1><p>clientX：当鼠标事件发生时（不管是 onclick，还是 omousemove，onmouseover 等），鼠标相对于浏览器（这里说的是浏览器的有效区域）x 轴的位置；<br>clientY：当鼠标事件发生时，鼠标相对于浏览器（这里说的是浏览器的有效区域）y 轴的位置；<br>screenX：当鼠标事件发生时，鼠标相对于显示器屏幕 x 轴的位置；<br>screenY：当鼠标事件发生时，鼠标相对于显示器屏幕 y 轴的位置；<br>offsetX：当鼠标事件发生时，鼠标相对于事件源 x 轴的位置<br>offsetY：当鼠标事件发生时，鼠标相对于事件源 y 轴的位置<br>pageX，pageY：事件发生时相对于页面（如 viewport 区域）的坐标</p>
]]></content>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>其他</title>
    <url>/2021/09/06/%E5%85%B6%E4%BB%96/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#sheng-cheng-mu-lu-shu">生成目录树</a></li>
<li><a href="#vim">vim</a></li>
</ul>
<!-- tocstop -->

</div>

<h1><a href="#sheng-cheng-mu-lu-shu" class="header-anchor">#</a><span id="sheng-cheng-mu-lu-shu">生成目录树</span></h1><p>win 下<br><code>$ tree /f &gt; tree.md</code></p>
<p>mac 下 bash<br><code>tree &gt; tree.md</code></p>
<h1><a href="#vim" class="header-anchor">#</a><span id="vim">vim</span></h1><p>i 进入编辑模式<br>esc 后输入 :wq 保存退出</p>
]]></content>
      <tags>
        <tag>其他</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>前端项目在阿里云部署</title>
    <url>/2021/02/26/%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%9C%A8%E9%98%BF%E9%87%8C%E4%BA%91%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#ye-wu-liu-cheng">业务流程</a></li>
</ul>
<!-- tocstop -->

</div>

<h1><a href="#ye-wu-liu-cheng" class="header-anchor">#</a><span id="ye-wu-liu-cheng">业务流程</span></h1><img src="/2021/02/26/%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%9C%A8%E9%98%BF%E9%87%8C%E4%BA%91%E9%83%A8%E7%BD%B2/%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%9C%A8%E9%98%BF%E9%87%8C%E4%BA%91%E9%83%A8%E7%BD%B2.jpg" class width="800" height="600" title="前端项目在阿里云部署">
]]></content>
      <tags>
        <tag>网络运维</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>匹配文件</title>
    <url>/2021/08/27/%E5%8C%B9%E9%85%8D%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h1><a href="#pi-pei-wen-jian-shell-he-js" class="header-anchor">#</a><span id="pi-pei-wen-jian-shell-he-js">匹配文件（shell 和 js）</span></h1><p><a href="https://github.com/isaacs/node-glob">https://github.com/isaacs/node-glob</a><br><a href="https://github.com/isaacs/minimatch">https://github.com/isaacs/minimatch</a></p>
<h2><a href="#xiang-shell-yi-yang-pi-pei-wen-jian" class="header-anchor">#</a><span id="xiang-shell-yi-yang-pi-pei-wen-jian">像 shell 一样匹配文件</span></h2><p>shell 本身支持匹配文件，node-glob 包使我们可以在 js 中像 shell 一样去匹配文件</p>
<h3><a href="#yu-fa" class="header-anchor">#</a><span id="yu-fa">语法</span></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 列出匹配的文件 --&gt;</span><br><span class="line">$ ls src&#x2F;**&#x2F;*.js</span><br></pre></td></tr></table></figure>

<p><code>*</code> 匹配任意长度任意字符<br><code>?</code> 匹配任意单个字符<br><code>[list]</code> 匹配指定范围内（list）任意单个字符，也可以是单个字符组成的集合<br><code>[^list]</code> 匹配指定范围外的任意单个字符或字符集合<br><code>[!list]</code> 同[^list]<br><code>&#123;str1,str2,...&#125;</code> 匹配 srt1 或者 srt2 或者更多字符串，也可以是集合</p>
]]></content>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>后端应用相关</title>
    <url>/2021/09/17/%E5%90%8E%E7%AB%AF%E5%BA%94%E7%94%A8%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#node-js-web-kuang-jia">node.js web 框架</a></li>
</ul>
<!-- tocstop -->

</div>

<h1><a href="#node-js-web-kuang-jia" class="header-anchor">#</a><span id="node-js-web-kuang-jia">node.js web 框架</span></h1><p>koa.js,egg.js,express.js 三者有什么区别？ <a href="https://www.zhihu.com/question/391604647/answer/1327741879">https://www.zhihu.com/question/391604647/answer/1327741879</a></p>
]]></content>
      <tags>
        <tag>后端相关</tag>
      </tags>
  </entry>
  <entry>
    <title>基于nexus搭建私有npm服务器</title>
    <url>/2021/04/08/%E5%9F%BA%E4%BA%8Enexus%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89npm%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->



<!-- tocstop -->

</div>

<img src="/2021/04/08/%E5%9F%BA%E4%BA%8Enexus%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89npm%E6%9C%8D%E5%8A%A1%E5%99%A8/%E5%9F%BA%E4%BA%8Enexus%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89npm%E6%9C%8D%E5%8A%A1%E5%99%A8.png" class width="1000" height="1000">
]]></content>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>应用架构模式</title>
    <url>/2021/09/23/%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#jia-gou-shi-dui-ke-guan-de-tuo-xie">架构是对客观的妥协</a></li>
<li><a href="#qian-hou-bu-fen-chi-mvc">前后不分离-MVC</a><ul>
<li><a href="#modal">modal</a></li>
<li><a href="#view">view</a></li>
<li><a href="#controller">controller</a></li>
</ul>
</li>
<li><a href="#qian-hou-fen-chi">前后分离</a></li>
<li><a href="#can-kao">参考</a></li>
</ul>
<!-- tocstop -->

</div>

<h1><a href="#jia-gou-shi-dui-ke-guan-de-tuo-xie" class="header-anchor">#</a><span id="jia-gou-shi-dui-ke-guan-de-tuo-xie">架构是对客观的妥协</span></h1><ul>
<li>应用要处理的事务太多，一个人开发不过来，需要分离 view 和 model，一个来处理 view (这个人成了前端)，一个来处理 model (这个成了后端)</li>
<li>一台服务器撑不起 model 和 data 的操作，那么就分布式吧 balabala</li>
<li>…</li>
</ul>
<h1><a href="#qian-hou-bu-fen-chi-mvc" class="header-anchor">#</a><span id="qian-hou-bu-fen-chi-mvc">前后不分离-MVC</span></h1><p>MVC 的本质就是分离界面和逻辑</p>
<h2><a href="#modal" class="header-anchor">#</a><span id="modal">modal</span></h2><ul>
<li>应用逻辑层的对象，我理解为业务对象。如 Account、Order，包含业务逻辑方法、操作，如 Account.sendEmail()、Order.calculateTotal()</li>
<li>介于数据库和 controller 之间，可通过 SQL(结构化查询语言) 与数据库进行交互</li>
</ul>
<h2><a href="#view" class="header-anchor">#</a><span id="view">view</span></h2><p>视图，modal 的数据的展示</p>
<h2><a href="#controller" class="header-anchor">#</a><span id="controller">controller</span></h2><ul>
<li>也叫 View Controller，视图控制器，注意与整个应用的集中控制器 Application Controller 区分开</li>
<li>控制数据流向 modal，并在数据变化时更新 view，“用户发了个 xx 请求，带了参数 {a:xxx}，哪个 B model，找你的，参数也给你，你处理好了把数据还给我，我还给 view”</li>
<li>controller 层越薄越好，业务逻辑尽量放到对应的 model 下而不是放 controller 处</li>
</ul>
<img src="/2021/09/23/%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/mvc.jpg" class width="800" height="600">

<p>上图中的 model (甭管它是 Java Bean 还是其他的名称)，也可以直接将 model 数据回传给 view，不一定需要 controller 经手</p>
<h1><a href="#qian-hou-fen-chi" class="header-anchor">#</a><span id="qian-hou-fen-chi">前后分离</span></h1><p>mvp mvvm 等<br>前后不分离：后端渲染生成 html，ajax 诞生前都是这样</p>
<h1><a href="#can-kao" class="header-anchor">#</a><span id="can-kao">参考</span></h1><p><a href="https://www.zhihu.com/question/22886622/answer/48378638">https://www.zhihu.com/question/22886622/answer/48378638</a><br><a href="https://www.runoob.com/design-pattern/mvc-pattern.html">https://www.runoob.com/design-pattern/mvc-pattern.html</a><br><a href="https://growth.phodal.com/#mvc">https://growth.phodal.com/#mvc</a></p>
]]></content>
      <tags>
        <tag>应用架构</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构</title>
    <url>/2021/09/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#can-kao">参考</a></li>
<li><a href="#dui-lie">队列</a></li>
<li><a href="#zhan-stack">栈 Stack</a></li>
<li><a href="#lian-biao">链表</a></li>
<li><a href="#qi-ta-shu-ju-jie-gou">其他数据结构</a></li>
<li><a href="#ji-he-set">集合 Set</a><ul>
<li><a href="#chang-jian-fang-fa">常见方法</a></li>
</ul>
</li>
<li><a href="#ha-xi-biao-hash-table">哈希表 Hash Table</a><ul>
<li><a href="#chang-jian-fang-fa-1">常见方法</a></li>
</ul>
</li>
<li><a href="#shu">树</a><ul>
<li><a href="#xiang-guan-gai-nian">相关概念</a></li>
<li><a href="#er-cha-cha-zhao-shu">二叉查找树</a></li>
</ul>
</li>
<li><a href="#zi-dian-shu-trie">字典树 Trie</a><ul>
<li><a href="#chang-yong-fang-fa-1">常用方法</a></li>
</ul>
</li>
<li><a href="#tu-graph">图 Graph</a><ul>
<li><a href="#guang-du-you-xian-sou-suo-suan-fa">广度优先搜索算法</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->

</div>

<h2><a href="#can-kao" class="header-anchor">#</a><span id="can-kao">参考</span></h2><p><a href="https://segmentfault.com/a/1190000020011987#item-4">常见数据结构和 Javascript 实现总结</a><br><a href="https://blog.csdn.net/qq_36667170/article/details/84142019">树的高度和深度以及结点的高度和深度</a></p>
<h2><a href="#dui-lie" class="header-anchor">#</a><span id="dui-lie">队列</span></h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> Queue = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// data 是存储元素的数组</span></span><br><span class="line">  <span class="built_in">this</span>.data = [];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入队</span></span><br><span class="line">Queue.prototype.enqueue = <span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.data.push(element);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出队</span></span><br><span class="line">Queue.prototype.dequeue = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.data.splice(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 队列长度</span></span><br><span class="line">Queue.prototype.length = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.data.length;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空队列</span></span><br><span class="line">Queue.prototype.empty = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.data = [];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="comment">// let q = new Queue()</span></span><br><span class="line"><span class="comment">// q.enqueue(1)</span></span><br><span class="line"><span class="comment">// q.enqueue(2)</span></span><br><span class="line"><span class="comment">// q.enqueue(3)</span></span><br><span class="line"><span class="comment">// log(&#x27;length&#x27;, q.length())</span></span><br><span class="line"><span class="comment">// log(q.dequeue())</span></span><br><span class="line"><span class="comment">// q.enqueue(4)</span></span><br><span class="line"><span class="comment">// log(q.dequeue())</span></span><br><span class="line"><span class="comment">// log(q.dequeue())</span></span><br><span class="line"><span class="comment">// log(q.dequeue())</span></span><br></pre></td></tr></table></figure>

<h2><a href="#zhan-stack" class="header-anchor">#</a><span id="zhan-stack">栈 Stack</span></h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常见的 3 个操作：push pop top</span></span><br><span class="line"><span class="keyword">let</span> Stack = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.data = []</span><br><span class="line"></span><br><span class="line"><span class="comment">// push 添加一个元素</span></span><br><span class="line">Stack.prototype.push = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.data.push(e)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pop 删除并返回最新添加的元素</span></span><br><span class="line">Stack.prototype.pop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="built_in">this</span>.data.length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.data.splice(index, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// top 仅返回最新添加的元素</span></span><br><span class="line">Stack.prototype.top = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="built_in">this</span>.data.length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.data[index]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">let s = new Stack()</span></span><br><span class="line"><span class="comment">s.push(&#x27;hello&#x27;)</span></span><br><span class="line"><span class="comment">s.push(&#x27;world&#x27;)</span></span><br><span class="line"><span class="comment">log(s.pop())</span></span><br><span class="line"><span class="comment">log(s.pop())</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">let str = &#x27;hello&#x27;</span></span><br><span class="line"><span class="comment">for (let i = 0; i &lt; str.length; i++) &#123;</span></span><br><span class="line"><span class="comment">    s.push(str[i])</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">let str1 = &#x27;&#x27;</span></span><br><span class="line"><span class="comment">for (let i = 0; i &lt; str.length; i++) &#123;</span></span><br><span class="line"><span class="comment">    str1 += s.pop(str[i])</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">log(str1)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2><a href="#lian-biao" class="header-anchor">#</a><span id="lian-biao">链表</span></h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 链表实现</span></span><br><span class="line"><span class="keyword">let</span> Node = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.element = e;</span><br><span class="line">  <span class="built_in">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">let n1 = new Node(1)</span></span><br><span class="line"><span class="comment">let n2 = new Node(2)</span></span><br><span class="line"><span class="comment">let n3 = new Node(3)</span></span><br><span class="line"><span class="comment">n1.next = n2</span></span><br><span class="line"><span class="comment">n2.next = n3</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">let n = n1</span></span><br><span class="line"><span class="comment">while(n != null) &#123;</span></span><br><span class="line"><span class="comment">    log(&#x27;遍历链表&#x27;, n.element)</span></span><br><span class="line"><span class="comment">    n = n.next</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> LinkedList = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.head = <span class="keyword">new</span> Node();</span><br><span class="line">  <span class="built_in">this</span>._length = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在链表末尾 增加一个元素</span></span><br><span class="line">LinkedList.prototype.append = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> node = <span class="keyword">new</span> Node(e);</span><br><span class="line">  <span class="keyword">let</span> n = <span class="built_in">this</span>.head;</span><br><span class="line">  <span class="keyword">while</span> (n.next != <span class="literal">null</span>) &#123;</span><br><span class="line">    n = n.next;</span><br><span class="line">  &#125;</span><br><span class="line">  n.next = node;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="built_in">this</span>._length++;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个元素的 index</span></span><br><span class="line">LinkedList.prototype.indexOf = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> index = -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> n = <span class="built_in">this</span>.head;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (n.next != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e === n.element) &#123;</span><br><span class="line">      index = i;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    n = n.next;</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> index;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回链表的长度</span></span><br><span class="line">LinkedList.prototype.length = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>._length;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">LinkedList.prototype.log = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> n = <span class="built_in">this</span>.head.next;</span><br><span class="line">  log(<span class="string">&quot;遍历链表&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> (n != <span class="literal">null</span>) &#123;</span><br><span class="line">    log(<span class="string">&quot; &gt; &quot;</span>, n.element);</span><br><span class="line">    n = n.next;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">let list = new LinkedList()</span></span><br><span class="line"><span class="comment">list.append(&#x27;hello&#x27;)</span></span><br><span class="line"><span class="comment">list.append(&#x27;gua&#x27;)</span></span><br><span class="line"><span class="comment">list.append(&#x27;你好&#x27;)</span></span><br><span class="line"><span class="comment">list.log()</span></span><br><span class="line"><span class="comment">log(list.length())</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2><a href="#qi-ta-shu-ju-jie-gou" class="header-anchor">#</a><span id="qi-ta-shu-ju-jie-gou">其他数据结构</span></h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">hash table  哈希表（散列表）</span></span><br><span class="line"><span class="comment">tree        树</span></span><br><span class="line"><span class="comment">set         集合</span></span><br><span class="line"><span class="comment">graph       图</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">哈希表就是用 字符串 当下标，也就是 js 中的对象的实现方式</span></span><br><span class="line"><span class="comment">也就是其他语言中的 字典</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">原理是用字符串 算出一个数字 然后用这个数字当下标存东西</span></span><br><span class="line"><span class="comment">比如 gua 这个字符串 我们用每个字符乘以一个数字最后求余得到下标</span></span><br><span class="line"><span class="comment">从字符串到数字的操作叫做 hash</span></span><br><span class="line"><span class="comment">// hash(&#x27;gua&#x27;) = 1</span></span><br><span class="line"><span class="comment">// hash(&#x27;hs&#x27;) = 3</span></span><br><span class="line"><span class="comment">【坑1， 坑2， 坑3， 坑4， 坑5， 坑6】</span></span><br><span class="line"><span class="comment">  gua       hs              wh</span></span><br><span class="line"><span class="comment">  xiao      lj</span></span><br><span class="line"><span class="comment">            bl</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">树一般是用来实现二叉搜索树的，应用范围不多</span></span><br><span class="line"><span class="comment">     6</span></span><br><span class="line"><span class="comment">    / \</span></span><br><span class="line"><span class="comment">   4   8</span></span><br><span class="line"><span class="comment">    \ / \</span></span><br><span class="line"><span class="comment">    57  9</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2><a href="#ji-he-set" class="header-anchor">#</a><span id="ji-he-set">集合 Set</span></h2><p>Set 中的元素 <code>不重复</code>、<code>无序</code></p>
<h3><a href="#chang-jian-fang-fa" class="header-anchor">#</a><span id="chang-jian-fang-fa">常见方法</span></h3><ul>
<li>values： 返回集合中的所有元素</li>
<li>size： 返回集合中元素的个数</li>
<li>has： 判断集合中是否存在某个元素</li>
<li>add： 向集合中添加元素</li>
<li>remove： 从集合中移除某个元素</li>
<li>union： 返回两个集合的并集</li>
<li>intersection： 返回两个集合的交集</li>
<li>difference： 返回两个集合的差集</li>
<li>subset： 判断一个集合是否为另一个集合的子集</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MySet</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> collection = [];</span><br><span class="line">  <span class="built_in">this</span>.has = <span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 如果不存在，则返回-1</span></span><br><span class="line">    <span class="keyword">return</span> collection.indexOf(element) !== -<span class="number">1</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.values = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> collection;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.size = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> collection.length;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.add = <span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.has(element)) &#123;</span><br><span class="line">      collection.push(element);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.remove = <span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.has(element)) &#123;</span><br><span class="line">      index = collection.indexOf(element);</span><br><span class="line">      collection.splice(index, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.union = <span class="function"><span class="keyword">function</span> (<span class="params">otherSet</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> unionSet = <span class="keyword">new</span> MySet();</span><br><span class="line">    <span class="keyword">let</span> firstSet = <span class="built_in">this</span>.values();</span><br><span class="line">    <span class="keyword">let</span> secondSet = otherSet.values();</span><br><span class="line">    firstSet.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      unionSet.add(e);</span><br><span class="line">    &#125;);</span><br><span class="line">    secondSet.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      unionSet.add(e);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> unionSet;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.intersection = <span class="function"><span class="keyword">function</span> (<span class="params">otherSet</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> intersectionSet = <span class="keyword">new</span> MySet();</span><br><span class="line">    <span class="keyword">let</span> firstSet = <span class="built_in">this</span>.values();</span><br><span class="line">    firstSet.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (otherSet.has(e)) &#123;</span><br><span class="line">        intersectionSet.add(e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> intersectionSet;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.difference = <span class="function"><span class="keyword">function</span> (<span class="params">otherSet</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> differenceSet = <span class="keyword">new</span> MySet();</span><br><span class="line">    <span class="keyword">let</span> firstSet = <span class="built_in">this</span>.values();</span><br><span class="line">    firstSet.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!otherSet.has(e)) &#123;</span><br><span class="line">        differenceSet.add(e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> differenceSet;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.subset = <span class="function"><span class="keyword">function</span> (<span class="params">otherSet</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> firstSet = <span class="built_in">this</span>.values();</span><br><span class="line">    <span class="keyword">return</span> firstSet.every(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> otherSet.has(value);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2><a href="#ha-xi-biao-hash-table" class="header-anchor">#</a><span id="ha-xi-biao-hash-table">哈希表 Hash Table</span></h2><p>Hash Table 内部使用一个 hash 函数将传入的键转换成一串数字，而这串数字将作为键值对实际的 key</p>
<h3><a href="#chang-jian-fang-fa" class="header-anchor">#</a><span id="chang-jian-fang-fa">常见方法</span></h3><ul>
<li>add： 增加一组键值对</li>
<li>remove： 删除一组键值对</li>
<li>lookup： 查找一个键对应的值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hash</span>(<span class="params">string, max</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> hash = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; string.length; i++) &#123;</span><br><span class="line">    hash += string.charCodeAt(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> hash % max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HashTable</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> storage = [];</span><br><span class="line">  <span class="keyword">const</span> storageLimit = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.add = <span class="function"><span class="keyword">function</span> (<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> index = hash(key, storageLimit);</span><br><span class="line">    <span class="keyword">if</span> (storage[index] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      storage[index] = [[key, value]];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> inserted = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; storage[index].length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (storage[index][i][<span class="number">0</span>] === key) &#123;</span><br><span class="line">          storage[index][i][<span class="number">1</span>] = value;</span><br><span class="line">          inserted = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (inserted === <span class="literal">false</span>) &#123;</span><br><span class="line">        storage[index].push([key, value]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.remove = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> index = hash(key, storageLimit);</span><br><span class="line">    <span class="keyword">if</span> (storage[index].length === <span class="number">1</span> &amp;&amp; storage[index][<span class="number">0</span>][<span class="number">0</span>] === key) &#123;</span><br><span class="line">      <span class="keyword">delete</span> storage[index];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; storage[index]; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (storage[index][i][<span class="number">0</span>] === key) &#123;</span><br><span class="line">          <span class="keyword">delete</span> storage[index][i];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.lookup = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> index = hash(key, storageLimit);</span><br><span class="line">    <span class="keyword">if</span> (storage[index] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; storage[index].length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (storage[index][i][<span class="number">0</span>] === key) &#123;</span><br><span class="line">          <span class="keyword">return</span> storage[index][i][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2><a href="#shu" class="header-anchor">#</a><span id="shu">树</span></h2><h3><a href="#xiang-guan-gai-nian" class="header-anchor">#</a><span id="xiang-guan-gai-nian">相关概念</span></h3><ul>
<li>Leaf（叶节点）：没有子节点的节点</li>
<li>Edge（边）：两个节点之间的连接线</li>
<li>Path（路径）：从源节点到目标节点的连续边</li>
<li>Degree of Node（节点的度）：表示拥有的子节点的个数</li>
<li>Height of Tree（树的高度）：也即深度，即树的最大层数（根节点层数从 1 开始，从 0 需减 1 层）</li>
<li>Height of Node（节点的高度）：该节点树内的叶节点的最大层数。叶节点高度为 1，往上节点的高度递增。一个节点的高度取最大值</li>
<li>Depth of Node（节点的深度）：从根节点到该节点的层数</li>
</ul>
<p><code>层数一般从1开始</code></p>
<h4><a href="#shu-jie-dian-de-gao-du" class="header-anchor">#</a><span id="shu-jie-dian-de-gao-du">树节点的高度</span></h4><!-- ![树节点高度.jpg](https://cdn.nlark.com/yuque/0/2020/jpeg/759265/1584860865338-5d2f8b1b-534e-446c-9a0c-db4d50f1cdc2.jpeg#align=left&display=inline&height=418&name=%E6%A0%91%E8%8A%82%E7%82%B9%E9%AB%98%E5%BA%A6.jpg&originHeight=946&originWidth=1466&size=153072&status=done&style=none&width=649) -->

<img src="/2021/09/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E8%8A%82%E7%82%B9%E7%9A%84%E9%AB%98%E5%BA%A6.jpeg" class width="800" height="600" title="树节点的高度">

<h3><a href="#er-cha-cha-zhao-shu" class="header-anchor">#</a><span id="er-cha-cha-zhao-shu">二叉查找树</span></h3><p>每个节点最多只有两个子节点<br>左侧子节点 &lt; 当前节点<br>右侧子节点 &gt; 当前节点</p>
<h4><a href="#chang-yong-fang-fa" class="header-anchor">#</a><span id="chang-yong-fang-fa">常用方法</span></h4><ul>
<li>add：向树中插入一个节点</li>
<li>findMin：查找树中最小的节点</li>
<li>findMax：查找树中最大的节点</li>
<li>find：查找树中的某个节点</li>
<li>isPresent：判断某个节点在树中是否存在</li>
<li>remove：移除树中的某个节点</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">data, left = <span class="literal">null</span>, right = <span class="literal">null</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.data = data;</span><br><span class="line">    <span class="built_in">this</span>.left = left;</span><br><span class="line">    <span class="built_in">this</span>.right = right;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BST</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.root = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">add</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> node = <span class="built_in">this</span>.root;</span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.root = <span class="keyword">new</span> Node(data);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> searchTree = <span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (data &lt; node.data) &#123;</span><br><span class="line">          <span class="keyword">if</span> (node.left === <span class="literal">null</span>) &#123;</span><br><span class="line">            node.left = <span class="keyword">new</span> Node(data);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.left !== <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> searchTree(node.left);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data &gt; node.data) &#123;</span><br><span class="line">          <span class="keyword">if</span> (node.right === <span class="literal">null</span>) &#123;</span><br><span class="line">            node.right = <span class="keyword">new</span> Node(data);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.right !== <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> searchTree(node.right);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">return</span> searchTree(node);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">findMin</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="built_in">this</span>.root;</span><br><span class="line">    <span class="keyword">while</span> (current.left !== <span class="literal">null</span>) &#123;</span><br><span class="line">      current = current.left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> current.data;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">findMax</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="built_in">this</span>.root;</span><br><span class="line">    <span class="keyword">while</span> (current.right !== <span class="literal">null</span>) &#123;</span><br><span class="line">      current = current.right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> current.data;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">find</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="built_in">this</span>.root;</span><br><span class="line">    <span class="keyword">while</span> (current.data !== data) &#123;</span><br><span class="line">      <span class="keyword">if</span> (data &lt; current.data) &#123;</span><br><span class="line">        current = current.left;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        current = current.right;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (current === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> current;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">isPresent</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="built_in">this</span>.root;</span><br><span class="line">    <span class="keyword">while</span> (current) &#123;</span><br><span class="line">      <span class="keyword">if</span> (data === current.data) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (data &lt; current.data) &#123;</span><br><span class="line">        current = current.left;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        current = current.right;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">remove</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> removeNode = <span class="function"><span class="keyword">function</span> (<span class="params">node, data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (data == node.data) &#123;</span><br><span class="line">        <span class="comment">// node没有子节点</span></span><br><span class="line">        <span class="keyword">if</span> (node.left == <span class="literal">null</span> &amp;&amp; node.right == <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// node没有左侧子节点</span></span><br><span class="line">        <span class="keyword">if</span> (node.left == <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> node.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// node没有右侧子节点</span></span><br><span class="line">        <span class="keyword">if</span> (node.right == <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> node.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// node有两个子节点</span></span><br><span class="line">        <span class="keyword">var</span> tempNode = node.right;</span><br><span class="line">        <span class="keyword">while</span> (tempNode.left !== <span class="literal">null</span>) &#123;</span><br><span class="line">          tempNode = tempNode.left;</span><br><span class="line">        &#125;</span><br><span class="line">        node.data = tempNode.data;</span><br><span class="line">        node.right = removeNode(node.right, tempNode.data);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data &lt; node.data) &#123;</span><br><span class="line">        node.left = removeNode(node.left, data);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        node.right = removeNode(node.right, data);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">this</span>.root = removeNode(<span class="built_in">this</span>.root, data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> bst = <span class="keyword">new</span> BST();</span><br><span class="line">bst.add(<span class="number">4</span>);</span><br><span class="line">bst.add(<span class="number">2</span>);</span><br><span class="line">bst.add(<span class="number">6</span>);</span><br><span class="line">bst.add(<span class="number">1</span>);</span><br><span class="line">bst.add(<span class="number">3</span>);</span><br><span class="line">bst.add(<span class="number">5</span>);</span><br><span class="line">bst.add(<span class="number">7</span>);</span><br><span class="line">bst.remove(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(bst.findMin());</span><br><span class="line"><span class="built_in">console</span>.log(bst.findMax());</span><br><span class="line">bst.remove(<span class="number">7</span>);</span><br><span class="line"><span class="built_in">console</span>.log(bst.findMax());</span><br><span class="line"><span class="built_in">console</span>.log(bst.isPresent(<span class="number">4</span>));</span><br></pre></td></tr></table></figure>

<h2><a href="#zi-dian-shu-trie" class="header-anchor">#</a><span id="zi-dian-shu-trie">字典树 Trie</span></h2><p>Trie 也可以叫做 Prefix Tree（<code>前缀树</code>），也是一种<code>搜索树</code>。</p>
<p>Trie<code>分步骤存储数据</code>，树中的每个节点代表一个步骤，trie 常用于</p>
<p>存储单词以便快速查找，比如实现<code>单词的自动完成功能</code>。</p>
<p>Trie 中的每个节点都包含一个单词的字母，跟着树的分支可以可以拼写出</p>
<p>一个完整的单词，每个节点还包含一个布尔值表示该节点是否是单词的最后一个字母</p>
<h3><a href="#chang-yong-fang-fa" class="header-anchor">#</a><span id="chang-yong-fang-fa">常用方法</span></h3><ul>
<li>add：向字典树中增加一个单词</li>
<li>isWord：判断字典树中是否包含某个单词</li>
<li>print：返回字典树中的所有单词</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Trie的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.keys = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">  <span class="built_in">this</span>.end = <span class="literal">false</span>;</span><br><span class="line">  <span class="built_in">this</span>.setEnd = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.end = <span class="literal">true</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">this</span>.isEnd = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.end;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Trie</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.root = <span class="keyword">new</span> Node();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.add = <span class="function"><span class="keyword">function</span> (<span class="params">input, node = <span class="built_in">this</span>.root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (input.length === <span class="number">0</span>) &#123;</span><br><span class="line">      node.setEnd();</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!node.keys.has(input[<span class="number">0</span>])) &#123;</span><br><span class="line">      node.keys.set(input[<span class="number">0</span>], <span class="keyword">new</span> Node());</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.add(input.substr(<span class="number">1</span>), node.keys.get(input[<span class="number">0</span>]));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.add(input.substr(<span class="number">1</span>), node.keys.get(input[<span class="number">0</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.isWord = <span class="function"><span class="keyword">function</span> (<span class="params">word</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> node = <span class="built_in">this</span>.root;</span><br><span class="line">    <span class="keyword">while</span> (word.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!node.keys.has(word[<span class="number">0</span>])) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        node = node.keys.get(word[<span class="number">0</span>]);</span><br><span class="line">        word = word.substr(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node.keys.has(word) &amp;&amp; node.keys.get(word).isEnd() ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.print = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> words = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">    <span class="keyword">let</span> search = <span class="function"><span class="keyword">function</span> (<span class="params">node = <span class="built_in">this</span>.root, string</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (node.keys.size != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> letter <span class="keyword">of</span> node.keys.keys()) &#123;</span><br><span class="line">          search(node.keys.get(letter), string.concat(letter));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.isEnd()) &#123;</span><br><span class="line">          words.push(string);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        string.length &gt; <span class="number">0</span> ? words.push(string) : <span class="literal">undefined</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    search(<span class="built_in">this</span>.root, <span class="keyword">new</span> <span class="built_in">String</span>());</span><br><span class="line">    <span class="keyword">return</span> words.length &gt; <span class="number">0</span> ? words : <span class="literal">null</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2><a href="#tu-graph" class="header-anchor">#</a><span id="tu-graph">图 Graph</span></h2><p>分 <code>有向图</code> 和 <code>无向图</code></p>
<p>js 中常用矩阵表示</p>
<img src="/2021/09/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%BE.jpg" class width="800" height="600" title="数据结构-图">

<p><code>连接</code>：节点 A 箭头朝外指向其他节点 B，称 A 连接 B</p>
<h3><a href="#guang-du-you-xian-sou-suo-suan-fa" class="header-anchor">#</a><span id="guang-du-you-xian-sou-suo-suan-fa">广度优先搜索算法</span></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bfs</span>(<span class="params">graph, root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> nodesLen = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; graph.length; i++) &#123;</span><br><span class="line">    nodesLen[i] = <span class="literal">Infinity</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  nodesLen[root] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> queue = [root];</span><br><span class="line">  <span class="keyword">var</span> current;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (queue.length != <span class="number">0</span>) &#123;</span><br><span class="line">    current = queue.shift();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> curConnected = graph[current];</span><br><span class="line">    <span class="keyword">var</span> neighborIdx = [];</span><br><span class="line">    <span class="keyword">var</span> idx = curConnected.indexOf(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (idx != -<span class="number">1</span>) &#123;</span><br><span class="line">      neighborIdx.push(idx);</span><br><span class="line">      idx = curConnected.indexOf(<span class="number">1</span>, idx + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; neighborIdx.length; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (nodesLen[neighborIdx[j]] == <span class="literal">Infinity</span>) &#123;</span><br><span class="line">        nodesLen[neighborIdx[j]] = nodesLen[current] + <span class="number">1</span>;</span><br><span class="line">        queue.push(neighborIdx[j]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> nodesLen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">var</span> graph = [</span><br><span class="line">  [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">  [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">  [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">  [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">  [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bfs(graph, <span class="number">1</span>));</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   0: 2,</span></span><br><span class="line"><span class="comment">//   1: 0,</span></span><br><span class="line"><span class="comment">//   2: 1,</span></span><br><span class="line"><span class="comment">//   3: 3,</span></span><br><span class="line"><span class="comment">//   4: Infinity</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>模块</title>
    <url>/2021/08/27/%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#require-module">require(module)</a></li>
</ul>
<!-- tocstop -->

</div>

<h1><a href="#require-module" class="header-anchor">#</a><span id="require-module">require(module)</span></h1><p>requirejs 使用的是 AMD 规范，AMD 提倡的是依赖前置，也就是说不管你的 require 写在什么位置，都会提前加载，比如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (browser.desktop &amp;&amp; browser.msie &amp;&amp; browser.versionNumber &lt; <span class="number">9</span>) &#123;</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&quot;selectivizr&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端</title>
    <url>/2021/09/06/%E7%A7%BB%E5%8A%A8%E7%AB%AF/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#0-5px">0.5px</a></li>
</ul>
<!-- tocstop -->

</div>

<h1><a href="#0-5px" class="header-anchor">#</a><span id="0-5px">0.5px</span></h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 直接加 class 即可用 */</span></span><br><span class="line"><span class="selector-attr">[class*=<span class="string">&quot;mri-hairline&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[class*=<span class="string">&quot;mri-hairline&quot;</span>]</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot; &quot;</span>;</span><br><span class="line">  <span class="attribute">pointer-events</span>: none;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">right</span>: -<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: -<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span> solid <span class="number">#ddd</span>;</span><br><span class="line">  -webkit-<span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mri-hairline--top</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">border-top-width</span>: <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mri-hairline--right</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">border-right-width</span>: <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>移动端</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端适配多个分辨率不同的设备</title>
    <url>/2021/08/26/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D%E5%A4%9A%E4%B8%AA%E5%88%86%E8%BE%A8%E7%8E%87%E4%B8%8D%E5%90%8C%E7%9A%84%E8%AE%BE%E5%A4%87/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#lib-flexible">lib-flexible</a></li>
</ul>
<!-- tocstop -->

</div>

<h1><a href="#lib-flexible" class="header-anchor">#</a><span id="lib-flexible">lib-flexible</span></h1><p><a href="https://juejin.cn/post/6844903833697517576">https://juejin.cn/post/6844903833697517576</a></p>
<p><a href="https://blog.csdn.net/pwc1996/article/details/75738725">https://blog.csdn.net/pwc1996/article/details/75738725</a></p>
]]></content>
      <tags>
        <tag>移动端</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>网络运维相关</title>
    <url>/2021/08/27/%E7%BD%91%E7%BB%9C%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#ajax-zhi-qian">ajax 之前</a></li>
<li><a href="#linux-zhi-ls-xia-yi-ji-mu-lu">linux 只 ls 下一级目录</a></li>
<li><a href="#cdn">CDN</a></li>
<li><a href="#hu-lian-wang">互联网</a></li>
<li><a href="#liu-lan-qi-dao-fu-wu-qi">浏览器到服务器</a></li>
</ul>
<!-- tocstop -->

</div>

<h1><a href="#ajax-zhi-qian" class="header-anchor">#</a><span id="ajax-zhi-qian">ajax 之前</span></h1><p>ajax 之前，服务端返回整个 HTML<br>ajax 不是新的编程语言，而是一种使用现有标准的新方法<br>ajax 最大的优点是在不重新加载整个页面的情况下，可以与服务器交换数据</p>
<h1><a href="#linux-zhi-ls-xia-yi-ji-mu-lu" class="header-anchor">#</a><span id="linux-zhi-ls-xia-yi-ji-mu-lu">linux 只 ls 下一级目录</span></h1><p><code>ls -aF|grep &#39;/$&#39;</code></p>
<h1><a href="#cdn" class="header-anchor">#</a><span id="cdn">CDN</span></h1><p>解析 DNS，分配最近节点</p>
<h1><a href="#hu-lian-wang" class="header-anchor">#</a><span id="hu-lian-wang">互联网</span></h1><p>电脑 - 路由器 - 调制解调器（modem）- 电话线 - 路由器 - 电脑</p>
<h1><a href="#liu-lan-qi-dao-fu-wu-qi" class="header-anchor">#</a><span id="liu-lan-qi-dao-fu-wu-qi">浏览器到服务器</span></h1><p>输入域名<br>DNS 解析域名并返回正确 ip<br>本机 ip 与服务器 ip 成功建立 TCP/IP 通讯<br>本机浏览器接收到 html js css 并开始渲染</p>
]]></content>
      <tags>
        <tag>网络运维</tag>
      </tags>
  </entry>
  <entry>
    <title>调试</title>
    <url>/2021/08/26/%E8%B0%83%E8%AF%95/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#diao-shi-iphone-shang-safari-wang-ye-xu-usb-lian-jie">调试 iphone 上 Safari 网页（需 USB 连接）</a></li>
<li><a href="#diao-shi-android-shang-de-ye-mian-xu-usb-lian-jie">调试 Android 上的页面（需 USB 连接）</a></li>
<li><a href="#yuan-cheng-diao-shi-shou-ji-ye-mian-zhua-bao-wu-xu-usb">远程调试手机页面、抓包（无需 USB）</a><ul>
<li><a href="#spy-debugger">Spy-Debugger</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->

</div>

<p><a href="https://www.cnblogs.com/wind-alex/p/10374304.html">https://www.cnblogs.com/wind-alex/p/10374304.html</a></p>
<h2><a href="#diao-shi-iphone-shang-safari-wang-ye-xu-usb-lian-jie" class="header-anchor">#</a><span id="diao-shi-iphone-shang-safari-wang-ye-xu-usb-lian-jie">调试 iphone 上 Safari 网页（需 USB 连接）</span></h2><p>Safari 设置：Safari – 偏好设置 – 高级 – 勾选「在菜单栏中显示开发」菜单</p>
<p>iphone 设置：设置 – Safari – 高级 – 打开 Web 检查器</p>
<p>USB 连接 Mac</p>
<img src="https://33e9-dev-upload.oss-cn-beijing.aliyuncs.com/executeTask/image/b9/b967216c5ca077f307785cdf8b817fd4.jpg">

<!--<img src="./调试iphone上Safari网页.jpg">-->

<h2><a href="#diao-shi-android-shang-de-ye-mian-xu-usb-lian-jie" class="header-anchor">#</a><span id="diao-shi-android-shang-de-ye-mian-xu-usb-lian-jie">调试 Android 上的页面（需 USB 连接）</span></h2><p><a href="https://www.cnblogs.com/ranyonsue/p/10078261.html">https://www.cnblogs.com/ranyonsue/p/10078261.html</a></p>
<p>电脑上的 chrome 浏览器版本需比手机上的 chrome 浏览器版本新</p>
<ul>
<li><p>手机打开 USB 调试，打开要调试的页面</p>
</li>
<li><p>PC Chrome 打开 <code>chrome://inspect</code>，找到设备打开的页面，点击 inspect</p>
</li>
</ul>
<h2><a href="#yuan-cheng-diao-shi-shou-ji-ye-mian-zhua-bao-wu-xu-usb" class="header-anchor">#</a><span id="yuan-cheng-diao-shi-shou-ji-ye-mian-zhua-bao-wu-xu-usb">远程调试手机页面、抓包（无需 USB）</span></h2><p><code>Spy-Debugger</code> <a href="https://github.com/wuchangming/spy-debugger#readme">https://github.com/wuchangming/spy-debugger#readme</a></p>
<p><code>Whistle</code> 更强大，配置也更复杂</p>
<h3><a href="#spy-debugger" class="header-anchor">#</a><span id="spy-debugger">Spy-Debugger</span></h3><p><a href="https://github.com/wuchangming/spy-debugger#%E4%B8%89%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8B">https://github.com/wuchangming/spy-debugger#%E4%B8%89%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8B</a></p>
<p><code>注意点</code></p>
<p>默认的 127.0.0.1 改成 PC 本机 IP</p>
<p>iPhone 扫描二维码下载证书，二维码链接的 ip 改成 PC 本机 IP，手动信任证书</p>
<img src="https://33de9-test-upload.oss-cn-shenzhen.aliyuncs.com/executeTask/image/31/31ff8c5a6ed857d098c14d51ab50f9e2.jpg" width="500">

<img src="https://33de9-test-upload.oss-cn-shenzhen.aliyuncs.com/executeTask/image/d3/d3b01f7d7ecd854ab8e4e6fcb02ff199.jpg" width="300">
]]></content>
      <tags>
        <tag>调试</tag>
      </tags>
  </entry>
  <entry>
    <title>跨域</title>
    <url>/2021/08/27/%E8%B7%A8%E5%9F%9F/</url>
    <content><![CDATA[<h1><a href="#jsonp" class="header-anchor">#</a><span id="jsonp">JSONP</span></h1><ul>
<li>html</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://example.com/data.json&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Service</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">someCallback(responeObj);</span><br></pre></td></tr></table></figure>

<ul>
<li>Client</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Client 定义的函数要与 Service 的同名</span></span><br><span class="line"><span class="built_in">window</span>.someCallback = <span class="function"><span class="keyword">function</span> (<span class="params">responeObj</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2><a href="#jquery-you-chu-li-fang-an" class="header-anchor">#</a><span id="jquery-you-chu-li-fang-an">jQuery 有处理方案</span></h2><p><code>jQuery.getJSON(&quot;http://example.com/data.json?callback=?&quot;, function(result)&#123; // 处理返回结果的相关逻辑 &#125;);</code></p>
<p>jQuery 将上面 URL 中最后的问号替换为一个由它创建的随机命名的临时函数。服务器 会获取这个 callback 参数，使用这个名字作为回调函数名称返回给客户端。</p>
]]></content>
      <tags>
        <tag>网络运维</tag>
        <tag>跨域</tag>
      </tags>
  </entry>
  <entry>
    <title>项目相关</title>
    <url>/2021/08/27/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#lao-xiang-mu-wu-kuang-jia-gulp">老项目（无框架+gulp）</a><ul>
<li><a href="#package-json-gitignore">package.json、.gitignore</a></li>
<li><a href="#ben-di-fu-wu-bao-cun-ji-shua-xin-ye-mian">本地服务 &amp;&amp; 保存即刷新页面</a></li>
<li><a href="#duo-html-lu-you-qie-huan">多 html（路由切换）</a></li>
<li><a href="#bian-yi-ya-suo-js-css-html">编译压缩 js、css、html</a></li>
<li><a href="#fu-zhi-dao-dist-wen-jian-jia">复制到 dist 文件夹</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->

</div>

<h1><a href="#lao-xiang-mu-wu-kuang-jia-gulp" class="header-anchor">#</a><span id="lao-xiang-mu-wu-kuang-jia-gulp">老项目（无框架+gulp）</span></h1><h3><a href="#package-json-gitignore" class="header-anchor">#</a><span id="package-json-gitignore">package.json、.gitignore</span></h3><h3><a href="#ben-di-fu-wu-amp-amp-bao-cun-ji-shua-xin-ye-mian" class="header-anchor">#</a><span id="ben-di-fu-wu-amp-amp-bao-cun-ji-shua-xin-ye-mian">本地服务 &amp;&amp; 保存即刷新页面</span></h3><p>监控到文件变化，就自动重启服务</p>
<h3><a href="#duo-html-lu-you-qie-huan" class="header-anchor">#</a><span id="duo-html-lu-you-qie-huan">多 html（路由切换）</span></h3><p>老项目中切换不同 html</p>
<p>Vue 中根据路由即 URL 的 hash 值，加载不同的 .vue 组件（ css js 静态资源 ）</p>
<h3><a href="#bian-yi-ya-suo-js-css-html" class="header-anchor">#</a><span id="bian-yi-ya-suo-js-css-html">编译压缩 js、css、html</span></h3><p>定义的 js 方法名、css 类名等等保持不变，尽可能减少空格和字节，比如 <strong><em>let t = this</em></strong></p>
<h3><a href="#fu-zhi-dao-dist-wen-jian-jia" class="header-anchor">#</a><span id="fu-zhi-dao-dist-wen-jian-jia">复制到 dist 文件夹</span></h3><p>images、<strong><em>库文件</em></strong>、压缩后的 css、js、html</p>
]]></content>
      <tags>
        <tag>项目</tag>
        <tag>gulp</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/2021/09/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#can-kao">参考</a></li>
<li><a href="#dan-li-mo-shi">单例模式</a><ul>
<li><a href="#ding-yi">定义</a></li>
</ul>
</li>
<li><a href="#ce-lue-mo-shi">策略模式</a><ul>
<li><a href="#ding-yi-1">定义</a></li>
<li><a href="#fen-chi">分离</a></li>
<li><a href="#zu-cheng">组成</a></li>
</ul>
</li>
<li><a href="#dai-li-mo-shi">代理模式</a><ul>
<li><a href="#bao-hu-dai-li">保护代理</a></li>
<li><a href="#xu-ni-dai-li">虚拟代理</a></li>
<li><a href="#huan-cun-dai-li">缓存代理</a></li>
</ul>
</li>
<li><a href="#die-dai-qi-mo-shi">迭代器模式</a></li>
<li><a href="#fa-bu-ding-yue-mo-shi">发布-订阅模式</a><ul>
<li><a href="#eg">eg</a></li>
<li><a href="#you-que-dian">优缺点</a></li>
</ul>
</li>
<li><a href="#ming-ling-mo-shi">命令模式</a><ul>
<li><a href="#shi-xian">实现</a></li>
</ul>
</li>
<li><a href="#zu-he-mo-shi">组合模式</a></li>
<li><a href="#mo-ban-fang-fa-mo-shi">模板方法模式</a></li>
<li><a href="#xiang-yuan-mo-shi">享元模式</a></li>
<li><a href="#zhi-ze-lian-mo-shi">职责链模式</a><ul>
<li><a href="#ding-yi-2">定义</a></li>
<li><a href="#he-xin">核心</a></li>
<li><a href="#shi-xian-1">实现</a></li>
</ul>
</li>
<li><a href="#zhong-jie-zhe-mo-shi">中介者模式</a><ul>
<li><a href="#ding-yi-3">定义</a></li>
<li><a href="#he-xin-1">核心</a></li>
<li><a href="#shi-xian-2">实现</a></li>
</ul>
</li>
<li><a href="#zhuang-shi-zhe-mo-shi">装饰者模式</a><ul>
<li><a href="#1-ding-yi">1. 定义</a></li>
<li><a href="#2-he-xin">2. 核心</a></li>
<li><a href="#3-shi-xian">3. 实现</a></li>
</ul>
</li>
<li><a href="#zhuang-tai-mo-shi">状态模式</a><ul>
<li><a href="#1-ding-yi-1">1. 定义</a></li>
<li><a href="#2-he-xin-1">2. 核心</a></li>
<li><a href="#3-shi-xian-1">3. 实现</a></li>
<li><a href="#4-you-que-dian">4. 优缺点</a></li>
</ul>
</li>
<li><a href="#shi-si-gua-pei-qi-mo-shi">十四、适配器模式</a><ul>
<li><a href="#ding-yi-4">定义</a></li>
<li><a href="#shi-xian-3">实现</a></li>
</ul>
</li>
<li><a href="#wai-guan-mo-shi">外观模式</a><ul>
<li><a href="#1-ding-yi-2">1. 定义</a></li>
<li><a href="#2-he-xin-2">2. 核心</a></li>
<li><a href="#3-shi-xian-2">3. 实现</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->

</div>

<h2><a href="#can-kao" class="header-anchor">#</a><span id="can-kao">参考</span></h2><p><a href="https://zhuanlan.zhihu.com/p/46066237">JavaScript 中常见的十五种设计模式（上）</a><br><a href="https://zhuanlan.zhihu.com/p/46066651">JavaScript 中常见的十五种设计模式（下）</a></p>
<h2><a href="#dan-li-mo-shi" class="header-anchor">#</a><span id="dan-li-mo-shi">单例模式</span></h2><h3><a href="#ding-yi" class="header-anchor">#</a><span id="ding-yi">定义</span></h3><p>保证一个类仅有一个实例，并提供一个访问它的全局访问点</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现方式</span></span><br><span class="line"><span class="comment">// 比如可以使用闭包缓存一个内部变量来实现这个单例</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SetManager</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.manager = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SetManager.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.manager);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 后续写法 1</span></span><br><span class="line"><span class="comment">// let SingletonSetManager = (function() &#123;</span></span><br><span class="line"><span class="comment">//     let manager = null;</span></span><br><span class="line"><span class="comment">//     // 内部变量保存类的实例，存在则继续沿用这个实例</span></span><br><span class="line"><span class="comment">//     return function(name) &#123; // 传参给闭包函数 SingletonSetManager 的 name，其实是传给其 return 的函数</span></span><br><span class="line"><span class="comment">//         if (!manager) &#123;</span></span><br><span class="line"><span class="comment">//             manager = new SetManager(name);</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//         return manager;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;)();</span></span><br><span class="line"><span class="comment">// SingletonSetManager(&#x27;a&#x27;).getName(); // a</span></span><br><span class="line"><span class="comment">// SingletonSetManager(&#x27;b&#x27;).getName(); // a</span></span><br><span class="line"><span class="comment">// SingletonSetManager(&#x27;c&#x27;).getName(); // a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 后续写法 2</span></span><br><span class="line"><span class="comment">// 提取出通用的单例</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSingleton</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> instance = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">      instance = fn.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>); <span class="comment">// 等于 this.fn(arguments)</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;arguments:  &quot;</span> + <span class="built_in">JSON</span>.stringify(<span class="built_in">arguments</span>)); <span class="comment">// arguments 直接可打印出来</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取单例</span></span><br><span class="line"><span class="keyword">let</span> managerSingleton = getSingleton(<span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> manager = <span class="keyword">new</span> SetManager(name);</span><br><span class="line">  <span class="keyword">return</span> manager;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">managerSingleton(<span class="string">&quot;a&quot;</span>).getName(); <span class="comment">// a</span></span><br><span class="line">managerSingleton(<span class="string">&quot;b&quot;</span>).getName(); <span class="comment">// a</span></span><br><span class="line">managerSingleton(<span class="string">&quot;c&quot;</span>).getName(); <span class="comment">// a</span></span><br></pre></td></tr></table></figure>

<h2><a href="#ce-lue-mo-shi" class="header-anchor">#</a><span id="ce-lue-mo-shi">策略模式</span></h2><h3><a href="#ding-yi" class="header-anchor">#</a><span id="ding-yi">定义</span></h3><p>定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替换</p>
<h3><a href="#fen-chi" class="header-anchor">#</a><span id="fen-chi">分离</span></h3><p><strong>使用</strong> ← 分离 → <strong>实现</strong></p>
<h3><a href="#zu-cheng" class="header-anchor">#</a><span id="zu-cheng">组成</span></h3><ul>
<li><p>一组策略类，封装具体算法，负责具体计算</p>
</li>
<li><p>环境类 Context，Context 接受客户的请求，随后把请求委托给某一个策略类</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// eg：表单的验证方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误提示</span></span><br><span class="line"><span class="keyword">let</span> errorMsgs = &#123;</span><br><span class="line">  <span class="keyword">default</span>: <span class="string">&quot;输入数据格式不正确&quot;</span>,</span><br><span class="line">  minLength: <span class="string">&quot;输入数据长度不足&quot;</span>,</span><br><span class="line">  isNumber: <span class="string">&quot;请输入数字&quot;</span>,</span><br><span class="line">  required: <span class="string">&quot;内容不为空&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 规则集</span></span><br><span class="line"><span class="keyword">let</span> rules = &#123;</span><br><span class="line">  minLength: <span class="function"><span class="keyword">function</span> (<span class="params">value, length, errorMsg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value.length &lt; length) &#123;</span><br><span class="line">      <span class="keyword">return</span> errorMsg || errorMsgs[<span class="string">&quot;minLength&quot;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  isNumber: <span class="function"><span class="keyword">function</span> (<span class="params">value, errorMsg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="regexp">/\d+/</span>.test(value)) &#123;</span><br><span class="line">      <span class="keyword">return</span> errorMsg || errorMsgs[<span class="string">&quot;isNumber&quot;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  required: <span class="function"><span class="keyword">function</span> (<span class="params">value, errorMsg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value === <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> errorMsg || errorMsgs[<span class="string">&quot;required&quot;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 校验器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Validator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.items = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Validator.prototype = &#123;</span><br><span class="line">  <span class="title">constructor</span>: <span class="title">Validator</span>,</span><br><span class="line"></span><br><span class="line">  // 添加校验规则</span><br><span class="line">  <span class="title">add</span>: <span class="title">function</span> (<span class="params">value, rule, errorMsg</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> arg = [value];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rule.indexOf(<span class="string">&quot;minLength&quot;</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> temp = rule.split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">      arg.push(temp[<span class="number">1</span>]);</span><br><span class="line">      rule = temp[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    arg.push(errorMsg);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.items.push(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 进行校验</span></span><br><span class="line">      <span class="keyword">return</span> rules[rule].apply(<span class="built_in">this</span>, arg);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 开始校验</span></span><br><span class="line">  start: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.items.length; ++i) &#123;</span><br><span class="line">      <span class="keyword">let</span> ret = <span class="built_in">this</span>.items[i]();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(ret);</span><br><span class="line">        <span class="comment">// return ret;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试数据</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testTel</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> validate = <span class="keyword">new</span> Validator();</span><br><span class="line"></span><br><span class="line">validate.add(testTel(<span class="string">&quot;ccc&quot;</span>), <span class="string">&quot;isNumber&quot;</span>, <span class="string">&quot;只能为数字&quot;</span>); <span class="comment">// 只能为数字</span></span><br><span class="line">validate.add(testTel(<span class="string">&quot;&quot;</span>), <span class="string">&quot;required&quot;</span>); <span class="comment">// 内容不为空</span></span><br><span class="line">validate.add(testTel(<span class="string">&quot;123&quot;</span>), <span class="string">&quot;minLength:5&quot;</span>, <span class="string">&quot;最少5位&quot;</span>); <span class="comment">// 最少5位</span></span><br><span class="line">validate.add(testTel(<span class="string">&quot;12345&quot;</span>), <span class="string">&quot;minLength:5&quot;</span>, <span class="string">&quot;最少5位&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ret = validate.start();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ret);</span><br></pre></td></tr></table></figure>

<h2><a href="#dai-li-mo-shi" class="header-anchor">#</a><span id="dai-li-mo-shi">代理模式</span></h2><h3><a href="#bao-hu-dai-li" class="header-anchor">#</a><span id="bao-hu-dai-li">保护代理</span></h3><h3><a href="#xu-ni-dai-li" class="header-anchor">#</a><span id="xu-ni-dai-li">虚拟代理</span></h3><p>在控制对主体的访问时，加入了一些额外的操作</p>
<h3><a href="#huan-cun-dai-li" class="header-anchor">#</a><span id="huan-cun-dai-li">缓存代理</span></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 虚拟代理</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 函数节流：</span></span><br><span class="line"><span class="comment">   * mustRunDelay 时间内重复执行【延迟 delay 时间执行 fn】,到达 mustRunDelay 时间长度则马上执行 fn</span></span><br><span class="line"><span class="comment">   * eg: window.onscroll = throttle(fn, delay, mustRunDelay)</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param </span>fn  函数</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param </span>delay 多久执行一次</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param </span>mustRunDelay 执行时间间隔</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return <span class="type">&#123;Function&#125;</span></span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="title">throttle</span>(<span class="params">fn, delay, mustRunDelay</span>)</span> &#123;</span><br><span class="line">    <span class="comment">/*eslint-disable*/</span></span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">let</span> t_start</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> context = <span class="built_in">this</span>, args = <span class="built_in">arguments</span>, t_curr = +<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">      <span class="comment">// 清除定时操作</span></span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">      <span class="keyword">if</span> (!t_start) &#123;</span><br><span class="line">        t_start = t_curr</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 时间间隔超过 mustRunDelay 则马上执行 fn</span></span><br><span class="line">      <span class="keyword">if</span> (t_curr - t_start &gt;= mustRunDelay) &#123;</span><br><span class="line">        fn.apply(context, args)</span><br><span class="line">        t_start = t_curr</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 定义新的定时器，一段时间后进行操作</span></span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          fn.apply(context, args)</span><br><span class="line">        &#125;, delay)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓存代理</span></span><br><span class="line"><span class="comment">// 缓存加法操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 主体</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> arg = [].slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="keyword">return</span> arg.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123; a + b &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理</span></span><br><span class="line"><span class="keyword">let</span> proxyAdd = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> cache = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arg = [].slice.call(<span class="built_in">arguments</span>).join(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果有，则直接从缓存返回</span></span><br><span class="line">    <span class="keyword">if</span> (cache[arg]) &#123;</span><br><span class="line">      <span class="keyword">return</span> cache[arg];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> ret = add.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">      <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>),</span><br><span class="line">  add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>),</span><br><span class="line"></span><br><span class="line">  proxyAdd(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>),</span><br><span class="line">  proxyAdd(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>)</span><br><span class="line">); <span class="comment">// 10 10 100 100</span></span><br></pre></td></tr></table></figure>

<h2><a href="#die-dai-qi-mo-shi" class="header-anchor">#</a><span id="die-dai-qi-mo-shi">迭代器模式</span></h2><p>迭代器模式是指提供一种方法 <code>顺序访问</code> 一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示</p>
<p>在使用迭代器模式之后，即使不关心对象的内部构造，也可以按顺序访问其中的每个元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现 ES6 的 迭代器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createIterator</span>(<span class="params">items</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    next: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> done = i &gt;= items.length;</span><br><span class="line">      <span class="keyword">let</span> value = !done ? items[i++] : <span class="literal">undefined</span>;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        done: done,</span><br><span class="line">        value: value,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator = createIterator([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()); <span class="comment">// &quot;&#123; value: 1, done: false &#125;&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()); <span class="comment">// &quot;&#123; value: 2, done: false &#125;&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()); <span class="comment">// &quot;&#123; value: 3, done: false &#125;&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()); <span class="comment">// &quot;&#123; value: undefined, done: true &#125;&quot;</span></span><br><span class="line"><span class="comment">// 之后的所有调用</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()); <span class="comment">// &quot;&#123; value: undefined, done: true &#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代器 eg</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">year2000</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> year = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">  <span class="keyword">if</span> (year &lt;= <span class="number">2000</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">year2100</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> year = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">  <span class="keyword">if</span> (year &gt;= <span class="number">2100</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">year</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> year = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">  <span class="keyword">if</span> (year &gt; <span class="number">2000</span> &amp;&amp; year &lt; <span class="number">2100</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">iteratorYear</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; ++i) &#123;</span><br><span class="line">    <span class="keyword">let</span> ret = <span class="built_in">arguments</span>[i]();</span><br><span class="line">    <span class="keyword">if</span> (ret !== <span class="literal">false</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> manager = iteratorYear(year2000, year2100, year); <span class="comment">// B</span></span><br></pre></td></tr></table></figure>

<h2><a href="#fa-bu-ding-yue-mo-shi" class="header-anchor">#</a><span id="fa-bu-ding-yue-mo-shi">发布-订阅模式</span></h2><p>也称作观察者模式</p>
<h3><a href="#eg" class="header-anchor">#</a><span id="eg">eg</span></h3><p>小 A 在公司 C 完成了笔试及面试，小 B 也在公司 C 完成了笔试。他们焦急地等待结果，每隔半天就电话询问公司 C，导致公司 C 很不耐烦。</p>
<p>一种解决办法是 AB 直接把联系方式留给 C，有结果的话 C 自然会通知 AB</p>
<p>这里的询问属于显示 <code>调用</code>，留给属于 <code>订阅</code>，通知属于 <code>发布</code></p>
<h3><a href="#you-que-dian" class="header-anchor">#</a><span id="you-que-dian">优缺点</span></h3><h4><a href="#you" class="header-anchor">#</a><span id="you">优</span></h4><p>一为时间上的解耦，二为对象之间的解耦</p>
<h4><a href="#que" class="header-anchor">#</a><span id="que">缺</span></h4><ul>
<li><p>创建订阅者本身要消耗一定的时间和内存，订阅的处理函数不一定会被执行，驻留内存有性能开销</p>
</li>
<li><p>弱化了对象之间的联系，复杂的情况下可能会导致程序难以跟踪维护和理解</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 观察者</span></span><br><span class="line"><span class="keyword">let</span> observer = &#123;</span><br><span class="line">  <span class="comment">// 订阅集合</span></span><br><span class="line">  subscribes: [],</span><br><span class="line">  <span class="comment">// 订阅</span></span><br><span class="line">  subscribe: <span class="function"><span class="keyword">function</span> (<span class="params">type, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.subscribes[type]) &#123;</span><br><span class="line">      <span class="built_in">this</span>.subscribes[type] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 收集订阅者针对订阅内容的处理函数</span></span><br><span class="line">    <span class="keyword">typeof</span> fn === <span class="string">&quot;function&quot;</span> &amp;&amp; <span class="built_in">this</span>.subscribes[type].push(fn);</span><br><span class="line">    <span class="comment">// log 为 bool, 但这种表达式有啥意义？</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 发布  可能会携带一些信息发布出去</span></span><br><span class="line">  publish: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> type = [].shift.call(<span class="built_in">arguments</span>),</span><br><span class="line">      fns = <span class="built_in">this</span>.subscribes[type];</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;发布  &quot;</span>, fns);</span><br><span class="line">    <span class="comment">// 不存在的订阅类型，以及订阅时未传入处理回调的</span></span><br><span class="line">    <span class="keyword">if</span> (!fns || !fns.length) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 挨个处理调用</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; fns.length; ++i) &#123;</span><br><span class="line">      fns[i].apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 删除订阅</span></span><br><span class="line">  remove: <span class="function"><span class="keyword">function</span> (<span class="params">type, fn</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 删除全部</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> type === <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.subscribes = [];</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> fns = <span class="built_in">this</span>.subscribes[type];</span><br><span class="line">    <span class="comment">// 不存在的订阅类型，以及订阅时未传入处理回调的</span></span><br><span class="line">    <span class="keyword">if</span> (!fns || !fns.length) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> fn === <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">      fns.length = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 挨个处理删除</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; fns.length; ++i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (fns[i] === fn) &#123;</span><br><span class="line">        fns.splice(i, <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅岗位列表</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jobListForA</span>(<span class="params">jobs</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;A&quot;</span>, jobs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jobListForB</span>(<span class="params">jobs</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;B&quot;</span>, jobs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A订阅了笔试成绩</span></span><br><span class="line">observer.subscribe(<span class="string">&quot;job&quot;</span>, jobListForA);</span><br><span class="line"><span class="comment">// B订阅了笔试成绩</span></span><br><span class="line">observer.subscribe(<span class="string">&quot;job&quot;</span>, jobListForB);</span><br><span class="line"></span><br><span class="line"><span class="comment">// A订阅了笔试成绩</span></span><br><span class="line">observer.subscribe(<span class="string">&quot;examinationA&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">score</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(score);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// B订阅了笔试成绩</span></span><br><span class="line">observer.subscribe(<span class="string">&quot;examinationB&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">score</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(score);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// A订阅了面试结果</span></span><br><span class="line">observer.subscribe(<span class="string">&quot;interviewA&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">observer.publish(<span class="string">&quot;examinationA&quot;</span>, <span class="number">100</span>); <span class="comment">// 100</span></span><br><span class="line">observer.publish(<span class="string">&quot;examinationB&quot;</span>, <span class="number">80</span>); <span class="comment">// 80</span></span><br><span class="line">observer.publish(<span class="string">&quot;interviewA&quot;</span>, <span class="string">&quot;备用&quot;</span>); <span class="comment">// 备用</span></span><br><span class="line"></span><br><span class="line">observer.publish(<span class="string">&quot;job&quot;</span>, [<span class="string">&quot;前端&quot;</span>, <span class="string">&quot;后端&quot;</span>, <span class="string">&quot;测试&quot;</span>]); <span class="comment">// 输出A和B的岗位</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// B取消订阅了笔试成绩</span></span><br><span class="line">observer.remove(<span class="string">&quot;examinationB&quot;</span>);</span><br><span class="line"><span class="comment">// A都取消订阅了岗位</span></span><br><span class="line">observer.remove(<span class="string">&quot;job&quot;</span>, jobListForA);</span><br><span class="line"></span><br><span class="line">observer.publish(<span class="string">&quot;examinationB&quot;</span>, <span class="number">80</span>); <span class="comment">// 没有可匹配的订阅，无输出</span></span><br><span class="line">observer.publish(<span class="string">&quot;job&quot;</span>, [<span class="string">&quot;前端&quot;</span>, <span class="string">&quot;后端&quot;</span>, <span class="string">&quot;测试&quot;</span>]); <span class="comment">// 输出B的岗位</span></span><br></pre></td></tr></table></figure>

<h2><a href="#ming-ling-mo-shi" class="header-anchor">#</a><span id="ming-ling-mo-shi">命令模式</span></h2><h3><a href="#shi-xian" class="header-anchor">#</a><span id="shi-xian">实现</span></h3><p>简单的命令模式实现可以直接使用 <code>对象字面量</code> 的形式定义一个命令</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> incrementCommand = &#123;</span><br><span class="line">  execute: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// something</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>采用对象创建处理的方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自增</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">IncrementCommand</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 当前值</span></span><br><span class="line">  <span class="built_in">this</span>.val = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 命令栈</span></span><br><span class="line">  <span class="built_in">this</span>.stack = [];</span><br><span class="line">  <span class="comment">// 栈指针位置</span></span><br><span class="line">  <span class="built_in">this</span>.stackPosition = -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">IncrementCommand.prototype = &#123;</span><br><span class="line">  <span class="title">constructor</span>: <span class="title">IncrementCommand</span>,</span><br><span class="line"></span><br><span class="line">  // 执行</span><br><span class="line">  <span class="title">execute</span>: <span class="title">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>._clearRedo();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义执行的处理</span></span><br><span class="line">    <span class="keyword">let</span> command = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.val += <span class="number">2</span>;</span><br><span class="line">    &#125;.bind(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行并缓存起来</span></span><br><span class="line">    command();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.stack.push(command);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.stackPosition++;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.getValue();</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  canUndo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.stackPosition &gt;= <span class="number">0</span>;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  canRedo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.stackPosition &lt; <span class="built_in">this</span>.stack.length - <span class="number">1</span>;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 撤销</span></span><br><span class="line">  undo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.canUndo()) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.stackPosition--;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 命令的撤销，与执行的处理相反</span></span><br><span class="line">    <span class="keyword">let</span> command = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.val -= <span class="number">2</span>;</span><br><span class="line">    &#125;.bind(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 撤销后不需要缓存</span></span><br><span class="line">    command();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.getValue();</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 重做</span></span><br><span class="line">  redo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.canRedo()) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行栈顶的命令</span></span><br><span class="line">    <span class="built_in">this</span>.stack[++<span class="built_in">this</span>.stackPosition]();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.getValue();</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在执行时，已经撤销的部分不能再重做</span></span><br><span class="line">  _clearRedo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.stack = <span class="built_in">this</span>.stack.slice(<span class="number">0</span>, <span class="built_in">this</span>.stackPosition + <span class="number">1</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取当前值</span></span><br><span class="line">  getValue: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.val);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2><a href="#zu-he-mo-shi" class="header-anchor">#</a><span id="zu-he-mo-shi">组合模式</span></h2><p>使用组合模式来实现扫描文件夹中的文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 文件夹 组合对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Folder</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.parent = <span class="literal">null</span>;</span><br><span class="line">  <span class="built_in">this</span>.files = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Folder.prototype = &#123;</span><br><span class="line">  <span class="title">constructor</span>: <span class="title">Folder</span>,</span><br><span class="line"></span><br><span class="line">  <span class="title">add</span>: <span class="title">function</span> (<span class="params">file</span>) &#123;</span><br><span class="line">    file.parent = <span class="built_in">this</span>;</span><br><span class="line">    <span class="built_in">this</span>.files.push(file);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  scan: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 委托给叶对象处理</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.files.length; ++i) &#123;</span><br><span class="line">      <span class="built_in">this</span>.files[i].scan();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  remove: <span class="function"><span class="keyword">function</span> (<span class="params">file</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> file === <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.files = [];</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.files.length; ++i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.files[i] === file) &#123;</span><br><span class="line">        <span class="built_in">this</span>.files.splice(i, <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件 叶对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">File</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.parent = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">File.prototype = &#123;</span><br><span class="line">  <span class="title">constructor</span>: <span class="title">File</span>,</span><br><span class="line"></span><br><span class="line">  <span class="title">add</span>: <span class="title">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;文件里面不能添加文件&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  scan: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name = [<span class="built_in">this</span>.name];</span><br><span class="line">    <span class="keyword">let</span> parent = <span class="built_in">this</span>.parent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (parent) &#123;</span><br><span class="line">      name.unshift(parent.name);</span><br><span class="line">      parent = parent.parent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(name.join(<span class="string">&quot; / &quot;</span>));</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>实例化，在组合对象中插入组合或叶对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> web = <span class="keyword">new</span> Folder(<span class="string">&quot;Web&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> fe = <span class="keyword">new</span> Folder(<span class="string">&quot;前端&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> css = <span class="keyword">new</span> Folder(<span class="string">&quot;CSS&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> js = <span class="keyword">new</span> Folder(<span class="string">&quot;js&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> rd = <span class="keyword">new</span> Folder(<span class="string">&quot;后端&quot;</span>);</span><br><span class="line"></span><br><span class="line">web.add(fe).add(rd);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> file1 = <span class="keyword">new</span> File(<span class="string">&quot;HTML权威指南.pdf&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> file2 = <span class="keyword">new</span> File(<span class="string">&quot;CSS权威指南.pdf&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> file3 = <span class="keyword">new</span> File(<span class="string">&quot;JavaScript权威指南.pdf&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> file4 = <span class="keyword">new</span> File(<span class="string">&quot;MySQL基础.pdf&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> file5 = <span class="keyword">new</span> File(<span class="string">&quot;Web安全.pdf&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> file6 = <span class="keyword">new</span> File(<span class="string">&quot;Linux菜鸟.pdf&quot;</span>);</span><br><span class="line"></span><br><span class="line">css.add(file2);</span><br><span class="line">fe.add(file1).add(file3).add(css).add(js);</span><br><span class="line">rd.add(file4).add(file5);</span><br><span class="line">web.add(file6);</span><br><span class="line"></span><br><span class="line">rd.remove(file4);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扫描</span></span><br><span class="line">web.scan();</span><br></pre></td></tr></table></figure>

<h2><a href="#mo-ban-fang-fa-mo-shi" class="header-anchor">#</a><span id="mo-ban-fang-fa-mo-shi">模板方法模式</span></h2><p>模板方法模式一般的实现方式为继承</p>
<p>以运动作为例子，运动有比较通用的一些处理，这部分可以抽离开来，在父类中实现。具体某项运动的特殊性则有自类来重写实现。</p>
<p>最终子类直接调用父类的模板函数来执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 体育运动</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sport</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Sport.prototype = &#123;</span><br><span class="line">  <span class="title">constructor</span>: <span class="title">Sport</span>,</span><br><span class="line"></span><br><span class="line">  // 模板，按顺序执行</span><br><span class="line">  <span class="title">init</span>: <span class="title">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.stretch();</span><br><span class="line">    <span class="built_in">this</span>.jog();</span><br><span class="line">    <span class="built_in">this</span>.deepBreath();</span><br><span class="line">    <span class="built_in">this</span>.start();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> free = <span class="built_in">this</span>.end();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 运动后还有空的话，就拉伸一下</span></span><br><span class="line">    <span class="keyword">if</span> (free !== <span class="literal">false</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.stretch();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 拉伸</span></span><br><span class="line">  stretch: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;拉伸&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 慢跑</span></span><br><span class="line">  jog: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;慢跑&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 深呼吸</span></span><br><span class="line">  deepBreath: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;深呼吸&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 开始运动</span></span><br><span class="line">  start: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;子类必须重写此方法&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 结束运动</span></span><br><span class="line">  end: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;运动结束&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 篮球</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Basketball</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Basketball.prototype = <span class="keyword">new</span> Sport();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重写相关的方法</span></span><br><span class="line">Basketball.prototype.start = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;先投上几个三分&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Basketball.prototype.end = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;运动结束了，有事先走一步&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 马拉松</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Marathon</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Marathon.prototype = <span class="keyword">new</span> Sport();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> basketball = <span class="keyword">new</span> Basketball();</span><br><span class="line"><span class="keyword">let</span> marathon = <span class="keyword">new</span> Marathon();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类调用，最终会按照父类定义的顺序执行</span></span><br><span class="line">basketball.init();</span><br><span class="line">marathon.init();</span><br></pre></td></tr></table></figure>

<h2><a href="#xiang-yuan-mo-shi" class="header-anchor">#</a><span id="xiang-yuan-mo-shi">享元模式</span></h2><p>享元（flyweight）模式是一种用于性能优化的模式，它的目标是尽量减少共享对象的数量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 健康测量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fitness</span>(<span class="params">sex</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工厂，创建可共享的对象</span></span><br><span class="line"><span class="keyword">let</span> FitnessFactory = &#123;</span><br><span class="line">  objs: [],</span><br><span class="line"></span><br><span class="line">  create: <span class="function"><span class="keyword">function</span> (<span class="params">sex</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.objs[sex]) &#123;</span><br><span class="line">      <span class="built_in">this</span>.objs[sex] = <span class="keyword">new</span> Fitness(sex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.objs[sex];</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 管理器，管理非共享的部分</span></span><br><span class="line"><span class="keyword">let</span> FitnessManager = &#123;</span><br><span class="line">  fitnessData: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加一项</span></span><br><span class="line">  add: <span class="function"><span class="keyword">function</span> (<span class="params">name, sex, age, height, weight</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> fitness = FitnessFactory.create(sex);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储变化的数据</span></span><br><span class="line">    <span class="built_in">this</span>.fitnessData[name] = &#123;</span><br><span class="line">      age: age,</span><br><span class="line">      height: height,</span><br><span class="line">      weight: weight,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fitness;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 从存储的数据中获取，更新至当前正在使用的对象</span></span><br><span class="line">  updateFitnessData: <span class="function"><span class="keyword">function</span> (<span class="params">name, obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> fitnessData = <span class="built_in">this</span>.fitnessData[name];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">in</span> fitnessData) &#123;</span><br><span class="line">      <span class="keyword">if</span> (fitnessData.hasOwnProperty(item)) &#123;</span><br><span class="line">        obj[item] = fitnessData[item];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始评判</span></span><br><span class="line">Fitness.prototype.judge = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 操作前先更新当前状态（从外部状态管理器中获取）</span></span><br><span class="line">  FitnessManager.updateFitnessData(name, <span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> ret = name + <span class="string">&quot;: &quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.sex === <span class="string">&quot;male&quot;</span>) &#123;</span><br><span class="line">    ret += <span class="built_in">this</span>.judgeMale();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ret += <span class="built_in">this</span>.judgeFemale();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(ret);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 男性评判规则</span></span><br><span class="line">Fitness.prototype.judgeMale = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> ratio = <span class="built_in">this</span>.height / <span class="built_in">this</span>.weight;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.age &gt; <span class="number">20</span> ? ratio &gt; <span class="number">3.5</span> : ratio &gt; <span class="number">2.8</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 女性评判规则</span></span><br><span class="line">Fitness.prototype.judgeFemale = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> ratio = <span class="built_in">this</span>.height / <span class="built_in">this</span>.weight;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.age &gt; <span class="number">20</span> ? ratio &gt; <span class="number">4</span> : ratio &gt; <span class="number">3</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = FitnessManager.add(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;male&quot;</span>, <span class="number">18</span>, <span class="number">160</span>, <span class="number">80</span>);</span><br><span class="line"><span class="keyword">let</span> b = FitnessManager.add(<span class="string">&quot;B&quot;</span>, <span class="string">&quot;male&quot;</span>, <span class="number">21</span>, <span class="number">180</span>, <span class="number">70</span>);</span><br><span class="line"><span class="keyword">let</span> c = FitnessManager.add(<span class="string">&quot;C&quot;</span>, <span class="string">&quot;female&quot;</span>, <span class="number">28</span>, <span class="number">160</span>, <span class="number">80</span>);</span><br><span class="line"><span class="keyword">let</span> d = FitnessManager.add(<span class="string">&quot;D&quot;</span>, <span class="string">&quot;male&quot;</span>, <span class="number">18</span>, <span class="number">170</span>, <span class="number">60</span>);</span><br><span class="line"><span class="keyword">let</span> e = FitnessManager.add(<span class="string">&quot;E&quot;</span>, <span class="string">&quot;female&quot;</span>, <span class="number">18</span>, <span class="number">160</span>, <span class="number">40</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始评判</span></span><br><span class="line">a.judge(<span class="string">&quot;A&quot;</span>); <span class="comment">// A: false</span></span><br><span class="line">b.judge(<span class="string">&quot;B&quot;</span>); <span class="comment">// B: false</span></span><br><span class="line">c.judge(<span class="string">&quot;C&quot;</span>); <span class="comment">// C: false</span></span><br><span class="line">d.judge(<span class="string">&quot;D&quot;</span>); <span class="comment">// D: true</span></span><br><span class="line">e.judge(<span class="string">&quot;E&quot;</span>); <span class="comment">// E: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// factory对象有点像单例模式，只是多了一个sex的参数，如果没有内部状态，则没有参数的factory对象就更接近单例模式了</span></span><br></pre></td></tr></table></figure>

<h2><a href="#zhi-ze-lian-mo-shi" class="header-anchor">#</a><span id="zhi-ze-lian-mo-shi">职责链模式</span></h2><h3><a href="#ding-yi" class="header-anchor">#</a><span id="ding-yi">定义</span></h3><p>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系，将这些对象连成一条链，并沿着这条链 传递该请求，直到有一个对象处理</p>
<p>它为止</p>
<h3><a href="#he-xin" class="header-anchor">#</a><span id="he-xin">核心</span></h3><p>请求发送者只需要知道链中的第一个节点，弱化发送者和一组接收者之间的强联系，可以便捷地在职责链中增加或删除一个节点，同样地，指定谁是第一个节</p>
<p>点也很便捷</p>
<h3><a href="#shi-xian" class="header-anchor">#</a><span id="shi-xian">实现</span></h3><p>展示不同类型的变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义链的某一项</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ChainItem</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.fn = fn;</span><br><span class="line">  <span class="built_in">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ChainItem.prototype = &#123;</span><br><span class="line">  <span class="title">constructor</span>: <span class="title">ChainItem</span>,</span><br><span class="line"></span><br><span class="line">  // 设置下一项</span><br><span class="line">  <span class="title">setNext</span>: <span class="title">function</span> (<span class="params">next</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.next = next;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;next:  &quot;</span> + next);</span><br><span class="line">    <span class="keyword">return</span> next;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 开始执行</span></span><br><span class="line">  start: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.fn.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 转到链的下一项执行</span></span><br><span class="line">  toNext: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.next) &#123;</span><br><span class="line">      <span class="built_in">this</span>.start.apply(<span class="built_in">this</span>.next, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;无匹配的执行项目&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 展示数字</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showNumber</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> num === <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;number&quot;</span>, num);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 转移到下一项</span></span><br><span class="line">    <span class="built_in">this</span>.toNext(num);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;数字后下一步&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 展示字符串</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showString</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> str === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;string&quot;</span>, str);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.toNext(str);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 展示对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showObject</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;object&quot;</span>, obj);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.toNext(obj);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> chainNumber = <span class="keyword">new</span> ChainItem(showNumber);</span><br><span class="line"><span class="keyword">let</span> chainString = <span class="keyword">new</span> ChainItem(showString);</span><br><span class="line"><span class="keyword">let</span> chainObject = <span class="keyword">new</span> ChainItem(showObject);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置链条</span></span><br><span class="line"><span class="keyword">let</span> next1 = chainObject.setNext(chainNumber);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;next1:  &quot;</span> + <span class="built_in">JSON</span>.stringify(next1)); <span class="comment">// next1:  &#123;&quot;next&quot;:&#123;&quot;next&quot;:null&#125;&#125;</span></span><br><span class="line"><span class="keyword">let</span> next2 = next1.setNext(chainString);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;next2:  &quot;</span> + <span class="built_in">JSON</span>.stringify(next2)); <span class="comment">// &#123;&quot;next&quot;:null&#125;</span></span><br><span class="line"></span><br><span class="line">chainString.start(<span class="string">&quot;12&quot;</span>); <span class="comment">// string 12</span></span><br><span class="line">chainNumber.start(&#123;&#125;); <span class="comment">// 无匹配的执行项目</span></span><br><span class="line">chainObject.start(&#123;&#125;); <span class="comment">// object &#123;&#125;</span></span><br><span class="line">chainObject.start(<span class="number">123</span>); <span class="comment">// number 123</span></span><br></pre></td></tr></table></figure>

<p>这时想判断未定义的时候呢，直接加到链中即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 展示未定义</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showUndefined</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj === <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;undefined&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.toNext(obj);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> chainUndefined = <span class="keyword">new</span> ChainItem(showUndefined);</span><br><span class="line">chainString.setNext(chainUndefined);</span><br><span class="line"></span><br><span class="line">chainNumber.start(); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p><code>对象增多，结构更清晰，一定程度上可能影响性能，注意避免过长的职责链</code></p>
<h2><a href="#zhong-jie-zhe-mo-shi" class="header-anchor">#</a><span id="zhong-jie-zhe-mo-shi">中介者模式</span></h2><h3><a href="#ding-yi" class="header-anchor">#</a><span id="ding-yi">定义</span></h3><p>所有的相关 对象都通过中介者对象来通信，而不是互相引用，所以当一个对象发生改变时，只需要通知中介者对象即可</p>
<h3><a href="#he-xin" class="header-anchor">#</a><span id="he-xin">核心</span></h3><p>使网状的多对多关系变成了相对简单的一对多关系（复杂的调度处理都交给中介者）</p>
<h3><a href="#shi-xian" class="header-anchor">#</a><span id="shi-xian">实现</span></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> A = &#123;</span><br><span class="line">  score: <span class="number">10</span>,</span><br><span class="line"></span><br><span class="line">  changeTo: <span class="function"><span class="keyword">function</span> (<span class="params">score</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.score = score;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自己获取</span></span><br><span class="line">    <span class="built_in">this</span>.getRank();</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 直接获取</span></span><br><span class="line">  getRank: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> scores = [<span class="built_in">this</span>.score, B.score, C.score].sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> a &lt; b;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(scores.indexOf(<span class="built_in">this</span>.score) + <span class="number">1</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> B = &#123;</span><br><span class="line">  score: <span class="number">20</span>,</span><br><span class="line"></span><br><span class="line">  changeTo: <span class="function"><span class="keyword">function</span> (<span class="params">score</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.score = score;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过中介者获取</span></span><br><span class="line">    rankMediator(B);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> C = &#123;</span><br><span class="line">  score: <span class="number">30</span>,</span><br><span class="line"></span><br><span class="line">  changeTo: <span class="function"><span class="keyword">function</span> (<span class="params">score</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.score = score;</span><br><span class="line"></span><br><span class="line">    rankMediator(C);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中介者，计算排名</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rankMediator</span>(<span class="params">person</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> scores = [A.score, B.score, C.score].sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &lt; b;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(scores.indexOf(person.score) + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A通过自身来处理</span></span><br><span class="line">A.changeTo(<span class="number">100</span>); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// B和C交由中介者处理</span></span><br><span class="line">B.changeTo(<span class="number">200</span>); <span class="comment">// 1</span></span><br><span class="line">C.changeTo(<span class="number">50</span>); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<p>虽然中介者做到了对模块和对象的解耦，但有时对象之间的关系并非一定要解耦，强行使用中介者来整合，可能会使代码更为繁琐，需要注意</p>
<h2><a href="#zhuang-shi-zhe-mo-shi" class="header-anchor">#</a><span id="zhuang-shi-zhe-mo-shi">装饰者模式</span></h2><h3><a href="#1-ding-yi" class="header-anchor">#</a><span id="1-ding-yi">1. 定义</span></h3><p>以动态地给某个对象添加一些额外的职责，而不会影响从这个类中派生的其他对象。<br>是一种“即用即付”的方式，能够在不改变对 象自身的基础上，在程序运行期间给对象动态地 添加职责</p>
<h3><a href="#2-he-xin" class="header-anchor">#</a><span id="2-he-xin">2. 核心</span></h3><p>是为对象动态加入行为，经过多重包装，可以形成一条装饰链</p>
<h3><a href="#3-shi-xian" class="header-anchor">#</a><span id="3-shi-xian">3. 实现</span></h3><p>最简单的装饰者，就是重写对象的属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> A = &#123;</span><br><span class="line">  score: <span class="number">10</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">A.score = <span class="string">&quot;分数：&quot;</span> + A.score;</span><br></pre></td></tr></table></figure>

<p>可以使用传统面向对象的方法来实现装饰，添加技能</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.skill = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;数学&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 装饰器，还会音乐</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MusicDecorator</span>(<span class="params">person</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.person = person;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MusicDecorator.prototype.skill = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.person.skill();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;音乐&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 装饰器，还会跑步</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">RunDecorator</span>(<span class="params">person</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.person = person;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">RunDecorator.prototype.skill = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.person.skill();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;跑步&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 装饰一下</span></span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> MusicDecorator(person);</span><br><span class="line">person1 = <span class="keyword">new</span> RunDecorator(person1);</span><br><span class="line"></span><br><span class="line">person.skill(); <span class="comment">// 数学</span></span><br><span class="line">person1.skill(); <span class="comment">// 数学 音乐 跑步</span></span><br></pre></td></tr></table></figure>

<p><code>更简洁的写法</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 装饰器，在当前函数执行前先执行另一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decoratorBefore</span>(<span class="params">fn, beforeFn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ret = beforeFn.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在前一个函数中判断，不需要执行当前函数</span></span><br><span class="line">    <span class="keyword">if</span> (ret !== <span class="literal">false</span>) &#123;</span><br><span class="line">      fn.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">skill</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;数学&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">skillMusic</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;音乐&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">skillRun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;跑步&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> skillDecorator = decoratorBefore(skill, skillMusic);</span><br><span class="line">skillDecorator = decoratorBefore(skillDecorator, skillRun);</span><br><span class="line"></span><br><span class="line">skillDecorator(); <span class="comment">// 跑步 音乐 数学</span></span><br></pre></td></tr></table></figure>

<h2><a href="#zhuang-tai-mo-shi" class="header-anchor">#</a><span id="zhuang-tai-mo-shi">状态模式</span></h2><h3><a href="#1-ding-yi" class="header-anchor">#</a><span id="1-ding-yi">1. 定义</span></h3><p>事物内部状态的改变往往会带来事物的行为改变。在处理的时候，将这个处理委托给当前的 <code>状态对象</code> 即可，该状态对象会负责渲染它自身的行为</p>
<h3><a href="#2-he-xin" class="header-anchor">#</a><span id="2-he-xin">2. 核心</span></h3><p>区分事物内部的状态，把事物的每种状态都封装成单独的类，跟此种状态有关的行为都被封装在这个类的内部</p>
<h3><a href="#3-shi-xian" class="header-anchor">#</a><span id="3-shi-xian">3. 实现</span></h3><p>以一个人的工作状态作为例子，在刚醒、精神、疲倦几个状态中切换着</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 工作状态</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Work</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.currentState = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 工作状态，保存为对应状态对象</span></span><br><span class="line">  <span class="built_in">this</span>.wakeUpState = <span class="keyword">new</span> WakeUpState(<span class="built_in">this</span>);</span><br><span class="line">  <span class="comment">// 精神饱满</span></span><br><span class="line">  <span class="built_in">this</span>.energeticState = <span class="keyword">new</span> EnergeticState(<span class="built_in">this</span>);</span><br><span class="line">  <span class="comment">// 疲倦</span></span><br><span class="line">  <span class="built_in">this</span>.tiredState = <span class="keyword">new</span> TiredState(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.init();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Work.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.currentState = <span class="built_in">this</span>.wakeUpState;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 点击事件，用于触发更新状态</span></span><br><span class="line">  <span class="built_in">document</span>.body.onclick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.currentState.behaviour();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新工作状态</span></span><br><span class="line">Work.prototype.setState = <span class="function"><span class="keyword">function</span> (<span class="params">state</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.currentState = state;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 刚醒</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">WakeUpState</span>(<span class="params">work</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.work = work;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 刚醒的行为</span></span><br><span class="line">WakeUpState.prototype.behaviour = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.work.name, <span class="string">&quot;:&quot;</span>, <span class="string">&quot;刚醒呢，睡个懒觉先&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 只睡了2秒钟懒觉就精神了..</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.work.setState(<span class="built_in">this</span>.work.energeticState);</span><br><span class="line">  &#125;, <span class="number">2</span> * <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 精神饱满</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">EnergeticState</span>(<span class="params">work</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.work = work;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EnergeticState.prototype.behaviour = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.work.name, <span class="string">&quot;:&quot;</span>, <span class="string">&quot;超级精神的&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 才精神1秒钟就发困了</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.work.setState(<span class="built_in">this</span>.work.tiredState);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 疲倦</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TiredState</span>(<span class="params">work</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.work = work;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TiredState.prototype.behaviour = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.work.name, <span class="string">&quot;:&quot;</span>, <span class="string">&quot;怎么肥事，好困&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 不知不觉，又变成了刚醒着的状态... 不断循环呀</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.work.setState(<span class="built_in">this</span>.work.wakeUpState);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> work = <span class="keyword">new</span> Work(<span class="string">&quot;曹操&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3><a href="#4-you-que-dian" class="header-anchor">#</a><span id="4-you-que-dian">4. 优缺点</span></h3><h4><a href="#you-dian" class="header-anchor">#</a><span id="you-dian">优点</span></h4><p>状态切换逻辑分布在状态类中，易于维护</p>
<h4><a href="#que-dian" class="header-anchor">#</a><span id="que-dian">缺点</span></h4><p>多个状态类，影响性能，可用享元模式进一步优化</p>
<p>将逻辑分散在状态类中，不易看出状态机变化逻辑</p>
<h2><a href="#shi-si-gua-pei-qi-mo-shi" class="header-anchor">#</a><span id="shi-si-gua-pei-qi-mo-shi">十四、适配器模式</span></h2><h3><a href="#ding-yi" class="header-anchor">#</a><span id="ding-yi">定义</span></h3><p>是解决两个软件实体间的接口不兼容的问题，对不兼容的部分进行适配</p>
<h3><a href="#shi-xian" class="header-anchor">#</a><span id="shi-xian">实现</span></h3><p>比如一个简单的数据格式转换的适配器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 渲染数据，格式限制为数组了</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderData</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  data.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对非数组的进行转换适配</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">arrayAdapter</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> data !== <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(data) === <span class="string">&quot;[object Array]&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> temp = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">in</span> data) &#123;</span><br><span class="line">    <span class="comment">// hasOwnProperty() 方法会返回一个布尔值，指示对象自身属性中是否具有指定的属性（也就是，是否有指定的键）</span></span><br><span class="line">    <span class="comment">// 原型链上继承过来的属性无法通过 hasOwnProperty 检测到</span></span><br><span class="line">    <span class="keyword">if</span> (data.hasOwnProperty(item)) &#123;</span><br><span class="line">      temp.push(data[item]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">&quot;B&quot;</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">&quot;C&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">renderData(arrayAdapter(data)); <span class="comment">// A B C</span></span><br></pre></td></tr></table></figure>

<h2><a href="#wai-guan-mo-shi" class="header-anchor">#</a><span id="wai-guan-mo-shi">外观模式</span></h2><h3><a href="#1-ding-yi" class="header-anchor">#</a><span id="1-ding-yi">1. 定义</span></h3><p>为子系统中的<code>一组接口</code>提供一个<code>一致的界面</code>，定义一个<code>高层接口</code>，这个接口使子系统更加容易使用</p>
<h3><a href="#2-he-xin" class="header-anchor">#</a><span id="2-he-xin">2. 核心</span></h3><p>可以通过请求外观接口来达到访问子系统，也可以选择越过外观来直接访问子系统</p>
<h3><a href="#3-shi-xian" class="header-anchor">#</a><span id="3-shi-xian">3. 实现</span></h3><p>外观模式在 JS 中，可以认为是一组函数的集合</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 三个处理函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doing</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;doing&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">end</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 外观函数，将一些处理统一起来，方便调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  start();</span><br><span class="line">  doing();</span><br><span class="line">  end();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用init开始执行</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 此处直接调用了高层函数，也可以选择越过它直接调用相关的函数</span></span><br><span class="line">  execute();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">init(); <span class="comment">// start doing end</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>css</title>
    <url>/2021/08/26/css/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#js-css-gong-xiang-bian-liang">js css 共享变量</a></li>
<li><a href="#css-luo-ji-shu-xing">css 逻辑属性</a><ul>
<li><a href="#inline-he-block">-inline 和 -block</a></li>
<li><a href="#inline-size-he-block-size">inline-size 和 block-size</a></li>
<li><a href="#position">Position</a></li>
</ul>
</li>
<li><a href="#shu-xie-fang-xiang">书写方向</a></li>
<li><a href="#css-feng-ge">css 风格</a><ul>
<li><a href="#smacss">SMAcss</a></li>
<li><a href="#css-module">css module</a></li>
<li><a href="#styled-components">styled-components</a></li>
</ul>
</li>
<li><a href="#postcss">PostCss</a></li>
<li><a href="#jian-rong">兼容</a></li>
<li><a href="#xiang-ying-shi">响应式</a></li>
<li><a href="#xiang-ying-shi-bei-jing-tu">响应式-背景图</a></li>
<li><a href="#she-bei-fen-bian-lu">设备分辨率</a></li>
<li><a href="#ji-chu">基础</a></li>
<li><a href="#css3-dong-hua">css3 动画</a></li>
<li><a href="#css-sheng-cheng-qi">css 生成器</a></li>
<li><a href="#dan-wei">单位</a></li>
<li><a href="#you-xian-ji">优先级</a><ul>
<li><a href="#ji-suan-fang-shi">计算方式</a></li>
</ul>
</li>
<li><a href="#xuan-ze-qi">选择器</a><ul>
<li><a href="#can-kao">参考</a></li>
<li><a href="#wei-lei">伪类</a></li>
</ul>
</li>
<li><a href="#margin-he-bing">margin 合并</a><ul>
<li><a href="#he-bing-qian-ti">合并前提</a></li>
</ul>
</li>
<li><a href="#qing-chu-float">清除 float</a><ul>
<li><a href="#can-kao-1">参考</a></li>
</ul>
</li>
<li><a href="#bfc">BFC</a><ul>
<li><a href="#can-kao-2">参考</a></li>
<li><a href="#what">WHAT</a></li>
<li><a href="#how-why">HOW &amp; WHY</a></li>
</ul>
</li>
<li><a href="#ifc">IFC</a><ul>
<li><a href="#what-1">WHAT</a></li>
<li><a href="#how-why-1">HOW &amp; WHY</a></li>
</ul>
</li>
<li><a href="#shui-ping-ju-zhong">水平居中</a><ul>
<li><a href="#inline-yuan-su">inline 元素</a></li>
<li><a href="#block-yuan-su">block 元素</a></li>
<li><a href="#xing-nei-duo-ge-block-yuan-su">行内多个 block 元素</a></li>
<li><a href="#float-yuan-su">float 元素</a></li>
<li><a href="#absolute-yuan-su">absolute 元素</a></li>
</ul>
</li>
<li><a href="#chui-zhi-ju-zhong">垂直居中</a><ul>
<li><a href="#inline-yuan-su-dan-xing">inline 元素 (单行)</a></li>
<li><a href="#inline-yuan-su-duo-xing">inline 元素 (多行)</a></li>
<li><a href="#block-yuan-su-1">block 元素</a></li>
</ul>
</li>
<li><a href="#shui-ping-chui-zhi-ju-zhong">水平垂直居中</a><ul>
<li><a href="#yi-zhi-gao-kuan">已知高宽</a></li>
<li><a href="#yi-zhi-gao">已知高</a></li>
<li><a href="#wei-zhi-gao-kuan">未知高宽</a></li>
</ul>
</li>
<li><a href="#shi-xian-san-lan-bu-ju-de-ji-chong-fang-fa">实现三栏布局的几种方法</a><ul>
<li><a href="#flex-bu-ju">flex 布局</a></li>
<li><a href="#biao-ge-bu-ju">表格布局</a></li>
<li><a href="#fu-dong-bu-ju">浮动布局</a></li>
<li><a href="#jue-dui-bu-ju">绝对布局</a></li>
<li><a href="#wang-ge-bu-ju">网格布局</a></li>
</ul>
<ul>
<li><a href="#ji-chong-chang-jian-de-css-bu-ju">几种常见的 CSS 布局</a></li>
</ul>
</li>
<li><a href="#css-yu-chu-li-qi">CSS 预处理器</a><ul>
<li><a href="#can-kao-3">参考</a></li>
<li><a href="#what">What</a></li>
<li><a href="#benifit">Benifit</a></li>
<li><a href="#point">Point</a></li>
<li><a href="#qian-tao">嵌套</a></li>
<li><a href="#bian-liang">变量</a></li>
<li><a href="#bian-liang-zuo-yong-yu">变量作用域</a></li>
<li><a href="#xiu-gai-di-san-fang-ku-yang-shi">修改第三方库样式</a></li>
<li><a href="#cha-zhi">插值</a></li>
<li><a href="#mixin">mixin</a></li>
<li><a href="#ji-cheng">继承</a></li>
<li><a href="#han-shu">函数</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->

</div>

<h1><a href="#js-css-gong-xiang-bian-liang" class="header-anchor">#</a><span id="js-css-gong-xiang-bian-liang">js css 共享变量</span></h1><p><a href="https://segmentfault.com/a/1190000018795983?utm_source=tag-newest">https://segmentfault.com/a/1190000018795983?utm_source=tag-newest</a><br><a href="https://www.npmjs.com/package/sass-resources-loader">https://www.npmjs.com/package/sass-resources-loader</a></p>
<h1><a href="#css-luo-ji-shu-xing" class="header-anchor">#</a><span id="css-luo-ji-shu-xing">css 逻辑属性</span></h1><h2><a href="#inline-he-block" class="header-anchor">#</a><span id="inline-he-block">-inline 和 -block</span></h2><p>margin/padding/border-inline/block</p>
<p><code>-inline</code> -left 加 -right，跟书写方向有关，<code>margin-inline: 5px 10px</code>, 从左到有 margin-left 为 5px，右到左为 10px</p>
<p><code>-block</code> -top 加 bottom，其余同上</p>
<p>eg <code> border-block: 8px solid blue;</code></p>
<h2><a href="#inline-size-he-block-size" class="header-anchor">#</a><span id="inline-size-he-block-size">inline-size 和 block-size</span></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">width	inline-size</span><br><span class="line">max-width	max-inline-size</span><br><span class="line">min-width	min-inline-size</span><br><span class="line">height	block-size</span><br><span class="line">max-height	max-block-size</span><br><span class="line">min-height	min-block-size</span><br></pre></td></tr></table></figure>

<h2><a href="#position" class="header-anchor">#</a><span id="position">Position</span></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">top	inset-block-start</span><br><span class="line">bottom	inset-block-end</span><br><span class="line">left	inset-inline-start</span><br><span class="line">right	inset-inline-end</span><br><span class="line">top and bottom	inset-block</span><br><span class="line">left and right	inset-inline</span><br></pre></td></tr></table></figure>

<h1><a href="#shu-xie-fang-xiang" class="header-anchor">#</a><span id="shu-xie-fang-xiang">书写方向</span></h1><p>css</p>
<p><code>writing-mode: horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr</code></p>
<p>HTML</p>
<p>尽量使用 HTML 属性以防 css 无法加载</p>
<p><code>&lt;html dir=&quot;rtl&quot;&gt;</code></p>
<h1><a href="#css-feng-ge" class="header-anchor">#</a><span id="css-feng-ge">css 风格</span></h1><h2><a href="#smacss" class="header-anchor">#</a><span id="smacss">SMAcss</span></h2><p><a href="https://link.segmentfault.com/?url=https://smacss.com/">SMAcss</a></p>
<ul>
<li>Base</li>
<li>Layout</li>
<li>Module</li>
<li>State</li>
<li>Theme</li>
</ul>
<h2><a href="#css-module" class="header-anchor">#</a><span id="css-module">css module</span></h2><p>以 webpack 为例，使用 css-loader 就可以实现 css module</p>
<h2><a href="#styled-components" class="header-anchor">#</a><span id="styled-components">styled-components</span></h2><p>样式组件，all-in-js 的理念，不好阅读</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&quot;./style.less&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Wrapper = styled(div)<span class="string">`</span></span><br><span class="line"><span class="string">  border: 1px dashed <span class="subst">$&#123;(props) =&gt; props.color&#125;</span>;</span></span><br><span class="line"><span class="string">  width: 100%;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Header = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123;<span class="comment">/* 直接看 jsx，看不出来 Wrapper 的原始标签是 div */</span>&#125;</span><br><span class="line">      &lt;Wrapper color=<span class="string">&quot;#000&quot;</span>&gt;使用 styled-component &lt;/Wrapper&gt;</span><br><span class="line">      &lt;div className=&#123;styles.Wrapper&#125;&gt;使用 css Modules&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1><a href="#postcss" class="header-anchor">#</a><span id="postcss">PostCss</span></h1><p>转译、兼容前缀</p>
<h1><a href="#jian-rong" class="header-anchor">#</a><span id="jian-rong">兼容</span></h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*******</span></span><br><span class="line"><span class="comment">来源</span></span><br><span class="line"><span class="comment">*******/</span></span><br><span class="line"><span class="comment">// https://zhuanlan.zhihu.com/p/24413264</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*******</span></span><br><span class="line"><span class="comment">其他推荐</span></span><br><span class="line"><span class="comment">*******/</span></span><br><span class="line"><span class="comment">// https://juejin.im/entry/5847c21aac502e006b0f8031</span></span><br><span class="line"><span class="comment">// https://segmentfault.com/a/1190000004336869</span></span><br><span class="line"><span class="comment">// https://zhuanlan.zhihu.com/p/25216275</span></span><br><span class="line"><span class="comment">// https://aotu.io/notes/2017/11/27/iphonex/index.html</span></span><br><span class="line"><span class="comment">// https://jixianqianduan.com/frontend-css/2016/01/15/responsive-css.html</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*******</span></span><br><span class="line"><span class="comment">汇总</span></span><br><span class="line"><span class="comment">*******/</span></span><br><span class="line"><span class="comment">// https://www.zhihu.com/question/302297294</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*******</span></span><br><span class="line"><span class="comment">处理兼容问题的思路</span></span><br><span class="line"><span class="comment">*******/</span></span><br><span class="line"><span class="comment">// 要不要做</span></span><br><span class="line"><span class="comment">// -产品的角度（产品的受众、受众的浏览器比例、效果优先还是基本功能优先）</span></span><br><span class="line"><span class="comment">// -成本的角度 (有无必要做某件事)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 做到什么程度</span></span><br><span class="line"><span class="comment">// -让哪些浏览器支持哪些效果</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 如何做</span></span><br><span class="line"><span class="comment">// -根据兼容需求选择技术框架/库(如jquery 1.x.x)</span></span><br><span class="line"><span class="comment">// -根据兼容需求选择兼容工具：html5shiv、Respond.js、css Reset、normalize.css、Modernizr.js、 postcss</span></span><br><span class="line"><span class="comment">// -条件注释、css Hack、js 能力检测做一些修补</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*******</span></span><br><span class="line"><span class="comment">渐进增强和优雅降级</span></span><br><span class="line"><span class="comment">*******/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*******</span></span><br><span class="line"><span class="comment">具体方法</span></span><br><span class="line"><span class="comment">*******/</span></span><br><span class="line"><span class="comment">// IE条件注释</span></span><br><span class="line"><span class="comment">// 注意：只有 IE9以下的浏览器才能识别这种语法，其他浏览器仅仅认为 是普通注释。</span></span><br><span class="line"><span class="comment">// demo</span></span><br><span class="line">&lt;!--[<span class="keyword">if</span> IE <span class="number">6</span>]&gt;</span><br><span class="line">&lt;p&gt;IE6下 这句生效，在其他浏览器下认为是普通注释&lt;/p&gt;</span><br><span class="line">&lt;![endif]--&gt;</span><br><span class="line">&lt;!--[<span class="keyword">if</span> !IE]&gt;&lt;!--&gt;</span><br><span class="line">&lt;script&gt;alert(<span class="string">&quot;在 IE 下条件语法生效，但script不执行。在非 IE 下上下两句都被当做注释所以当前 script 会执行&quot;</span>);&lt;/script&gt;</span><br><span class="line">&lt;!--&lt;![endif]--&gt;</span><br><span class="line">&lt;!--[<span class="keyword">if</span> IE <span class="number">8</span>]&gt;</span><br><span class="line">&lt;link href=<span class="string">&quot;ie8only.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">&lt;![endif]--&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// css hack</span></span><br><span class="line">.box&#123;</span><br><span class="line">  color: red;</span><br><span class="line">  _color: blue; <span class="comment">/*只有ie6认识*/</span></span><br><span class="line">  *color: pink; <span class="comment">/*只有ie67认识*/</span></span><br><span class="line">  color: yellow\<span class="number">9</span>;  <span class="comment">/*ie浏览器都能识别*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 常见属性的兼容情况</span></span><br><span class="line">inline-block: &gt;=ie8</span><br><span class="line">min-width/min-height: &gt;=ie7</span><br><span class="line">:before,:after: &gt;=ie8</span><br><span class="line">div:hover: &gt;=ie7</span><br><span class="line">inline-block: &gt;=ie8</span><br><span class="line">background-size: &gt;=ie9</span><br><span class="line">圆角: &gt;= ie9</span><br><span class="line">阴影: &gt;= ie9</span><br><span class="line">动画/渐变: &gt;= ie10</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一些兼容写法范例</span></span><br><span class="line">.clearfix:after&#123;</span><br><span class="line">  content: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  display: block;</span><br><span class="line">  clear: both;</span><br><span class="line">&#125;</span><br><span class="line">.clearfix&#123;</span><br><span class="line">  *zoom: <span class="number">1</span>; <span class="comment">/* 仅对ie67有效，zoom:1触发hasLayout,起到类似BFC的效果 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.target&#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  *display: inline; <span class="comment">/*仅对ie67生效*/</span></span><br><span class="line">  *zoom: <span class="number">1</span>; <span class="comment">/*仅对ie67生效*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!--[<span class="keyword">if</span> lt IE <span class="number">9</span>]&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;https://oss.maxcdn.com/respond/1.4.2/respond.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;![endif]--&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;!--[<span class="keyword">if</span> lt IE <span class="number">7</span> ]&gt; <span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">class</span>=<span class="string">&quot;no-js ie6&quot;</span>&gt;</span> &lt;![endif]--&gt;</span></span><br><span class="line">&lt;!--[if IE 7 ]&gt;    &lt;html class=&quot;no-js ie7&quot;&gt; &lt;![endif]--&gt;</span><br><span class="line">&lt;!--[if IE 8 ]&gt;    &lt;html  class=&quot;no-js ie8&quot;&gt; &lt;![endif]--&gt;</span><br><span class="line">&lt;!--[if (gte IE 9)|!(IE)]&gt;&lt;!--&gt;&lt;html  class=&quot;no-js&quot;&gt;&lt;!--&lt;![endif]--&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*******</span><br><span class="line">推荐的 兼容相关的工具/库</span><br><span class="line">*******/</span><br><span class="line">// https://github.com/Modernizr/Modernizr</span><br><span class="line">// https://github.com/postcss/postcss</span><br></pre></td></tr></table></figure>

<h1><a href="#xiang-ying-shi" class="header-anchor">#</a><span id="xiang-ying-shi">响应式</span></h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https://github.com/ljianshu/Blog/issues/38</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">一、前言</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 适配多种设备和多个屏幕</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">二、视口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// viewport （视口） ==  浏览器中用于呈现网页的区域。</span></span><br><span class="line"><span class="comment">// 视口通常并不等于屏幕大小，特别是可以缩放浏览器窗口的情况下。</span></span><br><span class="line"><span class="comment">// 电脑端的视口宽度等于分辨率，而移动端的视口宽度跟分辨率没有关系,宽度默认值是设备厂家指定的。</span></span><br><span class="line"><span class="comment">// iOS, Android 基本都将这个视口分辨率设置为 980px。</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>约束视口</span><br><span class="line">&lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;</span> /&gt;</span><br><span class="line"><span class="comment">// width=device-width   视口为设备宽度（就是人设置的一个宽度）//不设置的话默认为980px</span></span><br><span class="line"><span class="comment">// initial-scale=1.0    初始化的视口大小是1.0倍</span></span><br><span class="line"><span class="comment">// maximum-scale=1.0    最大的倍数是1.0倍</span></span><br><span class="line"><span class="comment">// user-scalable=0      不允许缩放视口</span></span><br><span class="line"><span class="comment">// 约束后的视口宽度都是在 320~480 之间（手机竖直使用的时候）。</span></span><br><span class="line"><span class="comment">// 这个视口的尺寸，是手机厂商设置的</span></span><br><span class="line"><span class="comment">// 能够保证</span></span><br><span class="line"><span class="comment">//   1)我们的文字比如 16px，在自己的这个视口下清晰、大小刚刚合适。</span></span><br><span class="line"><span class="comment">//   2)我们的网页可以用 px 写字号、写行高。</span></span><br><span class="line"><span class="comment">// 注意：</span></span><br><span class="line"><span class="comment">//   1)约束之后的视口宽度，不是自己的分辨率！！每个手机的分辨率，都要比自己的视口宽度大得多得多！</span></span><br><span class="line"><span class="comment">//   2)前端开发工程师，丝毫不关心手机的分辨率，我们只关心视口</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">三、图片</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">我们想让图片能在不同大小的屏幕中自动缩放</span><br><span class="line">img &#123;</span><br><span class="line"> max-width: <span class="number">100</span>%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">为什么用 max-width?</span><br><span class="line"><span class="comment">// 保证所有图片最大显示为其自身的 100%（即最大只可以显示为自身那么大）。此时，如果包含图片的元素（比如包含图片的 body 或 div）比图片固有宽度小，图片会缩放占满最大可用空间</span></span><br><span class="line"></span><br><span class="line">为什么不用 width:<span class="number">100</span>%?</span><br><span class="line"><span class="comment">// 这条规则会导致它显示得跟它的容器一样宽。在容器比图片宽得多的情况下，图片会被无谓地拉伸。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">四、兼容手机浏览器内核</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">移动端，四个独立的浏览器内核</span><br><span class="line"><span class="comment">// 微软的 Trident</span></span><br><span class="line"><span class="comment">// 火狐的 Gecko</span></span><br><span class="line"><span class="comment">// 开源内核 Webkit</span></span><br><span class="line"><span class="comment">// Opera 的 Presto</span></span><br><span class="line"></span><br><span class="line">兼容浏览器内核的前缀：</span><br><span class="line"><span class="comment">// 1	-ms-</span></span><br><span class="line"><span class="comment">// 2	-moz-</span></span><br><span class="line"><span class="comment">// 3	-o-</span></span><br><span class="line"><span class="comment">// 4	-webkit-</span></span><br><span class="line"></span><br><span class="line">一般兼容-webkit-即可</span><br><span class="line"><span class="comment">// 因为占了绝大部分的市场份额</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">五、百分比布局也叫作流式布局、弹性盒布局</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">百分比能够设置的属性是 width、height、padding、margin。</span><br><span class="line">其他属性比如 border、font-size 不能用百分比设置的</span><br><span class="line"></span><br><span class="line">如果用百分比写</span><br><span class="line"><span class="comment">// width，指的是父元素 width 的百分之多少</span></span><br><span class="line"><span class="comment">// height，那么指的是父元素 height 的百分之多少</span></span><br><span class="line"><span class="comment">// padding，那么指的是父元素 width 的百分之多少，无论是水平的 padding 还是竖直的 padding</span></span><br><span class="line"><span class="comment">// margin，那么指的是父元素 width 的百分之多少，无论是水平的 margin 还是竖直的 margin</span></span><br><span class="line"></span><br><span class="line">用百分比写的 demo</span><br><span class="line">div&#123;</span><br><span class="line">  width:200px;</span><br><span class="line">  height:300px;</span><br><span class="line">  padding:10px;</span><br><span class="line">&#125;</span><br><span class="line">div p&#123;</span><br><span class="line">  width:<span class="number">50</span>%;</span><br><span class="line">  height:<span class="number">50</span>%;</span><br><span class="line">  padding:<span class="number">10</span>%;</span><br><span class="line">&#125;</span><br><span class="line">此时p的真实宽度是多少？</span><br><span class="line"><span class="comment">// width = 200px x 50% + 2 x 200px x 10% (左右padding) = 140px</span></span><br><span class="line"><span class="comment">// height = 300px x 50% + 2 x 200px x 10% (上下padding) = 190px</span></span><br><span class="line"><span class="comment">// 此时 p 的真实宽度是 140px*190px</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">六、媒体查询</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// IE6、7、8 不支持媒体查询</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>为什么响应式 Web 设计需要媒体查询</span><br><span class="line"><span class="comment">// css3 媒体查询可以让我们</span></span><br><span class="line"><span class="comment">// 针对特定的设备能力或条件</span></span><br><span class="line"><span class="comment">// 为网页应用特定的 css 样式</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>媒体查询语法</span><br><span class="line"><span class="comment">// 基本的样式</span></span><br><span class="line">body &#123;</span><br><span class="line">    background-color: grey;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 为不同视口、不同能力的设备，渐进增加不同的视觉效果和功能</span></span><br><span class="line">@media screen and (min-width:1200px)&#123;</span><br><span class="line">    body&#123;</span><br><span class="line">        background-color: pink;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> @media screen and (min-width:700px) and (max-width:1200px)&#123;</span><br><span class="line">    body&#123;</span><br><span class="line">	background-color: blue;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">@media screen and (max-width:700px)&#123;</span><br><span class="line">    body&#123;</span><br><span class="line">	background-color: orange;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">七、rem 响应式布局</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">rem 响应式布局思想</span><br><span class="line"><span class="comment">// 一般不要给元素设置具体的宽度,但是对于一些小图标可以设定具体宽度值</span></span><br><span class="line"><span class="comment">// 高度值可以设置固定值,设计稿有多大,我们就严格写多大。除了登录页面这种特殊情况（铺满 &amp; 避免滚动条），要考虑设备高度，比如在 1024*768 1280*1024 1280*800 这三个设备的范围内，以 1024*768 准，从而确定内容宽高，这是折中的做法</span></span><br><span class="line"><span class="comment">// 所有设置的固定值都用 REM 做单位</span></span><br><span class="line"><span class="comment">//   (首先在 HTML 中设置一个基准值：PX 和 REM 的对应比例,然后在效果图上获取 PX 值,布局的时候转化为 REM 值)</span></span><br><span class="line"><span class="comment">// JS 获取真实屏幕的宽度,让其除以设计稿的宽度,算出比例,把之前的基准值按照比例进行重新的设定,这样项目就可以在移动端自适应了</span></span><br><span class="line"></span><br><span class="line">rem 与 em 有何区别</span><br><span class="line">rem</span><br><span class="line"><span class="comment">// 当前页面中元素的 REM 单位的样式值都是针对于 HTML 元素的 font-size 的值进行动态计算的</span></span><br><span class="line">em</span><br><span class="line"><span class="comment">// 表示父元素的字号的倍数。(特例：在 text-indent 属性中，表示文字宽度)</span></span><br><span class="line"></span><br><span class="line">rem 有一点优势就是可以和媒体查询配合，实现响应式布局</span><br><span class="line">demo 见</span><br><span class="line"><span class="comment">// https://github.com/ljianshu/Blog/issues/38</span></span><br></pre></td></tr></table></figure>

<h1><a href="#xiang-ying-shi-bei-jing-tu" class="header-anchor">#</a><span id="xiang-ying-shi-bei-jing-tu">响应式-背景图</span></h1><p><a href="https://www.cnblogs.com/hgj123/p/6547915.html">https://www.cnblogs.com/hgj123/p/6547915.html</a><br><a href="https://www.imooc.com/article/14017">https://www.imooc.com/article/14017</a><br>结合响应式使用</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 方法1 */</span></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="comment">/* img是行内元素。不是块级元素。如果不给img加上block,页面上会出现一点点空隙，图片不能完全贴合 */</span></span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="comment">/* 宽度如果不需要跟着容器拉伸的话，可注释下面两行 */</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 方法2 */</span></span><br><span class="line"><span class="selector-class">.some-class</span> &#123;</span><br><span class="line">  <span class="comment">/* 加载背景图 */</span></span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">images/background-photo.jpg</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 背景图垂直、水平均居中 */</span></span><br><span class="line">  <span class="attribute">background-position</span>: center center;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 背景图不平铺 */</span></span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 当内容高度大于图片高度时，背景图像的位置相对于viewport固定 */</span></span><br><span class="line">  <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 让背景图基于容器大小伸缩 */</span></span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 设置背景颜色，背景图加载过程中会显示背景色 */</span></span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#464646</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1><a href="#she-bei-fen-bian-lu" class="header-anchor">#</a><span id="she-bei-fen-bian-lu">设备分辨率</span></h1><p>PC 端常见分辨率 <a href="https://blog.csdn.net/weixin_30340745/article/details/97680702?utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link">https://blog.csdn.net/weixin_30340745/article/details/97680702?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1024*600            （常见8、9寸电脑使用)</span><br><span class="line">1024*768            （常见10.4、12.1、14.1、15寸电脑使用）</span><br><span class="line">1280*1024            (常见14.1、15寸电脑使用）</span><br><span class="line">1280*800            （常见10.8、12.1、15.4寸电脑使用）</span><br><span class="line">1280*854            （不常见)</span><br><span class="line">1366*768            （常见15.2寸电脑使用)（主流）</span><br><span class="line">1440*1050            (常见15、16.1寸电脑使用)</span><br><span class="line">1440*900            （苹果17寸电脑)</span><br><span class="line">1600 * 900            (非主流)</span><br><span class="line">1600*1200            (常见15、16.1寸电脑使用)</span><br><span class="line">1600*1024            (不常见)</span><br><span class="line">1680*1050            (常见15.4、20寸电脑)</span><br><span class="line">1920*1080            (主流)</span><br><span class="line">1920*1200            (常见20寸电脑)</span><br></pre></td></tr></table></figure>

<h1><a href="#ji-chu" class="header-anchor">#</a><span id="ji-chu">基础</span></h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*********************** 背景图片示例 ***********************/</span></span><br><span class="line">background:lightgray url(doge.jpg) repeat-x;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*********************** css 的使用 ***********************/</span></span><br><span class="line"><span class="comment">// 内联</span></span><br><span class="line">&lt;h1 style=<span class="string">&#x27;background:red;&#x27;</span>&gt;内联&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;head&gt; 标签内的 &lt;style&gt; 标签</span></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;fe <span class="number">16</span>&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .c &#123;</span><br><span class="line">            transform: translate(20px, 40px);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;link&gt; 标签中的外联</span></span><br><span class="line">&lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;fe6.css&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*********************** 三种主要的选择器 ***********************/</span></span><br><span class="line">&lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;c-class&quot;</span> id=<span class="string">&#x27;c-id&#x27;</span>&gt;c&lt;/span&gt;</span><br><span class="line"><span class="comment">// 元素选择器</span></span><br><span class="line">span &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class 选择器</span></span><br><span class="line">.c-<span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// id 选择器</span></span><br><span class="line">#c-id &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*********************** 优先级 ***********************/</span></span><br><span class="line"><span class="comment">// 样式优先级(从高到低)</span></span><br><span class="line">    !important</span><br><span class="line">    内联样式</span><br><span class="line">    &lt;style&gt; 中的样式</span><br><span class="line">    link 中的样式</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择器优先级(从高到低)</span></span><br><span class="line">    !important</span><br><span class="line">    内联样式</span><br><span class="line">    id 选择器</span><br><span class="line">    <span class="class"><span class="keyword">class</span> 选择器</span></span><br><span class="line"><span class="class">    元素选择器</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">/*********************** <span class="title">display</span> 属性 ***********************/</span></span><br><span class="line"><span class="class">// <span class="title">block</span></span></span><br><span class="line"><span class="class"><span class="title">block</span> 占一行</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">// <span class="title">inline</span></span></span><br><span class="line"><span class="class"><span class="title">inline</span> 只占 <span class="title">content</span> 的尺寸</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">// <span class="title">inline</span>-<span class="title">block</span></span></span><br><span class="line"><span class="class">最常用</span></span><br><span class="line"><span class="class"><span class="title">inline</span>-<span class="title">block</span> 对外表现为 <span class="title">inline</span>，所以可以和别的 <span class="title">inline</span> 放在一行</span></span><br><span class="line"><span class="class">对内表现为 <span class="title">block</span>，所以可以设置自身的宽高</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">/*********************** 盒模型 ***********************/</span></span><br><span class="line"><span class="class">// <span class="title">inline</span> 元素没有盒模型</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">/*********************** 定位 ***********************/</span></span><br><span class="line"><span class="class">// <span class="title">position</span> 属性用于元素定位</span></span><br><span class="line"><span class="class">    <span class="title">static</span></span></span><br><span class="line"><span class="class">    <span class="title">relative</span></span></span><br><span class="line"><span class="class">    <span class="title">absolute</span></span></span><br><span class="line"><span class="class">    <span class="title">fixed</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">非 <span class="title">static</span> 元素可以用 <span class="title">top</span> <span class="title">left</span> <span class="title">bottom</span> <span class="title">right</span> 属性来设置坐标</span></span><br><span class="line"><span class="class">非 <span class="title">static</span> 元素可以用 <span class="title">z</span>-<span class="title">index</span> 属性来设置显示层次</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">// <span class="title">relative</span></span></span><br><span class="line"><span class="class">相对定位</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">// <span class="title">absolute</span></span></span><br><span class="line"><span class="class">完全绝对定位, 忽略其他所有东西</span></span><br><span class="line"><span class="class">往上浮动到 非 <span class="title">static</span> 的元素</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">// <span class="title">fixed</span></span></span><br><span class="line"><span class="class">基于 <span class="title">window</span> 的绝对定位, 不随页面滚动改变</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">/*********************** <span class="title">overflow</span> 属性 ***********************/</span></span><br><span class="line"><span class="class">// <span class="title">visible</span> 默认</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">// <span class="title">auto</span></span></span><br><span class="line"><span class="class">需要的时候加滚动条</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">// <span class="title">hidden</span></span></span><br><span class="line"><span class="class">隐藏多余元素</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">// <span class="title">scroll</span></span></span><br><span class="line"><span class="class">就算用不着也会强制加滚动条</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">/*********************** 盒模型相关的 <span class="title">css</span> ***********************/</span></span><br><span class="line"><span class="class">// 盒模型相关的 <span class="title">css</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">// 建议</span></span><br><span class="line"><span class="class">// 1.简写</span></span><br><span class="line"><span class="class">// 2.<span class="title">html</span> 上操作再 <span class="title">copy</span></span></span><br><span class="line"><span class="class">// 3.或 <span class="title">css</span> 生成网站上生成</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">// 简写示例</span></span><br><span class="line">border: 3px red solid;</span><br><span class="line">background: #233 url(bg.png) no-repeat;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*********************** 居中写法 ***********************/</span></span><br><span class="line"><span class="comment">// block 元素居中</span></span><br><span class="line">margin: <span class="number">0</span> auto;</span><br><span class="line"></span><br><span class="line"><span class="comment">// inline inline-block 元素居中</span></span><br><span class="line">text-align: center;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*********************** 下划线 ***********************/</span></span><br><span class="line">text-decoration:</span><br><span class="line">    underline</span><br><span class="line">    overline</span><br><span class="line">    line-through</span><br><span class="line">    blink(这个值已经废弃了)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*********************** margin 合并 ***********************/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1><a href="#css3-dong-hua" class="header-anchor">#</a><span id="css3-dong-hua">css3 动画</span></h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">css3 动画的套路(主要是定了一套测试动画的方案)</span></span><br><span class="line"><span class="comment">    translate 优先于 rorate</span></span><br><span class="line"><span class="comment">    animationend 事件</span></span><br><span class="line"><span class="comment">        在动画播完后触发</span></span><br><span class="line"><span class="comment">        动画播放被暂停不会触发</span></span><br><span class="line"><span class="comment">    animationiteration 事件</span></span><br><span class="line"><span class="comment">        在动画播放一轮后触发</span></span><br><span class="line"><span class="comment">        如果动画只播放一轮, 那么不会触发此事件</span></span><br><span class="line"><span class="comment">    利用事件测试动画</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>css3测试动画方案<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      .gua-block &#123;</span><br><span class="line"><span class="css">        <span class="attribute">background</span>: lightblue;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      .gua-spin &#123;</span><br><span class="line"><span class="css">        <span class="attribute">animation</span>: spin linear <span class="number">2s</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">animation-iteration-count</span>: <span class="number">1</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">      <span class="keyword">@keyframes</span> spin &#123;</span></span><br><span class="line">        0% &#123;</span><br><span class="line"><span class="css">          <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        100% &#123;</span><br><span class="line"><span class="css">          <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">160deg</span>) <span class="built_in">translate</span>(<span class="number">0</span>, <span class="number">50px</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gua-block&quot;</span>&gt;</span>方块<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;play&quot;</span>&gt;</span>播放动画<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> e = <span class="function"><span class="keyword">function</span> (<span class="params">sel</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(sel);</span></span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> playAnimation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> animation = <span class="string">&quot;gua-spin&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> block = e(<span class="string">&quot;.gua-block&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 让它开始播放动画</span></span></span><br><span class="line">        block.classList.add(animation);</span><br><span class="line"><span class="javascript">        <span class="comment">// 绑定一个 animationend 事件, 在动画结束后删除动画 class</span></span></span><br><span class="line"><span class="javascript">        block.addEventListener(<span class="string">&quot;animationend&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">          block.classList.remove(animation);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> __main = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        e(<span class="string">&quot;.play&quot;</span>).addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line">          playAnimation();</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      __main();</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1><a href="#css-sheng-cheng-qi" class="header-anchor">#</a><span id="css-sheng-cheng-qi">css 生成器</span></h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*************************************</span></span><br><span class="line"><span class="comment">keyframes 动画和生成器</span></span><br><span class="line"><span class="comment"> ************************************/</span></span><br><span class="line">https:<span class="comment">//daneden.github.io/animate.css/</span></span><br><span class="line">http:<span class="comment">//cssanimate.com/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*************************************</span></span><br><span class="line"><span class="comment">其他 css3 生成器</span></span><br><span class="line"><span class="comment"> ************************************/</span></span><br><span class="line">http:<span class="comment">//css3generator.com/</span></span><br><span class="line">http:<span class="comment">//www.css3generator.in/</span></span><br><span class="line">http:<span class="comment">//css3.me/</span></span><br><span class="line">https:<span class="comment">//www.tutorialspoint.com/css/css3_boarder_image.htm</span></span><br><span class="line">https:<span class="comment">//www.html.cn/tool/css3Preview/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1><a href="#dan-wei" class="header-anchor">#</a><span id="dan-wei">单位</span></h1><h1><a href="#" class="header-anchor">#</a><span id></span></h1><h1><a href="#you-xian-ji" class="header-anchor">#</a><span id="you-xian-ji">优先级</span></h1><ul>
<li>!important &gt; 内联 &gt; ID 选择器 &gt; 类选择器 &gt; 标签选择器<ul>
<li>尽量不要在内联样式中使用 !important</li>
</ul>
</li>
</ul>
<h3><a href="#ji-suan-fang-shi" class="header-anchor">#</a><span id="ji-suan-fang-shi">计算方式</span></h3><ul>
<li>a, b, c, d<br>如果有内联样式，a = 1 ，否则 a = 0，b 为 ID 选择器出现的次数，c 为类选择器、属性选择器和伪类出现的总次数，d 为标签选择器和伪元素出现的总次数</li>
<li>规则<br>从左到右进行比较，数值较大的优先；如果相等，则向右比较下一位，数值较大的优先；如果 4 位数全部相等，则后声明的优先</li>
</ul>
<h1><a href="#xuan-ze-qi" class="header-anchor">#</a><span id="xuan-ze-qi">选择器</span></h1><h3><a href="#can-kao" class="header-anchor">#</a><span id="can-kao">参考</span></h3><p><a href="http://www.ruanyifeng.com/blog/2009/03/css_selectors.html">http://www.ruanyifeng.com/blog/2009/03/css_selectors.html</a></p>
<ul>
<li>通配选择器</li>
</ul>
<p>星号 *， 用于匹配 html 文档内的所有元素，在搭配其他选择器使用时，会被完全忽略掉</p>
<ul>
<li>属性选择器</li>
</ul>
<p>选择器[属性条件] { 声明 }</p>
<ul>
<li>属性条件</li>
</ul>
<p>class 也可以这样操作，如 [class* = ‘col-‘]</p>
<pre><code>  - [attr] ：匹配属性名为 attr 的元素
  - [attr = value]
  - [attr ~= value] 属性值里至少有一个 = value，比如 &lt;div attr=&quot;0 1 2&quot;&gt; 有3个值
  - [attr |= value] 属性值为“value”或是以“value-”为前缀
  - [attr^=value] 属性值是以&quot;value&quot;开头
  - [attr$=value] 属性值是以&quot;value&quot;结尾
  - [attr*=value] 属性值包含有&quot;value&quot;，不严格匹配，如 属性值 = iosAndroid，value 可为 osA、iosA 等
</code></pre>
<ul>
<li>后代<ul>
<li>div p {}<br>匹配 div 下的 所有 p</li>
</ul>
</li>
<li>子<ul>
<li>元素 1 &gt; 元素 2 { 声明 }<br>子选择器只会匹配到下一级的元素而后代选择器是匹配到所有的后代元素不管 dom 的层级有多深</li>
</ul>
</li>
<li>通用兄弟<ul>
<li>位置无须紧邻，只须同层级，A~B 选择 A 元素之后【所有】同层级 B 元素</li>
</ul>
</li>
<li>相邻兄弟<ul>
<li>A + B<br>当 B 紧跟在 A 之后，并且 A B 都是属于同一个父元素的子元素，则 B 将被选中</li>
</ul>
</li>
</ul>
<h3><a href="#wei-lei" class="header-anchor">#</a><span id="wei-lei">伪类</span></h3><p>一个选择器可以同时使用多个伪类，但只能同时使用一个伪元素</p>
<ul>
<li>常见<ul>
<li>:hover 鼠标悬停</li>
<li>:focus 焦点</li>
<li>:first-child 表示在一组兄弟元素中的第一个元素</li>
<li>:last-child 表示在一组兄弟元素中的最后一个元素</li>
<li>:nth-child(an + b) 第 an+b 个<h1><a href="#" class="header-anchor">#</a><span id></span></h1></li>
</ul>
</li>
</ul>
<h1><a href="#margin-he-bing" class="header-anchor">#</a><span id="margin-he-bing">margin 合并</span></h1><p><em><strong>margin 合并是取 margin 较大一方的值，而不是相加</strong></em></p>
<h2><a href="#he-bing-qian-ti" class="header-anchor">#</a><span id="he-bing-qian-ti">合并前提</span></h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/css/css_Box_Model/Mastering_margin_collapsing">https://developer.mozilla.org/en-US/docs/Web/css/css_Box_Model/Mastering_margin_collapsing</a></p>
<ul>
<li>同一 BFC 内相邻的 Block-Level 的元素<ul>
<li>floating 和 absolutely positioned 的元素不会</li>
</ul>
</li>
</ul>
<h1><a href="#qing-chu-float" class="header-anchor">#</a><span id="qing-chu-float">清除 float</span></h1><h2><a href="#can-kao" class="header-anchor">#</a><span id="can-kao">参考</span></h2><p><a href="https://github.com/ljianshu/Blog/issues/16">https://github.com/ljianshu/Blog/issues/16</a></p>
<ul>
<li>使 float 的父 div 成为 BFC</li>
<li>伪类/伪元素 + clear</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;wrap&quot;</span> <span class="attr">class</span>=<span class="string">&quot;clearfix&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;inner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  #wrap &#123;</span><br><span class="line"><span class="css">    <span class="attribute">border</span>: <span class="number">1px</span> solid;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #inner &#123;</span><br><span class="line"><span class="css">    <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background</span>: pink;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">    <span class="attribute">clear</span>: both;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1><a href="#bfc" class="header-anchor">#</a><span id="bfc">BFC</span></h1><h2><a href="#can-kao" class="header-anchor">#</a><span id="can-kao">参考</span></h2><ul>
<li><a href="https://github.com/ljianshu/Blog/issues/15">https://github.com/ljianshu/Blog/issues/15</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/css/Block_formatting_context">https://developer.mozilla.org/zh-CN/docs/Web/Guide/css/Block_formatting_context</a></li>
</ul>
<h2><a href="#what" class="header-anchor">#</a><span id="what">WHAT</span></h2><ul>
<li>Block formatting context</li>
<li>块级格式化上下文</li>
<li>产生一块独立的渲染区域，只容纳块级元素。<em><strong>可理解为一个管理块级元素的容器</strong></em></li>
</ul>
<h2><a href="#how-amp-why" class="header-anchor">#</a><span id="how-amp-why">HOW &amp; WHY</span></h2><ul>
<li>如何创建<ul>
<li>float 为 left | right</li>
<li><em><strong>overflow 为 hidden | auto | scroll （常用）</strong></em></li>
<li>display 为 table-cell | table-caption | inline-block | inline-flex | flex</li>
<li>position 为 absolute | fixed</li>
<li>根元素</li>
<li><em><strong>display: flow-root 可创建无副作用的 BFC ，即能避免子代 float 元素溢出的 BFC</strong></em></li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  .box &#123;</span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">224</span>, <span class="number">206</span>, <span class="number">247</span>);</span></span><br><span class="line"><span class="css">    <span class="attribute">border</span>: <span class="number">5px</span> solid rebeccapurple;</span></span><br><span class="line"><span class="css">    <span class="attribute">display</span>: flow-root;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .float &#123;</span><br><span class="line"><span class="css">    <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: white;</span></span><br><span class="line"><span class="css">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="css">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float&quot;</span>&gt;</span>I am a floated box!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>I am content inside the container.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><em>**      **</em></p>
<ul>
<li>内部规则<ul>
<li>内部块级元素都占一行</li>
<li>元素逐个垂直排序，距离由 margin 决定，margin 会折叠</li>
</ul>
</li>
<li>体现的特性<ul>
<li>BFC 的区域不会与非同一 BFC 的 float box 重叠，即浮动不会影响其它 BFC 中元素的布局</li>
<li>可解决父 div 高度塌陷的问题，将父 div 变成 BFC，float 的子 div 就被套入这个 BFC 了</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  .parent &#123;</span><br><span class="line"><span class="css">    <span class="attribute">border</span>: solid <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">    <span class="comment">/* 将 parent 变为 BFC */</span></span></span><br><span class="line"><span class="css">    <span class="comment">/* overflow: hidden; */</span></span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.child</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">    <span class="attribute">float</span>: left;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.child</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css">    <span class="attribute">float</span>: left;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.child</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: greenyellow;</span></span><br><span class="line"><span class="css">    <span class="attribute">float</span>: left;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<pre><code>  - 同一 BFC 内的 float 元素不会与其他 block 元素产生重叠
</code></pre>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  .box1 &#123;</span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">    <span class="attribute">background</span>: lightblue;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .box2 &#123;</span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background</span>: <span class="number">#eee</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>我是一个左浮动的元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span></span><br><span class="line">    喂喂喂!大家不要生气嘛，生气会犯嗔戒的。悟空你也太调皮了，</span><br><span class="line">    我跟你说过叫你不要乱扔东西，你怎么又……你看，我还没说完你就把棍子给扔掉了!</span><br><span class="line">    月光宝盒是宝物，你把它扔掉会污染环境，要是砸到小朋友怎么办，就算砸不到小朋友，</span><br><span class="line">    砸到花花草草也是不对的。</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1><a href="#ifc" class="header-anchor">#</a><span id="ifc">IFC</span></h1><h2><a href="#what" class="header-anchor">#</a><span id="what">WHAT</span></h2><ul>
<li>Inline Formatting Contexts</li>
</ul>
<h2><a href="#how-amp-why" class="header-anchor">#</a><span id="how-amp-why">HOW &amp; WHY</span></h2><ul>
<li>如何创建 IFC<ul>
<li>设置为 inline-block 即可，此时可用 text-align 和 vertical-align 达成水平/垂直居中</li>
</ul>
</li>
</ul>
<h1><a href="#shui-ping-ju-zhong" class="header-anchor">#</a><span id="shui-ping-ju-zhong">水平居中</span></h1><p><a href="https://github.com/ljianshu/Blog/issues/29#">如何居中一个元素（终结版）</a></p>
<h3><a href="#inline-yuan-su" class="header-anchor">#</a><span id="inline-yuan-su">inline 元素</span></h3><ul>
<li><code>text-align: center</code></li>
<li>block 中是 block ，可以让里面的 block 为 inline-block</li>
</ul>
<h3><a href="#block-yuan-su" class="header-anchor">#</a><span id="block-yuan-su">block 元素</span></h3><ul>
<li><code>margin: &#123;any&#125; auto</code> ，不要求 margin top、bottom，只需 left right 为 auto</li>
<li><code>display: table</code> + <code>margin: &#123;any&#125; auto</code><ul>
<li>table 类似 block ，只是宽度为内容宽</li>
</ul>
</li>
<li><em><strong>父 relative 子 absolute + transform（2D/3D 转换）</strong></em><ul>
<li><em><strong>子向右移动父宽度的一半，再向左移动自身宽度的一半</strong></em></li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  .child &#123;</span><br><span class="line"><span class="css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">    <span class="comment">/* 子向右移动父宽度的一半 */</span></span></span><br><span class="line"><span class="css">    <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">    <span class="comment">/* 再向左移动自身宽度的一半 */</span></span></span><br><span class="line"><span class="css">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>);</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .parent &#123;</span><br><span class="line"><span class="css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>flex + justify-content: center</li>
<li>flex + margin auto</li>
</ul>
<h3><a href="#xing-nei-duo-ge-block-yuan-su" class="header-anchor">#</a><span id="xing-nei-duo-ge-block-yuan-su">行内多个 block 元素</span></h3><ul>
<li>flex + justify-content: center</li>
<li>全设为 inline-block，父级 text-align: center</li>
</ul>
<h3><a href="#float-yuan-su" class="header-anchor">#</a><span id="float-yuan-su">float 元素</span></h3><h4><a href="#ding-kuan-float" class="header-anchor">#</a><span id="ding-kuan-float">定宽 float</span></h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  .self &#123;</span><br><span class="line"><span class="css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">    <span class="comment">/* 向右移动父级宽度的一半 */</span></span></span><br><span class="line"><span class="css">    <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">    <span class="comment">/* 向左移动自身宽度的一半 */</span></span></span><br><span class="line"><span class="css">    <span class="attribute">margin-left</span>: -<span class="number">250px</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;self&quot;</span> <span class="attr">style</span>=<span class="string">&quot;float:left;width:500px;&quot;</span>&gt;</span>我是要居中的浮动元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4><a href="#bu-ding-kuan-float" class="header-anchor">#</a><span id="bu-ding-kuan-float">不定宽 float</span></h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;real-father&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fake-father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>float 水平居中<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  .real-father &#123;</span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: aquamarine;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="comment">/* .fake 这一层是披上的，没有内容的，在外一层才是原先的父元素*/</span></span></span><br><span class="line">  .fake-father &#123;</span><br><span class="line"><span class="css">    <span class="comment">/* 加上 float 可消除 son 的 float。是因为都脱离了文档流？ */</span></span></span><br><span class="line"><span class="css">    <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">    <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .son &#123;</span><br><span class="line"><span class="css">    <span class="attribute">float</span>: left;</span></span><br><span class="line">    /* </span><br><span class="line">    fake-father 其实跟 son 是等宽等高的，</span><br><span class="line">    这里移动 fake-father 宽度的一半就是移动 son 自身宽度的一半 </span><br><span class="line">    */</span><br><span class="line"><span class="css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">    <span class="attribute">right</span>: <span class="number">50%</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4><a href="#tong-yong-ban-fa-flex" class="header-anchor">#</a><span id="tong-yong-ban-fa-flex">通用办法 flex</span></h4><p>justify-content: center</p>
<h3><a href="#absolute-yuan-su" class="header-anchor">#</a><span id="absolute-yuan-su">absolute 元素</span></h3><p><em><strong>margin auto 加上 left/right: 0 （还不能省略，很奇特，我被坑过一次）</strong></em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>让绝对定位的元素水平居中对齐。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">.parent&#123; position:relative; &#125; .child&#123; position: absolute; /*绝对定位*/ width:</span><br><span class="line">200px; height:100px; background: yellow; margin: 0 auto; /*水平居中*/ left: 0;</span><br><span class="line">/*此处不能省略，且为0*/ right: 0;/*此处不能省略，且为0*/ &#125;</span><br></pre></td></tr></table></figure>

<h2><a href="#" class="header-anchor">#</a><span id></span></h2><h1><a href="#chui-zhi-ju-zhong" class="header-anchor">#</a><span id="chui-zhi-ju-zhong">垂直居中</span></h1><h3><a href="#inline-yuan-su-dan-xing" class="header-anchor">#</a><span id="inline-yuan-su-dan-xing">inline 元素 (单行)</span></h3><p>inline-height 等于 height</p>
<h3><a href="#inline-yuan-su-duo-xing" class="header-anchor">#</a><span id="inline-yuan-su-duo-xing">inline 元素 (多行)</span></h3><ul>
<li>flex 主轴垂直后 justify-content: center</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    Dance like nobody is watching, code like everybody is. Dance like nobody is</span><br><span class="line">    watching, code like everybody is. Dance like nobody is watching, code like</span><br><span class="line">    everybody is.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  .parent &#123;</span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">140px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">    <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="css">    <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="css">    <span class="attribute">border</span>: <span class="number">2px</span> dashed <span class="number">#f69c55</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>父 table 子 table-cell，子 vertical-align: middle<ul>
<li>vertical-align 用于<strong>_ inline 元素和 table-cell 元素_</strong> 的垂直居中</li>
</ul>
</li>
</ul>
<h3><a href="#block-yuan-su" class="header-anchor">#</a><span id="block-yuan-su">block 元素</span></h3><h4><a href="#ding-gao-block" class="header-anchor">#</a><span id="ding-gao-block">定高 block</span></h4><p>absolute + 负 margin</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>固定高度的块级元素垂直居中。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  .parent &#123;</span><br><span class="line"><span class="css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .child &#123;</span><br><span class="line"><span class="css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">    <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    <span class="comment">/*  margin 负自身一半高度 */</span></span></span><br><span class="line"><span class="css">    <span class="attribute">margin-top</span>: -<span class="number">50px</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4><a href="#bu-ding-gao-block" class="header-anchor">#</a><span id="bu-ding-gao-block">不定高 block</span></h4><p>absolute + transform</p>
<h4><a href="#tong-yong" class="header-anchor">#</a><span id="tong-yong">通用</span></h4><ul>
<li>flex + align-items</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>未知高度的块级元素垂直居中。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  .parent &#123;</span><br><span class="line"><span class="css">    <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">    <span class="attribute">align-items</span>: center;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>将父级设为 table-cell 后用 vertical-align</li>
</ul>
<h1><a href="#" class="header-anchor">#</a><span id></span></h1><h1><a href="#shui-ping-chui-zhi-ju-zhong" class="header-anchor">#</a><span id="shui-ping-chui-zhi-ju-zhong">水平垂直居中</span></h1><h3><a href="#yi-zhi-gao-kuan" class="header-anchor">#</a><span id="yi-zhi-gao-kuan">已知高宽</span></h3><ul>
<li>absolute + 负 margin</li>
</ul>
<h3><a href="#yi-zhi-gao" class="header-anchor">#</a><span id="yi-zhi-gao">已知高</span></h3><ul>
<li>absolute + margin: auto</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#container</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>; <span class="comment">/* 必须有个高度 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#center</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>flex/grid + margin: auto</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#container</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>; <span class="comment">/* 必须有个高度 */</span></span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="comment">/* display: flex; */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#center</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>flex 的 justify-content 和 align-items</li>
</ul>
<h3><a href="#wei-zhi-gao-kuan" class="header-anchor">#</a><span id="wei-zhi-gao-kuan">未知高宽</span></h3><p>absolute  + transform</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#container</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#center</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1><a href="#shi-xian-san-lan-bu-ju-de-ji-chong-fang-fa" class="header-anchor">#</a><span id="shi-xian-san-lan-bu-ju-de-ji-chong-fang-fa">实现三栏布局的几种方法</span></h1><p><a href="https://github.com/ljianshu/Blog/issues/14">https://github.com/ljianshu/Blog/issues/14</a><br><strong><em>推荐程度由高至低</em></strong></p>
<h3><a href="#flex-bu-ju" class="header-anchor">#</a><span id="flex-bu-ju">flex 布局</span></h3><ul>
<li>支持 flex 的优先 flex，支持 <strong>IE10</strong> 及以上</li>
</ul>
<h3><a href="#biao-ge-bu-ju" class="header-anchor">#</a><span id="biao-ge-bu-ju">表格布局</span></h3><ul>
<li>兼容性很好</li>
<li>缺点<ul>
<li>无法设置 <strong>栏边距</strong></li>
<li>对 seo 不友好</li>
<li>当其中一个单元格高度超出的时候，两侧的单元格也是会跟着一起变高的</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--表格布局--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;layout table&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    .layout.table .left-center-right &#123;</span><br><span class="line"><span class="css">      <span class="attribute">display</span>: table;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.layout</span><span class="selector-class">.table</span> <span class="selector-class">.left-center-right</span> &gt; <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">display</span>: table-cell;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .layout.table .left &#123;</span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">      <span class="comment">/* 其他两个 table-cell 的高度也被撑开到 400px */</span></span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background</span>: red;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .layout.table .center &#123;</span><br><span class="line"><span class="css">      <span class="attribute">background</span>: yellow;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .layout.table .right &#123;</span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background</span>: blue;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>三栏布局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;left-center-right&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>表格布局解决方案<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      1.这是三栏布局的浮动解决方案； 2.这是三栏布局的浮动解决方案；</span><br><span class="line">      3.这是三栏布局的浮动解决方案； 4.这是三栏布局的浮动解决方案；</span><br><span class="line">      5.这是三栏布局的浮动解决方案； 6.这是三栏布局的浮动解决方案；</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3><a href="#fu-dong-bu-ju" class="header-anchor">#</a><span id="fu-dong-bu-ju">浮动布局</span></h3><ul>
<li>先写左右浮动 div，再写中间块的 div，避免右浮动被挤到下一行。浮动 div 要记得 <strong>清除浮动</strong> ，避免 <strong>容器高度塌陷</strong></li>
</ul>
<h3><a href="#jue-dui-bu-ju" class="header-anchor">#</a><span id="jue-dui-bu-ju">绝对布局</span></h3><ul>
<li>三个 div 都 absolute，后代 div <strong>在高度未知时容易出问题</strong> ，该布局可用性较差</li>
</ul>
<h3><a href="#wang-ge-bu-ju" class="header-anchor">#</a><span id="wang-ge-bu-ju">网格布局</span></h3><ul>
<li>最强大，但兼容性不好。IE10+上支持，而且也仅支持部分属性</li>
</ul>
<h2><a href="#ji-chong-chang-jian-de-css-bu-ju" class="header-anchor">#</a><span id="ji-chong-chang-jian-de-css-bu-ju">几种常见的 CSS 布局</span></h2><p><a href="https://github.com/ljianshu/Blog/issues/40">https://github.com/ljianshu/Blog/issues/40</a></p>
<h1><a href="#css-yu-chu-li-qi" class="header-anchor">#</a><span id="css-yu-chu-li-qi">CSS 预处理器</span></h1><h2><a href="#can-kao" class="header-anchor">#</a><span id="can-kao">参考</span></h2><p><a href="https://efe.baidu.com/blog/revisiting-css-preprocessors/">再谈 CSS 预处理器</a></p>
<h2><a href="#what" class="header-anchor">#</a><span id="what">What</span></h2><p>CSS 扩展语言，编译为 CSS。有 less、sass、stylus，是我会选 stylus</p>
<h2><a href="#benifit" class="header-anchor">#</a><span id="benifit">Benifit</span></h2><ul>
<li>添加编程特性，如 <strong>变量</strong> 、 <strong>函数</strong></li>
<li>减少书写重复的选择器</li>
</ul>
<h2><a href="#point" class="header-anchor">#</a><span id="point">Point</span></h2><ul>
<li>基本语法</li>
<li>嵌套</li>
<li>变量</li>
<li><a href>@import </a></li>
<li>mixin</li>
<li>继承</li>
<li>函数</li>
<li>逻辑控制</li>
</ul>
<h2><a href="#qian-tao" class="header-anchor">#</a><span id="qian-tao">嵌套</span></h2><p>嵌套都一样</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.a</span> &#123;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-class">.b</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>編譯後</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.a</span><span class="selector-class">.b</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>引用父級選擇器：&amp;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在一个选择器中用两次以上 &amp; 且父选择器是一个列表时，</span><br><span class="line">Less 会对选择器进行排列组合，而 Sass 和 Stylus 不会这么做。</span><br><span class="line"></span><br><span class="line">假设上层选择器为 .a, .b，</span><br><span class="line">则内部的 &amp; &amp; 在 Less 中会成为 .a .a, .a .b, .b .a, .b .b，</span><br><span class="line">而 Sass 和 Stylus 则输出 .a .a, .b .b</span><br></pre></td></tr></table></figure>

<p>Sass 和 Stylus 分别用 <a href>@at-root </a> 和 / 符号作为嵌套引用时的根选择器</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">.post</span><br><span class="line">  section</span><br><span class="line">    .section-title</span><br><span class="line">      <span class="attribute">color</span> <span class="number">#333</span></span><br><span class="line">      /<span class="selector-class">.post</span> .section-link</span><br><span class="line">        <span class="attribute">color</span> <span class="number">#999</span></span><br><span class="line">    <span class="comment">/* other section styles */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* other post styles */</span></span><br></pre></td></tr></table></figure>

<p>編譯後</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.post</span> <span class="selector-tag">section</span> <span class="selector-class">.section-title</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.post</span> <span class="selector-class">.section-link</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2><a href="#bian-liang" class="header-anchor">#</a><span id="bian-liang">变量</span></h2><p>stylus</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">red = <span class="number">#c00</span></span><br><span class="line"></span><br><span class="line">strong</span><br><span class="line">  <span class="attribute">color</span>: red</span><br></pre></td></tr></table></figure>

<p>Less 的变量名用 @ 开头很可能会和以后的 css 新 @ 规则冲突</p>
<h2><a href="#bian-liang-zuo-yong-yu" class="header-anchor">#</a><span id="bian-liang-zuo-yong-yu">变量作用域</span></h2><p>三种预处理器的变量作用域都是按嵌套的规则集划分，并且在当前规则集下找不到对应变量时会逐级向上查找</p>
<p>变量值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">less 最后定义的值（这样就可以覆盖引入的第三库的变量，</span><br><span class="line">缺点也很明显，会影响之前的样式，sass、stylus 则不会）；</span><br><span class="line">sass 和 stylus 上一个定义值。</span><br></pre></td></tr></table></figure>

<h2><a href="#xiu-gai-di-san-fang-ku-yang-shi" class="header-anchor">#</a><span id="xiu-gai-di-san-fang-ku-yang-shi">修改第三方库样式</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Sass 和 Stylus 都提供了「仅当变量不存在时才赋值」的功能</span><br><span class="line">&#x2F;&#x2F; 我们要修改的变量</span><br><span class="line">$x: 1;</span><br><span class="line">&#x2F;&#x2F; 第三方库开发时预留 !default，前提是人家有预留给你</span><br><span class="line">$x: 5 !default;</span><br><span class="line">$y: 3 !default;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; $x &#x3D; 1, $y &#x3D; 3</span><br></pre></td></tr></table></figure>

<h2><a href="#cha-zhi" class="header-anchor">#</a><span id="cha-zhi">插值</span></h2><ul>
<li>支持变量名插值、选择器插值、<a href>@import </a> 语句插值、属性名插值</li>
<li>支持其他 @ 规则插值。三种预处理器均支持在 @media、@keyframes、<a href>@counter-style </a> 等规则中进行插值。<a href>@media </a> 插值主要用来做响应式的配置，而 <a href>@keyframes </a> 这样带名称名称的 @ 规则则可以通过插值来避免命名冲突</li>
</ul>
<h2><a href="#mixin" class="header-anchor">#</a><span id="mixin">mixin</span></h2><p>如果使用 mixin，推荐 sass 和 stylus</p>
<p>sass 的 sass 语法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; &#x3D; 表示 mixin</span><br><span class="line">&#x3D;large-text</span><br><span class="line">  font:</span><br><span class="line">    family: Arial</span><br><span class="line">    size: 20px</span><br><span class="line">    weight: bold</span><br><span class="line">  color: #ff0000</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; + 表示引入</span><br><span class="line">.page-title</span><br><span class="line">  +large-text</span><br><span class="line">  padding: 4px</span><br><span class="line">  margin-top: 10px</span><br></pre></td></tr></table></figure>

<p>sass 的 scss 语法</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> large-text &#123;</span><br><span class="line">  <span class="attribute">font</span>: &#123;</span><br><span class="line">    family: Arial;</span><br><span class="line">    size: <span class="number">20px</span>;</span><br><span class="line">    weight: bold;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff0000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @include 表示引入</span></span><br><span class="line"><span class="selector-class">.page-title</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> large-text;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>stylus</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">border-radius</span><span class="params">(n)</span></span></span><br><span class="line">  -webkit-<span class="attribute">border-radius</span>: n</span><br><span class="line">  -moz-<span class="attribute">border-radius</span>: n</span><br><span class="line">  <span class="attribute">border-radius</span>: n</span><br><span class="line"></span><br><span class="line">.circle</span><br><span class="line">  <span class="attribute">border-radius</span>(<span class="number">50%</span>)</span><br></pre></td></tr></table></figure>

<h2><a href="#ji-cheng" class="header-anchor">#</a><span id="ji-cheng">继承</span></h2><p>stylus</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">.message</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span></span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eee</span></span><br><span class="line"></span><br><span class="line">.warning</span><br><span class="line">  <span class="keyword">@extend</span> .message</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#e2e21e</span></span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.message</span>,</span><br><span class="line"><span class="selector-class">.warning</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.warning</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#e2e21e</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继承功能还有一个潜在的问题：继承会影响输出的顺序</p>
<p>sass</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.active &#123;</span><br><span class="line">   color: red;</span><br><span class="line">&#125;</span><br><span class="line">button.primary &#123;</span><br><span class="line">   color: green;</span><br><span class="line">&#125;</span><br><span class="line">button.active &#123;</span><br><span class="line">   @extend .active;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2><a href="#han-shu" class="header-anchor">#</a><span id="han-shu">函数</span></h2><p>三者调用函数的方式几乎一致，不同之处在于 Sass 和 Stylus 支持直接指定参数名的方式传入参数。以 Stylus 为例：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">subtract</span><span class="params">(a, b)</span></span></span><br><span class="line">  <span class="selector-tag">a</span> - b</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">subtract</span><span class="params">(b: <span class="number">10</span>, a: <span class="number">25</span>)</span></span> <span class="comment">// same as substract(25, 10)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 好处：如果参数列表比较长，Stylus 可以直接为列表后面的参数赋值，</span></span><br><span class="line"><span class="comment">// 而不需要一路将之前的参数填上 null 或默认值</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
</search>
